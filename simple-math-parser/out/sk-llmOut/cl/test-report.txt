$ javac -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Mult.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Operator.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Add.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Int.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Pow.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Factory.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Div.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Expression.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Dec.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Sub.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathTree/StringScanner.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathTree/CalcApp.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathTree/MathTree.java
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionSetParensGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetParensGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionIsParensGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddDelimiterGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSaveTokenGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCleanStrListGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/CalcAppMainGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerScanGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInitGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeSolveGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddSpecialCharGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:17: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:37: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:42: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:17: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:31: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:32: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:34: error: cannot find symbol
        AddStub(MathNode left, MathNode right) {
                ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:34: error: cannot find symbol
        AddStub(MathNode left, MathNode right) {
                               ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:40: error: cannot find symbol
        protected MathNode getLeftNode() {
                  ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:45: error: cannot find symbol
        protected MathNode getRightNode() {
                  ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:17: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:31: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:32: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:34: error: cannot find symbol
        TestMult(MathNode left, MathNode right) {
                 ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:34: error: cannot find symbol
        TestMult(MathNode left, MathNode right) {
                                ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:40: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:45: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:16: error: cannot find symbol
    static class StubNode extends mathNode.Node {
                                          ^
  symbol:   class Node
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:17: error: cannot find symbol
    static class TestMathNode implements MathNode {
                                         ^
  symbol:   class MathNode
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:13: error: cannot find symbol
    private MathNode leftNode;
            ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:14: error: cannot find symbol
    private MathNode rightNode;
            ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:17: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:37: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:42: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:48: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:49: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:52: error: cannot find symbol
        TestableDiv(MathNode left, MathNode right, boolean parens) {
                    ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:52: error: cannot find symbol
        TestableDiv(MathNode left, MathNode right, boolean parens) {
                                   ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:59: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:64: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:17: error: cannot find symbol
    static abstract class MathNodeStub implements MathNode {
                                                  ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:31: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:32: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:34: error: cannot find symbol
        SubStub(MathNode left, MathNode right) {
                ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:34: error: cannot find symbol
        SubStub(MathNode left, MathNode right) {
                               ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:40: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:45: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:17: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class PowToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:37: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:42: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:9: error: cannot find symbol
import mathTree.mathNode;
               ^
  symbol:   class mathNode
  location: package mathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:19: error: cannot find symbol
    private mathNode invokeBuildTree(LinkedList<String> tokens, boolean isParens) throws Exception {
            ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:4: error: cannot find symbol
import mathTree.MathTree.mathNode;
                        ^
  symbol:   class mathNode
  location: class MathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:17: error: <anonymous mathNode.OperatorSetLeftNodeGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockExpression = new Expression() {
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:18: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:26: error: <anonymous mathNode.OperatorSetLeftNodeGeneratedTest$2> is not abstract and does not override abstract method calculate() in Expression
        operator = new Operator() {
                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:27: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:58: error: <anonymous mathNode.OperatorSetLeftNodeGeneratedTest$3> is not abstract and does not override abstract method checkTree() in Expression
        Expression anotherExpression = new Expression() {
                                                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:59: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:20: error: <anonymous mathNode.AddCloneGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        leftMock = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:26: error: <anonymous mathNode.AddCloneGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        rightMock = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:62: error: <anonymous mathNode.AddCloneGeneratedTest$3> is not abstract and does not override abstract method checkTree() in Expression
        Expression intLeftMock = new Expression() {
                                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:68: error: <anonymous mathNode.AddCloneGeneratedTest$4> is not abstract and does not override abstract method checkTree() in Expression
        Expression intRightMock = new Expression() {
                                                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:89: error: <anonymous mathNode.AddCloneGeneratedTest$5> is not abstract and does not override abstract method checkTree() in Expression
        Expression doubleLeftMock = new Expression() {
                                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:95: error: <anonymous mathNode.AddCloneGeneratedTest$6> is not abstract and does not override abstract method checkTree() in Expression
        Expression doubleRightMock = new Expression() {
                                                      ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:26: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:31: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:36: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:41: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:71: error: cannot find symbol
        MathNode leftNode = new MathNodeStub(left, false);
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:72: error: cannot find symbol
        MathNode rightNode = new MathNodeStub(right, false);
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:86: error: constructor Add in class Add cannot be applied to given types;
        Add add = new Add(null, null) {
                  ^
  required: no arguments
  found:    <null>,<null>
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:98: error: constructor Add in class Add cannot be applied to given types;
        Add add = new Add(null, null) {
                  ^
  required: no arguments
  found:    <null>,<null>
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorCheckTreeGeneratedTest.java:11: error: OperatorStub is not abstract and does not override abstract method toString() in Expression
    static class OperatorStub extends Operator {
           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionSetParensGeneratedTest.java:15: error: <anonymous mathNode.ExpressionSetParensGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        expression = new Expression() {
                                      ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:23: error: cannot find symbol
        assertEquals(original.getValue(), cloned.getValue(), "Clone should have the same value as original");
                             ^
  symbol:   method getValue()
  location: variable original of type Int
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:23: error: cannot find symbol
        assertEquals(original.getValue(), cloned.getValue(), "Clone should have the same value as original");
                                                ^
  symbol:   method getValue()
  location: variable cloned of type Int
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:39: error: cannot find symbol
        assertEquals(value, cloned.getValue());
                                  ^
  symbol:   method getValue()
  location: variable cloned of type Int
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:24: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:40: error: getLeftNode() in AddStub cannot override getLeftNode() in Operator
        protected MathNode getLeftNode() {
                           ^
  attempting to assign weaker access privileges; was public
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:45: error: getRightNode() in AddStub cannot override getRightNode() in Operator
        protected MathNode getRightNode() {
                           ^
  attempting to assign weaker access privileges; was public
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:52: error: cannot find symbol
        MathNode left = new MathNodeStub(5) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:53: error: cannot find symbol
        MathNode right = new MathNodeStub(3) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:64: error: cannot find symbol
        MathNode left = new MathNodeStub(0) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:65: error: cannot find symbol
        MathNode right = new MathNodeStub(0) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:76: error: cannot find symbol
        MathNode left = new MathNodeStub(-5) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:77: error: cannot find symbol
        MathNode right = new MathNodeStub(-3) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:88: error: cannot find symbol
        MathNode left = new MathNodeStub(10) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:89: error: cannot find symbol
        MathNode right = new MathNodeStub(-7) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:100: error: cannot find symbol
        MathNode left = new MathNodeStub(Integer.MIN_VALUE) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:101: error: cannot find symbol
        MathNode right = new MathNodeStub(0) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:112: error: cannot find symbol
        MathNode left = new MathNodeStub(Integer.MAX_VALUE) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:113: error: cannot find symbol
        MathNode right = new MathNodeStub(0) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:124: error: cannot find symbol
        MathNode left = new MathNodeStub(Integer.MAX_VALUE) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:125: error: cannot find symbol
        MathNode right = new MathNodeStub(1) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:137: error: cannot find symbol
        MathNode left = new MathNodeStub(leftVal) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:138: error: cannot find symbol
        MathNode right = new MathNodeStub(rightVal) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:24: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:52: error: cannot find symbol
        MathNode left = new MathNodeStub(5) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:53: error: cannot find symbol
        MathNode right = new MathNodeStub(3) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:64: error: cannot find symbol
        MathNode left = new MathNodeStub(-4) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:65: error: cannot find symbol
        MathNode right = new MathNodeStub(-6) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
Note: /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddSpecialCharGeneratedTest.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
100 errors
only showing the first 100 errors, of 480 total; use -Xmaxerrs if you would like to see more

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:17: error: <anonymous mathNode.OperatorSetLeftNodeGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockExpression = new Expression() {
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:18: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:26: error: <anonymous mathNode.OperatorSetLeftNodeGeneratedTest$2> is not abstract and does not override abstract method calculate() in Expression
        operator = new Operator() {
                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:27: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:58: error: <anonymous mathNode.OperatorSetLeftNodeGeneratedTest$3> is not abstract and does not override abstract method checkTree() in Expression
        Expression anotherExpression = new Expression() {
                                                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:59: error: method does not override or implement a method from a supertype
            @Override
            ^
6 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:20: error: <anonymous mathNode.AddCloneGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        leftMock = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:26: error: <anonymous mathNode.AddCloneGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        rightMock = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:62: error: <anonymous mathNode.AddCloneGeneratedTest$3> is not abstract and does not override abstract method checkTree() in Expression
        Expression intLeftMock = new Expression() {
                                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:68: error: <anonymous mathNode.AddCloneGeneratedTest$4> is not abstract and does not override abstract method checkTree() in Expression
        Expression intRightMock = new Expression() {
                                                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:89: error: <anonymous mathNode.AddCloneGeneratedTest$5> is not abstract and does not override abstract method checkTree() in Expression
        Expression doubleLeftMock = new Expression() {
                                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:95: error: <anonymous mathNode.AddCloneGeneratedTest$6> is not abstract and does not override abstract method checkTree() in Expression
        Expression doubleRightMock = new Expression() {
                                                      ^
6 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:17: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:37: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:42: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:26: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:31: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:36: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:41: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:71: error: cannot find symbol
        MathNode leftNode = new MathNodeStub(left, false);
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:72: error: cannot find symbol
        MathNode rightNode = new MathNodeStub(right, false);
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:86: error: constructor Add in class Add cannot be applied to given types;
        Add add = new Add(null, null) {
                  ^
  required: no arguments
  found:    <null>,<null>
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:98: error: constructor Add in class Add cannot be applied to given types;
        Add add = new Add(null, null) {
                  ^
  required: no arguments
  found:    <null>,<null>
  reason: actual and formal argument lists differ in length
12 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorCheckTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorCheckTreeGeneratedTest.java:11: error: OperatorStub is not abstract and does not override abstract method toString() in Expression
    static class OperatorStub extends Operator {
           ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionSetParensGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionSetParensGeneratedTest.java:15: error: <anonymous mathNode.ExpressionSetParensGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        expression = new Expression() {
                                      ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:23: error: cannot find symbol
        assertEquals(original.getValue(), cloned.getValue(), "Clone should have the same value as original");
                             ^
  symbol:   method getValue()
  location: variable original of type Int
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:23: error: cannot find symbol
        assertEquals(original.getValue(), cloned.getValue(), "Clone should have the same value as original");
                                                ^
  symbol:   method getValue()
  location: variable cloned of type Int
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:39: error: cannot find symbol
        assertEquals(value, cloned.getValue());
                                  ^
  symbol:   method getValue()
  location: variable cloned of type Int
3 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:17: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:31: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:32: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:34: error: cannot find symbol
        AddStub(MathNode left, MathNode right) {
                ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:34: error: cannot find symbol
        AddStub(MathNode left, MathNode right) {
                               ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:40: error: cannot find symbol
        protected MathNode getLeftNode() {
                  ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:45: error: cannot find symbol
        protected MathNode getRightNode() {
                  ^
  symbol:   class MathNode
  location: class AddStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:24: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:40: error: getLeftNode() in AddStub cannot override getLeftNode() in Operator
        protected MathNode getLeftNode() {
                           ^
  attempting to assign weaker access privileges; was public
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:45: error: getRightNode() in AddStub cannot override getRightNode() in Operator
        protected MathNode getRightNode() {
                           ^
  attempting to assign weaker access privileges; was public
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:52: error: cannot find symbol
        MathNode left = new MathNodeStub(5) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:53: error: cannot find symbol
        MathNode right = new MathNodeStub(3) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:64: error: cannot find symbol
        MathNode left = new MathNodeStub(0) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:65: error: cannot find symbol
        MathNode right = new MathNodeStub(0) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:76: error: cannot find symbol
        MathNode left = new MathNodeStub(-5) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:77: error: cannot find symbol
        MathNode right = new MathNodeStub(-3) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:88: error: cannot find symbol
        MathNode left = new MathNodeStub(10) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:89: error: cannot find symbol
        MathNode right = new MathNodeStub(-7) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:100: error: cannot find symbol
        MathNode left = new MathNodeStub(Integer.MIN_VALUE) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:101: error: cannot find symbol
        MathNode right = new MathNodeStub(0) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:112: error: cannot find symbol
        MathNode left = new MathNodeStub(Integer.MAX_VALUE) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:113: error: cannot find symbol
        MathNode right = new MathNodeStub(0) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:124: error: cannot find symbol
        MathNode left = new MathNodeStub(Integer.MAX_VALUE) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:125: error: cannot find symbol
        MathNode right = new MathNodeStub(1) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:137: error: cannot find symbol
        MathNode left = new MathNodeStub(leftVal) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:138: error: cannot find symbol
        MathNode right = new MathNodeStub(rightVal) {};
        ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
27 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:17: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:31: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:32: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:34: error: cannot find symbol
        TestMult(MathNode left, MathNode right) {
                 ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:34: error: cannot find symbol
        TestMult(MathNode left, MathNode right) {
                                ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:40: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:45: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class TestMult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:24: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:52: error: cannot find symbol
        MathNode left = new MathNodeStub(5) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:53: error: cannot find symbol
        MathNode right = new MathNodeStub(3) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:64: error: cannot find symbol
        MathNode left = new MathNodeStub(-4) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:65: error: cannot find symbol
        MathNode right = new MathNodeStub(-6) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:76: error: cannot find symbol
        MathNode left = new MathNodeStub(0) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:77: error: cannot find symbol
        MathNode right = new MathNodeStub(100) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:88: error: cannot find symbol
        MathNode left = new MathNodeStub(5) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:89: error: cannot find symbol
        MathNode right = new MathNodeStub(2.5) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:100: error: cannot find symbol
        MathNode left = new MathNodeStub(3.5) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:101: error: cannot find symbol
        MathNode right = new MathNodeStub(2.0) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:112: error: cannot find symbol
        MathNode left = new MathNodeStub(10) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:113: error: cannot find symbol
        MathNode right = new MathNodeStub(0.0) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:124: error: cannot find symbol
        MathNode left = new MathNodeStub(-3) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:125: error: cannot find symbol
        MathNode right = new MathNodeStub(4.5) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:136: error: cannot find symbol
        MathNode left = new MathNodeStub(1000000) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:137: error: cannot find symbol
        MathNode right = new MathNodeStub(2000000) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:148: error: cannot find symbol
        MathNode left = new MathNodeStub(Integer.MAX_VALUE) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:149: error: cannot find symbol
        MathNode right = new MathNodeStub(1) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:160: error: cannot find symbol
        MathNode left = new MathNodeStub(Integer.MIN_VALUE) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:161: error: cannot find symbol
        MathNode right = new MathNodeStub(1) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:172: error: cannot find symbol
        MathNode left = new MathNodeStub(0.0000001) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:173: error: cannot find symbol
        MathNode right = new MathNodeStub(0.0000002) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:185: error: cannot find symbol
        MathNode left = new MathNodeStub(leftVal) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:186: error: cannot find symbol
        MathNode right = new MathNodeStub(rightVal) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:215: error: cannot find symbol
        MathNode left = new MathNodeStub(leftVal) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:216: error: cannot find symbol
        MathNode right = new MathNodeStub(rightVal) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
35 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:16: error: cannot find symbol
    static class StubNode extends mathNode.Node {
                                          ^
  symbol:   class Node
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:25: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:30: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:40: error: constructor Mult in class Mult cannot be applied to given types;
        Mult mult = new Mult(left, right);
                    ^
  required: no arguments
  found:    StubNode,StubNode
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:50: error: constructor Mult in class Mult cannot be applied to given types;
        Mult mult = new Mult(left, right);
                    ^
  required: no arguments
  found:    StubNode,StubNode
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:62: error: constructor Mult in class Mult cannot be applied to given types;
        Mult mult = new Mult(left, right);
                    ^
  required: no arguments
  found:    StubNode,StubNode
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:90: error: constructor Mult in class Mult cannot be applied to given types;
        Mult innerMult = new Mult(innerLeft, innerRight);
                         ^
  required: no arguments
  found:    StubNode,StubNode
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:94: error: constructor Mult in class Mult cannot be applied to given types;
        Mult outerMult = new Mult(outerLeft, innerMult);
                         ^
  required: no arguments
  found:    StubNode,Mult
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:105: error: constructor Mult in class Mult cannot be applied to given types;
        Mult mult = new Mult(left, right);
                    ^
  required: no arguments
  found:    StubNode,StubNode
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:115: error: constructor Mult in class Mult cannot be applied to given types;
        Mult mult = new Mult(left, right);
                    ^
  required: no arguments
  found:    StubNode,StubNode
  reason: actual and formal argument lists differ in length
10 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java:30: error: cannot find symbol
        assertEquals(value, decResult.getValue(), 1e-9);
                                     ^
  symbol:   method getValue()
  location: variable decResult of type Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java:41: error: cannot find symbol
        assertEquals(input, decResult.getValue(), 1e-9);
                                     ^
  symbol:   method getValue()
  location: variable decResult of type Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java:52: error: cannot find symbol
        assertEquals(input, decResult.getValue(), 1e-9);
                                     ^
  symbol:   method getValue()
  location: variable decResult of type Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java:63: error: cannot find symbol
        assertEquals(input, decResult.getValue(), 1e-9);
                                     ^
  symbol:   method getValue()
  location: variable decResult of type Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java:74: error: cannot find symbol
        assertEquals(input, decResult.getValue(), 1e-9);
                                     ^
  symbol:   method getValue()
  location: variable decResult of type Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java:85: error: cannot find symbol
        assertEquals(input, decResult.getValue(), 1e-9);
                                     ^
  symbol:   method getValue()
  location: variable decResult of type Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java:96: error: cannot find symbol
        assertEquals(input, decResult.getValue(), 1e-9);
                                     ^
  symbol:   method getValue()
  location: variable decResult of type Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java:107: error: cannot find symbol
        assertEquals(input, decResult.getValue(), 1e-9);
                                     ^
  symbol:   method getValue()
  location: variable decResult of type Dec
8 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCalculateGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetParensGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetParensGeneratedTest.java:13: error: Operator is abstract; cannot be instantiated
        Operator operator = new Operator();
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetParensGeneratedTest.java:22: error: Operator is abstract; cannot be instantiated
        Operator operator = new Operator();
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetParensGeneratedTest.java:32: error: Operator is abstract; cannot be instantiated
        Operator operator = new Operator();
                            ^
3 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:17: error: cannot find symbol
    static class TestMathNode implements MathNode {
                                         ^
  symbol:   class MathNode
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:24: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:64: error: incompatible types: TestMathNode cannot be converted to Expression
        div.setLeftNode(new TestMathNode(leftValue));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:65: error: incompatible types: TestMathNode cannot be converted to Expression
        div.setRightNode(new TestMathNode(rightValue));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:77: error: incompatible types: TestMathNode cannot be converted to Expression
        div.setLeftNode(new TestMathNode(1.0));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:78: error: incompatible types: TestMathNode cannot be converted to Expression
        div.setRightNode(new TestMathNode(0.0));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:90: error: incompatible types: TestMathNode cannot be converted to Expression
        div.setLeftNode(new TestMathNode(-1.0));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:91: error: incompatible types: TestMathNode cannot be converted to Expression
        div.setRightNode(new TestMathNode(0.0));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:103: error: incompatible types: TestMathNode cannot be converted to Expression
        div.setLeftNode(new TestMathNode(0.0));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:104: error: incompatible types: TestMathNode cannot be converted to Expression
        div.setRightNode(new TestMathNode(0.0));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:115: error: incompatible types: TestMathNode cannot be converted to Expression
        div.setLeftNode(new TestMathNode(10));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:116: error: incompatible types: TestMathNode cannot be converted to Expression
        div.setRightNode(new TestMathNode(2));
                         ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
13 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCheckTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCheckTreeGeneratedTest.java:13: error: ConcreteExpression is not abstract and does not override abstract method toString() in Expression
    static class ConcreteExpression extends Expression {
           ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecToStringGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:27: error: abstract method clone() in Expression cannot be accessed directly
                    return super.clone();
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:38: error: abstract method clone() in Expression cannot be accessed directly
                    return super.clone();
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:46: error: incompatible types: mathNode.MultCloneGeneratedTest.Expression cannot be converted to mathNode.Expression
        multInstance.setLeftNode(leftNode);
                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:47: error: incompatible types: mathNode.MultCloneGeneratedTest.Expression cannot be converted to mathNode.Expression
        multInstance.setRightNode(rightNode);
                                  ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
4 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java:13: error: TestOperator is not abstract and does not override abstract method toString() in Expression
    static class TestOperator extends Operator {
           ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java:21: error: <anonymous mathNode.DivCloneGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockLeft = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java:27: error: <anonymous mathNode.DivCloneGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        mockRight = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java:52: error: <anonymous mathNode.DivCloneGeneratedTest$3> is not abstract and does not override abstract method checkTree() in Expression
        Expression leftClone = new Expression() {
                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java:58: error: <anonymous mathNode.DivCloneGeneratedTest$4> is not abstract and does not override abstract method checkTree() in Expression
        mockLeft = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java:73: error: <anonymous mathNode.DivCloneGeneratedTest$5> is not abstract and does not override abstract method checkTree() in Expression
        Expression rightClone = new Expression() {
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java:79: error: <anonymous mathNode.DivCloneGeneratedTest$6> is not abstract and does not override abstract method checkTree() in Expression
        mockRight = new Expression() {
                                     ^
6 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCalculateGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntToStringGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:13: error: cannot find symbol
    private MathNode leftNode;
            ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:14: error: cannot find symbol
    private MathNode rightNode;
            ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:20: error: cannot find symbol
        leftNode = new MathNode() {
                       ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:23: error: cannot find symbol
            public MathNode setValue(String val) {
                   ^
  symbol: class MathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:28: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:33: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:39: error: cannot find symbol
        rightNode = new MathNode() {
                        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:42: error: cannot find symbol
            public MathNode setValue(String val) {
                   ^
  symbol: class MathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:47: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:52: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:93: error: cannot find symbol
        MathNode left = new MathNode() {
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:93: error: cannot find symbol
        MathNode left = new MathNode() {
                            ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:94: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:100: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:106: error: cannot find symbol
        MathNode right = new MathNode() {
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:106: error: cannot find symbol
        MathNode right = new MathNode() {
                             ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:107: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:113: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:135: error: cannot find symbol
        MathNode left = new MathNode() {
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:135: error: cannot find symbol
        MathNode left = new MathNode() {
                            ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:136: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:141: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:147: error: cannot find symbol
        MathNode right = new MathNode() {
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:147: error: cannot find symbol
        MathNode right = new MathNode() {
                             ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:148: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:153: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:173: error: cannot find symbol
        MathNode left = new MathNode() {
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:173: error: cannot find symbol
        MathNode left = new MathNode() {
                            ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:174: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:179: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:185: error: cannot find symbol
        MathNode right = new MathNode() {
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:185: error: cannot find symbol
        MathNode right = new MathNode() {
                             ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:186: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:191: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:211: error: cannot find symbol
        MathNode left = new MathNode() {
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:211: error: cannot find symbol
        MathNode left = new MathNode() {
                            ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:212: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:217: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:223: error: cannot find symbol
        MathNode right = new MathNode() {
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:223: error: cannot find symbol
        MathNode right = new MathNode() {
                             ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:224: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:229: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:249: error: cannot find symbol
        MathNode left = new MathNode() {
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:249: error: cannot find symbol
        MathNode left = new MathNode() {
                            ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:250: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:255: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:261: error: cannot find symbol
        MathNode right = new MathNode() {
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:261: error: cannot find symbol
        MathNode right = new MathNode() {
                             ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:262: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:267: error: method does not override or implement a method from a supertype
            @Override
            ^
51 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:18: error: <anonymous mathNode.SubCloneGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        leftMock = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:24: error: <anonymous mathNode.SubCloneGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        rightMock = new Expression() {
                                     ^
2 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:17: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:37: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:42: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:48: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:49: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:52: error: cannot find symbol
        TestableDiv(MathNode left, MathNode right, boolean parens) {
                    ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:52: error: cannot find symbol
        TestableDiv(MathNode left, MathNode right, boolean parens) {
                                   ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:59: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:64: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:26: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:31: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:36: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:41: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:76: error: cannot find symbol
        MathNode left = new MathNodeStub("5", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:77: error: cannot find symbol
        MathNode right = new MathNodeStub("3", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:85: error: cannot find symbol
        MathNode left = new MathNodeStub("5", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:86: error: cannot find symbol
        MathNode right = new MathNodeStub("3", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:94: error: cannot find symbol
        MathNode left = new MathNodeStub("(2 + 3)", true);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:95: error: cannot find symbol
        MathNode right = new MathNodeStub("x", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:103: error: cannot find symbol
        MathNode left = new MathNodeStub("(2 + 3)", true);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:104: error: cannot find symbol
        MathNode right = new MathNodeStub("x", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:113: error: cannot find symbol
        MathNode left = new MathNodeStub(leftStr, false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:114: error: cannot find symbol
        MathNode right = new MathNodeStub(rightStr, false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:136: error: cannot find symbol
        MathNode left = new MathNodeStub("", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:137: error: cannot find symbol
        MathNode right = new MathNodeStub("", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:145: error: cannot find symbol
        MathNode left = new MathNodeStub("", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:146: error: cannot find symbol
        MathNode right = new MathNodeStub("", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
28 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCloneGeneratedTest.java:14: error: Expression is abstract; cannot be instantiated
        expression = new Expression(); // Assuming default constructor exists
                     ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:17: error: <anonymous mathNode.OperatorGetRightNodeGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockExpression = new Expression() {};
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:18: error: Operator is abstract; cannot be instantiated
        operator = new Operator(null, null); // Assuming default constructor exists or can be adapted
                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:34: error: <anonymous mathNode.OperatorGetRightNodeGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        Expression newExpression = new Expression() {};
                                                    ^
3 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionToStringGeneratedTest.java:26: error: <anonymous mathNode.ExpressionToStringGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        Expression expression = new ExpressionStub() {};
                                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionToStringGeneratedTest.java:35: error: <anonymous mathNode.ExpressionToStringGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        Expression expression = new ExpressionStub() {};
                                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionToStringGeneratedTest.java:44: error: <anonymous mathNode.ExpressionToStringGeneratedTest$3> is not abstract and does not override abstract method checkTree() in Expression
        Expression expression = new ExpressionStub() {};
                                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionToStringGeneratedTest.java:45: error: incompatible types: Object cannot be converted to Expression
        Expression cloned = expression.clone();
                                            ^
4 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionIsParensGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionIsParensGeneratedTest.java:16: error: ExpressionStub is not abstract and does not override abstract method checkTree() in Expression
    static class ExpressionStub extends Expression {
           ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCheckTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCheckTreeGeneratedTest.java:15: error: constructor Int in class Int cannot be applied to given types;
        Int intNode = new Int();
                      ^
  required: int
  found:    no arguments
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCheckTreeGeneratedTest.java:28: error: constructor Int in class Int cannot be applied to given types;
        Int intNode = new Int();
                      ^
  required: int
  found:    no arguments
  reason: actual and formal argument lists differ in length
2 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:17: error: cannot find symbol
    static abstract class MathNodeStub implements MathNode {
                                                  ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:31: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:32: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:34: error: cannot find symbol
        SubStub(MathNode left, MathNode right) {
                ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:34: error: cannot find symbol
        SubStub(MathNode left, MathNode right) {
                               ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:40: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:45: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class SubStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:24: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:52: error: cannot find symbol
        MathNode left = new MathNodeStub(5) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:53: error: cannot find symbol
        MathNode right = new MathNodeStub(3) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:64: error: cannot find symbol
        MathNode left = new MathNodeStub(3) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:65: error: cannot find symbol
        MathNode right = new MathNodeStub(5) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:76: error: cannot find symbol
        MathNode left = new MathNodeStub(5) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:77: error: cannot find symbol
        MathNode right = new MathNodeStub(5) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:88: error: cannot find symbol
        MathNode left = new MathNodeStub(-3) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:89: error: cannot find symbol
        MathNode right = new MathNodeStub(-5) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:100: error: cannot find symbol
        MathNode left = new MathNodeStub(Integer.MAX_VALUE) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:101: error: cannot find symbol
        MathNode right = new MathNodeStub(1) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:112: error: cannot find symbol
        MathNode left = new MathNodeStub(Integer.MIN_VALUE) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:113: error: cannot find symbol
        MathNode right = new MathNodeStub(1) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:124: error: cannot find symbol
        MathNode left = new MathNodeStub(5) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:125: error: cannot find symbol
        MathNode right = new MathNodeStub(3.5) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:136: error: cannot find symbol
        MathNode left = new MathNodeStub(5.5) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:137: error: cannot find symbol
        MathNode right = new MathNodeStub(3) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:148: error: cannot find symbol
        MathNode left = new MathNodeStub(5.5) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:149: error: cannot find symbol
        MathNode right = new MathNodeStub(3.2) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:160: error: cannot find symbol
        MathNode left = new MathNodeStub(0) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:161: error: cannot find symbol
        MathNode right = new MathNodeStub(0) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:172: error: cannot find symbol
        MathNode left = new MathNodeStub(0.0) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:173: error: cannot find symbol
        MathNode right = new MathNodeStub(0.0) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:184: error: cannot find symbol
        MathNode left = new MathNodeStub(1e10) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:185: error: cannot find symbol
        MathNode right = new MathNodeStub(1e-10) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:197: error: cannot find symbol
        MathNode left = new MathNodeStub(pair.left) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:198: error: cannot find symbol
        MathNode right = new MathNodeStub(pair.right) {};
        ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
35 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCloneGeneratedTest.java:20: error: <anonymous mathNode.PowCloneGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        leftNode = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCloneGeneratedTest.java:23: error: <anonymous mathNode.PowCloneGeneratedTest$1$1> is not abstract and does not override abstract method checkTree() in Expression
                return new Expression() {
                                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCloneGeneratedTest.java:31: error: <anonymous mathNode.PowCloneGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        rightNode = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCloneGeneratedTest.java:34: error: <anonymous mathNode.PowCloneGeneratedTest$2$1> is not abstract and does not override abstract method checkTree() in Expression
                return new Expression() {
                                        ^
4 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:17: error: <anonymous mathNode.OperatorSetRightNodeGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockExpression = new Expression() {
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:18: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:26: error: <anonymous mathNode.OperatorSetRightNodeGeneratedTest$2> is not abstract and does not override abstract method calculate() in Expression
        operator = new Operator() {
                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:27: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:58: error: <anonymous mathNode.OperatorSetRightNodeGeneratedTest$3> is not abstract and does not override abstract method checkTree() in Expression
        Expression expr1 = new Expression() {
                                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:59: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:65: error: <anonymous mathNode.OperatorSetRightNodeGeneratedTest$4> is not abstract and does not override abstract method checkTree() in Expression
        Expression expr2 = new Expression() {
                                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:66: error: method does not override or implement a method from a supertype
            @Override
            ^
8 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCloneGeneratedTest.java:13: error: constructor Dec in class Dec cannot be applied to given types;
        Dec original = new Dec();
                       ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCloneGeneratedTest.java:21: error: constructor Dec in class Dec cannot be applied to given types;
        Dec original = new Dec();
                       ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCloneGeneratedTest.java:29: error: constructor Dec in class Dec cannot be applied to given types;
        Dec dec = new Dec();
                  ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
3 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:17: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class PowToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:37: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:42: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:26: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:31: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:36: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:41: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:72: error: cannot find symbol
        MathNode leftNode = new MathNodeStub(left, false);
        ^
  symbol:   class MathNode
  location: class PowToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:73: error: cannot find symbol
        MathNode rightNode = new MathNodeStub(right, false);
        ^
  symbol:   class MathNode
  location: class PowToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:78: error: cannot find symbol
            java.lang.reflect.Field parensField = MathNode.class.getDeclaredField("parens");
                                                  ^
  symbol:   class MathNode
  location: class PowToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:90: error: constructor Pow in class Pow cannot be applied to given types;
        Pow pow = new Pow(null, null);
                  ^
  required: no arguments
  found:    <null>,<null>
  reason: actual and formal argument lists differ in length
12 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:14: error: toString() in Node cannot override toString() in Object
        abstract String toString();
                        ^
  attempting to assign weaker access privileges; was public
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:37: error: constructor Pow in class Pow cannot be applied to given types;
            super(null, null); // dummy call to satisfy constructor if needed
            ^
  required: no arguments
  found:    <null>,<null>
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:43: error: getLeftNode() in PowStub cannot override getLeftNode() in Operator
        public Node getLeftNode() {
                    ^
  return type Node is not compatible with Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:48: error: getRightNode() in PowStub cannot override getRightNode() in Operator
        public Node getRightNode() {
                    ^
  return type Node is not compatible with Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:47: error: method does not override or implement a method from a supertype
        @Override
        ^
6 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:18: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockLeftNode = new Expression() {};
                                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:19: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        mockRightNode = new Expression() {};
                                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:20: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$3> is not abstract and does not override abstract method toString() in Expression
        operator = new Operator() {
                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:53: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$4> is not abstract and does not override abstract method toString() in Expression
        Operator emptyOperator = new Operator() {
                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:83: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$5> is not abstract and does not override abstract method checkTree() in Expression
        Expression newLeftNode = new Expression() {};
                                                  ^
5 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCheckTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCheckTreeGeneratedTest.java:12: error: constructor Dec in class Dec cannot be applied to given types;
        Dec dec = new Dec();
                  ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryCloneGeneratedTest.java:17: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown
        Factory cloned = (Factory) original.clone();
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryCloneGeneratedTest.java:50: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown
        Factory cloned = (Factory) original.clone();
                                                 ^
2 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java:13: error: ConcreteExpression is not abstract and does not override abstract method checkTree() in Expression
    static class ConcreteExpression extends Expression {
           ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:9: error: cannot find symbol
import mathTree.mathNode;
               ^
  symbol:   class mathNode
  location: package mathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:19: error: cannot find symbol
    private mathNode invokeBuildTree(LinkedList<String> tokens, boolean isParens) throws Exception {
            ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:23: error: cannot find symbol
        return (mathNode) method.invoke(tree, tokens, isParens);
                ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:29: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:37: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:40: error: cannot find symbol
        assertEquals(42, ((mathNode.Number)result).value);
                                   ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:47: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:49: error: cannot find symbol
        assertEquals(-10, ((mathNode.Number)result).value);
                                    ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:57: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:59: error: cannot find symbol
        assertEquals(Integer.parseInt(value), ((mathNode.Number)result).value);
                                                        ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:68: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:70: error: cannot find symbol
        assertTrue(result instanceof mathNode.Addition);
                                             ^
  symbol:   class Addition
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:71: error: cannot find symbol
        mathNode.Addition addNode = (mathNode.Addition) result;
                ^
  symbol:   class Addition
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:71: error: cannot find symbol
        mathNode.Addition addNode = (mathNode.Addition) result;
                                             ^
  symbol:   class Addition
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:72: error: cannot find symbol
        assertEquals(5, ((mathNode.Number)addNode.left).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:73: error: cannot find symbol
        assertEquals(3, ((mathNode.Number)addNode.right).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:82: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:84: error: cannot find symbol
        assertTrue(result instanceof mathNode.Subtraction);
                                             ^
  symbol:   class Subtraction
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:85: error: cannot find symbol
        mathNode.Subtraction subNode = (mathNode.Subtraction) result;
                ^
  symbol:   class Subtraction
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:85: error: cannot find symbol
        mathNode.Subtraction subNode = (mathNode.Subtraction) result;
                                                ^
  symbol:   class Subtraction
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:86: error: cannot find symbol
        assertEquals(10, ((mathNode.Number)subNode.left).value);
                                   ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:87: error: cannot find symbol
        assertEquals(4, ((mathNode.Number)subNode.right).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:96: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:98: error: cannot find symbol
        assertTrue(result instanceof mathNode.Multiplication);
                                             ^
  symbol:   class Multiplication
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:99: error: cannot find symbol
        mathNode.Multiplication mulNode = (mathNode.Multiplication) result;
                ^
  symbol:   class Multiplication
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:99: error: cannot find symbol
        mathNode.Multiplication mulNode = (mathNode.Multiplication) result;
                                                   ^
  symbol:   class Multiplication
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:100: error: cannot find symbol
        assertEquals(6, ((mathNode.Number)mulNode.left).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:101: error: cannot find symbol
        assertEquals(7, ((mathNode.Number)mulNode.right).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:110: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:112: error: cannot find symbol
        assertTrue(result instanceof mathNode.Division);
                                             ^
  symbol:   class Division
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:113: error: cannot find symbol
        mathNode.Division divNode = (mathNode.Division) result;
                ^
  symbol:   class Division
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:113: error: cannot find symbol
        mathNode.Division divNode = (mathNode.Division) result;
                                             ^
  symbol:   class Division
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:114: error: cannot find symbol
        assertEquals(20, ((mathNode.Number)divNode.left).value);
                                   ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:115: error: cannot find symbol
        assertEquals(5, ((mathNode.Number)divNode.right).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:124: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, true);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:126: error: cannot find symbol
        assertEquals(8, ((mathNode.Number)result).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:142: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, true);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:144: error: cannot find symbol
        assertTrue(result instanceof mathNode.Addition);
                                             ^
  symbol:   class Addition
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:145: error: cannot find symbol
        mathNode.Addition addNode = (mathNode.Addition) result;
                ^
  symbol:   class Addition
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:145: error: cannot find symbol
        mathNode.Addition addNode = (mathNode.Addition) result;
                                             ^
  symbol:   class Addition
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:146: error: cannot find symbol
        assertEquals(2, ((mathNode.Number)addNode.left).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:147: error: cannot find symbol
        assertTrue(addNode.right instanceof mathNode.Multiplication);
                                                    ^
  symbol:   class Multiplication
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:148: error: cannot find symbol
        mathNode.Multiplication mulNode = (mathNode.Multiplication) addNode.right;
                ^
  symbol:   class Multiplication
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:148: error: cannot find symbol
        mathNode.Multiplication mulNode = (mathNode.Multiplication) addNode.right;
                                                   ^
  symbol:   class Multiplication
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:149: error: cannot find symbol
        assertEquals(3, ((mathNode.Number)mulNode.left).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:150: error: cannot find symbol
        assertEquals(4, ((mathNode.Number)mulNode.right).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:162: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:164: error: cannot find symbol
        assertTrue(result instanceof mathNode.Addition);
                                             ^
  symbol:   class Addition
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:165: error: cannot find symbol
        mathNode.Addition addNode = (mathNode.Addition) result;
                ^
  symbol:   class Addition
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:165: error: cannot find symbol
        mathNode.Addition addNode = (mathNode.Addition) result;
                                             ^
  symbol:   class Addition
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:166: error: cannot find symbol
        assertEquals(2, ((mathNode.Number)addNode.left).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:167: error: cannot find symbol
        assertTrue(addNode.right instanceof mathNode.Multiplication);
                                                    ^
  symbol:   class Multiplication
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:168: error: cannot find symbol
        mathNode.Multiplication mulNode = (mathNode.Multiplication) addNode.right;
                ^
  symbol:   class Multiplication
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:168: error: cannot find symbol
        mathNode.Multiplication mulNode = (mathNode.Multiplication) addNode.right;
                                                   ^
  symbol:   class Multiplication
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:169: error: cannot find symbol
        assertEquals(3, ((mathNode.Number)mulNode.left).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:170: error: cannot find symbol
        assertEquals(4, ((mathNode.Number)mulNode.right).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:182: error: cannot find symbol
        mathNode result = invokeBuildTree(tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:184: error: cannot find symbol
        assertTrue(result instanceof mathNode.Subtraction);
                                             ^
  symbol:   class Subtraction
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:185: error: cannot find symbol
        mathNode.Subtraction subNode1 = (mathNode.Subtraction) result;
                ^
  symbol:   class Subtraction
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:185: error: cannot find symbol
        mathNode.Subtraction subNode1 = (mathNode.Subtraction) result;
                                                 ^
  symbol:   class Subtraction
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:186: error: cannot find symbol
        assertTrue(subNode1.left instanceof mathNode.Subtraction);
                                                    ^
  symbol:   class Subtraction
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:187: error: cannot find symbol
        mathNode.Subtraction subNode2 = (mathNode.Subtraction) subNode1.left;
                ^
  symbol:   class Subtraction
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:187: error: cannot find symbol
        mathNode.Subtraction subNode2 = (mathNode.Subtraction) subNode1.left;
                                                 ^
  symbol:   class Subtraction
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:188: error: cannot find symbol
        assertEquals(10, ((mathNode.Number)subNode2.left).value);
                                   ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:189: error: cannot find symbol
        assertEquals(5, ((mathNode.Number)subNode2.right).value);
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:190: error: cannot find symbol
        assertEquals(2, ((mathNode.Number)subNode1.right).value);
                                  ^
  symbol:   class Number
  location: package mathNode
66 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddDelimiterGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSaveTokenGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeToStringGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCleanStrListGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/CalcAppMainGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:28: error: rootNode has private access in MathTree
        original.rootNode = null; // Explicitly set to null
                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:36: error: rootNode has private access in MathTree
        assertNull(cloned.rootNode);
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:107: error: nodeFactory has private access in MathTree
        assertNotNull(cloned.nodeFactory);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:108: error: nodeFactory has private access in MathTree
        assertNotSame(original.nodeFactory, cloned.nodeFactory);
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:108: error: nodeFactory has private access in MathTree
        assertNotSame(original.nodeFactory, cloned.nodeFactory);
                                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:120: error: rootNode has private access in MathTree
        assertNotSame(original.rootNode, cloned.rootNode);
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:120: error: rootNode has private access in MathTree
        assertNotSame(original.rootNode, cloned.rootNode);
                                               ^
7 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:4: error: cannot find symbol
import mathTree.MathTree.mathNode;
                        ^
  symbol:   class mathNode
  location: class MathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:16: error: cannot find symbol
        mathNode newNode = new mathNode(5);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:16: error: cannot find symbol
        mathNode newNode = new mathNode(5);
                               ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:18: error: cannot find symbol
        mathNode result = tree.insertNode(null, newNode);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:27: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:27: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
                                ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:29: error: cannot find symbol
        mathNode result = tree.insertNode(rootNode, null);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:39: error: cannot find symbol
        mathNode result = tree.insertNode(null, null);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:39: error: insertNode(Expression,Expression) has private access in MathTree
        mathNode result = tree.insertNode(null, null);
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:49: error: cannot find symbol
        mathNode newNode = new mathNode(value);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:49: error: cannot find symbol
        mathNode newNode = new mathNode(value);
                               ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:51: error: cannot find symbol
        mathNode result = tree.insertNode(null, newNode);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:61: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:61: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
                                ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:62: error: cannot find symbol
        mathNode newNode = new mathNode(0);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:62: error: cannot find symbol
        mathNode newNode = new mathNode(0);
                               ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:64: error: cannot find symbol
        mathNode result = tree.insertNode(rootNode, newNode);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:75: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:75: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
                                ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:76: error: cannot find symbol
        mathNode newNode = new mathNode(-5);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:76: error: cannot find symbol
        mathNode newNode = new mathNode(-5);
                               ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:78: error: cannot find symbol
        mathNode result = tree.insertNode(rootNode, newNode);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:87: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:87: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
                                ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:88: error: cannot find symbol
        mathNode newNode = new mathNode(Integer.MAX_VALUE);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:88: error: cannot find symbol
        mathNode newNode = new mathNode(Integer.MAX_VALUE);
                               ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:90: error: cannot find symbol
        mathNode result = tree.insertNode(rootNode, newNode);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:99: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:99: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
                                ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:100: error: cannot find symbol
        mathNode newNode = new mathNode(Integer.MIN_VALUE);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:100: error: cannot find symbol
        mathNode newNode = new mathNode(Integer.MIN_VALUE);
                               ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:102: error: cannot find symbol
        mathNode result = tree.insertNode(rootNode, newNode);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
32 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:22: error: constructor StringScanner in class StringScanner cannot be applied to given types;
        scanner = new StringScanner("");
                  ^
  required: no arguments
  found:    String
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:36: error: isDelim(char) has private access in StringScanner
        boolean result = scanner.isDelim(ch);
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:49: error: isDelim(char) has private access in StringScanner
        boolean result = scanner.isDelim(ch);
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:64: error: isDelim(char) has private access in StringScanner
        boolean result = scanner.isDelim(ch);
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:79: error: isDelim(char) has private access in StringScanner
        boolean result = scanner.isDelim(ch);
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:92: error: isDelim(char) has private access in StringScanner
        boolean result = scanner.isDelim(ch);
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:106: error: isDelim(char) has private access in StringScanner
        boolean result = scanner.isDelim(ch);
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:119: error: isDelim(char) has private access in StringScanner
        assertThrows(NullPointerException.class, () -> scanner.isDelim('a'));
                                                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:130: error: isDelim(char) has private access in StringScanner
        boolean result = scanner.isDelim(ch);
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:145: error: isDelim(char) has private access in StringScanner
        boolean result = scanner.isDelim(ch);
                                ^
10 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerScanGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInitGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:22: error: no suitable method found for addDelimiter(String)
        scanner.addDelimiter(";");
               ^
    method StringScanner.addDelimiter(char) is not applicable
      (argument mismatch; String cannot be converted to char)
    method StringScanner.addDelimiter(char[]) is not applicable
      (argument mismatch; String cannot be converted to char[])
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:24: error: cannot find symbol
        scanner.tokenize("test;data@here");
               ^
  symbol:   method tokenize(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:34: error: cannot find symbol
        assertNotSame(scanner.getTokenList(), clone.getTokenList());
                             ^
  symbol:   method getTokenList()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:34: error: cannot find symbol
        assertNotSame(scanner.getTokenList(), clone.getTokenList());
                                                   ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:35: error: cannot find symbol
        assertNotSame(scanner.getDelimSet(), clone.getDelimSet());
                             ^
  symbol:   method getDelimSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:35: error: cannot find symbol
        assertNotSame(scanner.getDelimSet(), clone.getDelimSet());
                                                  ^
  symbol:   method getDelimSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:36: error: cannot find symbol
        assertNotSame(scanner.getSpecCharSet(), clone.getSpecCharSet());
                             ^
  symbol:   method getSpecCharSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:36: error: cannot find symbol
        assertNotSame(scanner.getSpecCharSet(), clone.getSpecCharSet());
                                                     ^
  symbol:   method getSpecCharSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:39: error: cannot find symbol
        assertEquals(scanner.getTokenList(), clone.getTokenList());
                            ^
  symbol:   method getTokenList()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:39: error: cannot find symbol
        assertEquals(scanner.getTokenList(), clone.getTokenList());
                                                  ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:40: error: cannot find symbol
        assertEquals(scanner.getDelimSet(), clone.getDelimSet());
                            ^
  symbol:   method getDelimSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:40: error: cannot find symbol
        assertEquals(scanner.getDelimSet(), clone.getDelimSet());
                                                 ^
  symbol:   method getDelimSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:41: error: cannot find symbol
        assertEquals(scanner.getSpecCharSet(), clone.getSpecCharSet());
                            ^
  symbol:   method getSpecCharSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:41: error: cannot find symbol
        assertEquals(scanner.getSpecCharSet(), clone.getSpecCharSet());
                                                    ^
  symbol:   method getSpecCharSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:51: error: cannot find symbol
        assertNotNull(clone.getTokenList());
                           ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:52: error: cannot find symbol
        assertNotNull(clone.getDelimSet());
                           ^
  symbol:   method getDelimSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:53: error: cannot find symbol
        assertNotNull(clone.getSpecCharSet());
                           ^
  symbol:   method getSpecCharSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:54: error: cannot find symbol
        assertTrue(clone.getTokenList().isEmpty());
                        ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:55: error: cannot find symbol
        assertTrue(clone.getDelimSet().isEmpty());
                        ^
  symbol:   method getDelimSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:56: error: cannot find symbol
        assertTrue(clone.getSpecCharSet().isEmpty());
                        ^
  symbol:   method getSpecCharSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:62: error: no suitable method found for addDelimiter(String)
        scanner.addDelimiter(";");
               ^
    method StringScanner.addDelimiter(char) is not applicable
      (argument mismatch; String cannot be converted to char)
    method StringScanner.addDelimiter(char[]) is not applicable
      (argument mismatch; String cannot be converted to char[])
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:64: error: cannot find symbol
        scanner.tokenize("test;data");
               ^
  symbol:   method tokenize(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:68: error: no suitable method found for addDelimiter(String)
        clone.addDelimiter(",");
             ^
    method StringScanner.addDelimiter(char) is not applicable
      (argument mismatch; String cannot be converted to char)
    method StringScanner.addDelimiter(char[]) is not applicable
      (argument mismatch; String cannot be converted to char[])
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:70: error: cannot find symbol
        ((LinkedList<String>)clone.getTokenList()).add("extra");
                                  ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:73: error: cannot find symbol
        assertFalse(scanner.getDelimSet().contains(","));
                           ^
  symbol:   method getDelimSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:74: error: cannot find symbol
        assertTrue(scanner.getDelimSet().contains(";"));
                          ^
  symbol:   method getDelimSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:75: error: cannot find symbol
        assertFalse(scanner.getSpecCharSet().contains('#'));
                           ^
  symbol:   method getSpecCharSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:76: error: cannot find symbol
        assertTrue(scanner.getSpecCharSet().contains('@'));
                          ^
  symbol:   method getSpecCharSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:77: error: cannot find symbol
        assertEquals(2, scanner.getTokenList().size()); // Original should still have 2 tokens
                               ^
  symbol:   method getTokenList()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:78: error: cannot find symbol
        assertEquals(3, clone.getTokenList().size());  // Clone should now have 3 tokens
                             ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:84: error: no suitable method found for addDelimiter(String)
        scanner.addDelimiter(";");
               ^
    method StringScanner.addDelimiter(char) is not applicable
      (argument mismatch; String cannot be converted to char)
    method StringScanner.addDelimiter(char[]) is not applicable
      (argument mismatch; String cannot be converted to char[])
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:85: error: no suitable method found for addDelimiter(String)
        scanner.addDelimiter(",");
               ^
    method StringScanner.addDelimiter(char) is not applicable
      (argument mismatch; String cannot be converted to char)
    method StringScanner.addDelimiter(char[]) is not applicable
      (argument mismatch; String cannot be converted to char[])
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:86: error: no suitable method found for addDelimiter(String)
        scanner.addDelimiter("|");
               ^
    method StringScanner.addDelimiter(char) is not applicable
      (argument mismatch; String cannot be converted to char)
    method StringScanner.addDelimiter(char[]) is not applicable
      (argument mismatch; String cannot be converted to char[])
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:90: error: cannot find symbol
        scanner.tokenize("a;b,c|d@e#f$g");
               ^
  symbol:   method tokenize(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:96: error: cannot find symbol
        assertEquals(scanner.getDelimSet(), clone.getDelimSet());
                            ^
  symbol:   method getDelimSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:96: error: cannot find symbol
        assertEquals(scanner.getDelimSet(), clone.getDelimSet());
                                                 ^
  symbol:   method getDelimSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:97: error: cannot find symbol
        assertEquals(scanner.getSpecCharSet(), clone.getSpecCharSet());
                            ^
  symbol:   method getSpecCharSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:97: error: cannot find symbol
        assertEquals(scanner.getSpecCharSet(), clone.getSpecCharSet());
                                                    ^
  symbol:   method getSpecCharSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:98: error: cannot find symbol
        assertEquals(scanner.getTokenList(), clone.getTokenList());
                            ^
  symbol:   method getTokenList()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:98: error: cannot find symbol
        assertEquals(scanner.getTokenList(), clone.getTokenList());
                                                  ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
40 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeSolveGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddSpecialCharGeneratedTest.java
Note: /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddSpecialCharGeneratedTest.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:20: error: skipWhitespace has private access in StringScanner
        assertFalse(scanner.skipWhitespace, "skipWhitespace should be false by default");
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:26: error: skipWhitespace has private access in StringScanner
        assertTrue(scanner.skipWhitespace, "skipWhitespace should be true after calling skipWhitespace()");
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:32: error: skipWhitespace has private access in StringScanner
        assertFalse(scanner.skipWhitespace, "skipWhitespace should be false by default");
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:36: error: skipWhitespace has private access in StringScanner
        assertTrue(scanner.skipWhitespace, "skipWhitespace should be true after first call");
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:40: error: skipWhitespace has private access in StringScanner
        assertTrue(scanner.skipWhitespace, "skipWhitespace should remain true after second call");
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:50: error: skipWhitespace has private access in StringScanner
        assertFalse(scanner.skipWhitespace, "skipWhitespace should be false by default even with delimiters");
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:52: error: skipWhitespace has private access in StringScanner
        assertTrue(scanner.skipWhitespace, "skipWhitespace should be true after calling skipWhitespace() even with delimiters");
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:58: error: delimSet has private access in StringScanner
        assertFalse(scanner.delimSet.contains('a'), "Delimiter 'a' should not be present initially");
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:64: error: delimSet has private access in StringScanner
        assertTrue(scanner.delimSet.contains('a'), "Delimiter 'a' should be present after adding");
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:65: error: delimSet has private access in StringScanner
        assertEquals(1, scanner.delimSet.size(), "Only one delimiter should be present");
                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:74: error: delimSet has private access in StringScanner
            assertFalse(scanner.delimSet.contains(c), "Delimiter '" + c + "' should not be present initially");
                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:84: error: delimSet has private access in StringScanner
            assertTrue(scanner.delimSet.contains(c), "Delimiter '" + c + "' should be present after adding");
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:86: error: delimSet has private access in StringScanner
        assertEquals(delimiters.length, scanner.delimSet.size(), "All delimiters should be present");
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:95: error: delimSet has private access in StringScanner
            assertFalse(scanner.delimSet.contains(c), "Delimiter '" + c + "' should not be present initially");
                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:103: error: delimSet has private access in StringScanner
            assertTrue(scanner.delimSet.contains(c), "Delimiter '" + c + "' should be present after adding array");
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:105: error: delimSet has private access in StringScanner
        assertEquals(delimiters.length, scanner.delimSet.size(), "All delimiters from array should be present");
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:115: error: delimSet has private access in StringScanner
        assertEquals(1, scanner.delimSet.size(), "Should only contain one instance of duplicate delimiter");
                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:116: error: delimSet has private access in StringScanner
        assertTrue(scanner.delimSet.contains('x'), "Delimiter 'x' should be present");
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:125: error: delimSet has private access in StringScanner
        assertEquals(0, scanner.delimSet.size(), "No delimiters should be added from empty array");
                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:137: error: delimSet has private access in StringScanner
            assertTrue(scanner.delimSet.contains(c), "Special character '" + c + "' should be present");
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:139: error: delimSet has private access in StringScanner
        assertEquals(specialChars.length, scanner.delimSet.size(), "All special characters should be present");
                                                 ^
21 errors

$ java -javaagent:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/jacocoagent.jar=destfile=/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/jacoco.exec,append=false,includes=* -jar /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test --scan-classpath --reports-dir /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/reports

Thanks for using JUnit! Support its development at https://junit.org/sponsoring

[36m╷[0m
[36m├─[0m [36mJUnit Jupiter[0m [32m✔[0m
[36m│  ├─[0m [36mIntToStringGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_zeroWithParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_zeroNoParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_negativeWithParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_positiveWithParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_negativeNoParens()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_edgeValuesNoParens(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] -2147483648[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 2147483647[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 1[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[5] -1[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_edgeValuesWithParens(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] -2147483648[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 2147483647[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 1[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[5] -1[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_toString_positiveNoParens()[0m [32m✔[0m
[36m│  ├─[0m [36mCalcAppMainGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_main_withNoArgs_promptsForInput()[0m [31m✘[0m [31mexpected: <true> but was: <false>[0m
[36m│  │  ├─[0m [34mtest_main_withVeryLargeDouble()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_main_withZeroInExpression()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_main_withVerySmallDouble()[0m [31m✘[0m [31mexpected: <true> but was: <false>[0m
[36m│  │  ├─[0m [34mtest_main_withNegativeNumbers()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_main_withValidExpressionAsArg_returnsResult()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_main_withMaxIntValues()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_main_withEmptyOrWhitespaceInput(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[1] [0m [31m✘[0m [31mUnexpected exception thrown: java.util.NoSuchElementException: No line found[0m
[36m│  │  │  ├─[0m [31m[2]  [0m [31m✘[0m [31mUnexpected exception thrown: java.util.NoSuchElementException: No line found[0m
[36m│  │  │  ├─[0m [31m[3]  [0m [31m✘[0m [31mUnexpected exception thrown: java.util.NoSuchElementException: No line found[0m
[36m│  │  │  └─[0m [31m[4]  [0m [31m✘[0m [31mUnexpected exception thrown: java.util.NoSuchElementException: No line found[0m
[36m│  │  └─[0m [34mtest_main_withMinIntValues()[0m [32m✔[0m
[36m│  ├─[0m [36mStringScannerAddSpecialCharGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addSpecialChar_withWhitespaceCharacters_addsAllWhitespaces()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addSpecialChar_withNullArray_throwsException()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_addSpecialChar_withCommonOperatorsAndBrackets_addsToSpecCharSet(char)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] +[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] *[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] /[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] ([0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] )[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[7] [[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[8] ][0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[9] {[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[10] }[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addSpecialChar_withEmptyArray_doesNotAddAnyCharacter()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addSpecialChar_withDuplicateCharacters_addsOnlyUniqueCharacters()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addSpecialChar_withMaxMinValues_addsExtremeCharacters()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_addSpecialChar_withUnicodeCharacters_addsUnicodeChars()[0m [32m✔[0m
[36m│  ├─[0m [36mIntCalculateGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_zeroWithParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_negativeWithParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_withSmallNegativeInteger()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_calculate_returnsCorrectIntegerValue(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] -2147483648[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[5] 2147483647[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_withoutParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_maxIntegerWithoutParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_minIntegerWithParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_withLargePositiveInteger()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_toString_withParens()[0m [32m✔[0m
[36m│  ├─[0m [36mMathTreeInitGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_init_complexNestedExpression_returnsTrue()[0m [31m✘[0m [31mComplex nested expression should initialize ==> expected: <true> but was: <false>[0m
[36m│  │  ├─[0m [34mtest_init_withZeroAndNegativeValues_returnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_negativeResultExpression_returnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_withLargeNumbers_returnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_decimalNumbers_returnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_withVerySmallDecimals_returnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_init_invalidExpressions_returnsFalse(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2]    [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] ()[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] (1 + )[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] ( + 2)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] 1 + + 2[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[7] 1 ++ 2[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[8] * 3[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[9] 3 *[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[10] 1 2 3[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[11] (1 + 2[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[12] 1 + 2)[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[13] x + y[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_multipleOperators_returnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_init_validExpressions_returnsTrue(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 3 + 4[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[2] ((1 + 2) * 3)[0m [31m✘[0m [31mValid expression should initialize successfully: ((1 + 2) * 3) ==> expected: <true> but was: <false>[0m
[36m│  │  │  ├─[0m [34m[3] 10 - 5 / 2[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 0 * 5[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] -3 + 7[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[6] 1.5 + 2.5[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_singleNumber_returnsTrue()[0m [32m✔[0m
[36m│  │  └─[0m [31mtest_init_deeplyNestedParentheses_returnsTrue()[0m [31m✘[0m [31mDeeply nested parentheses should initialize ==> expected: <true> but was: <false>[0m
[36m│  ├─[0m [36mDecCalculateGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_returnsStoredValue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_withInfinity()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_withNaN()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_withoutParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_withNaNAndParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_withParens()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_calculate_edgeValues(double)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 4.9E-324[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] 1.7976931348623157E308[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] -1.7976931348623157E308[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[7] Infinity[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[8] -Infinity[0m [32m✔[0m
[36m│  │  └─[0m [36mtest_toString_parensFlagBehavior(double)[0m [32m✔[0m
[36m│  │     ├─[0m [34m[1] 0.0[0m [32m✔[0m
[36m│  │     ├─[0m [34m[2] -0.0[0m [32m✔[0m
[36m│  │     ├─[0m [34m[3] -1.5[0m [32m✔[0m
[36m│  │     ├─[0m [34m[4] 1.5[0m [32m✔[0m
[36m│  │     ├─[0m [34m[5] 4.9E-324[0m [32m✔[0m
[36m│  │     └─[0m [34m[6] 1.7976931348623157E308[0m [32m✔[0m
[36m│  ├─[0m [36mStringScannerSaveTokenGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_saveToken_withEmptyOrWhitespace_doesNotAddToTokenList(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] [0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[2]  [0m [31m✘[0m [31mexpected: <true> but was: <false>[0m
[36m│  │  │  ├─[0m [31m[3]  [0m [31m✘[0m [31mexpected: <true> but was: <false>[0m
[36m│  │  │  └─[0m [31m[4]  [0m [31m✘[0m [31mexpected: <true> but was: <false>[0m
[36m│  │  ├─[0m [34mtest_saveToken_multipleCalls_accumulatesTokens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_saveToken_withUnicodeCharacters_storesCorrectly()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_saveToken_withVeryLongString_storesCorrectly()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_saveToken_withNonEmptyString_addsToTokenList()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_saveToken_withSpecialCharacters_storesCorrectly()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_saveToken_withNull_throwsNullPointerException()[0m [32m✔[0m
[36m│  ├─[0m [36mStringScannerAddDelimiterGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_withNullArray()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_addsNumericCharacters()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_addDelimiter_addsCommonDelimiters(char)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1]  [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2]  [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3]  [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] ,[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] ;[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] .[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[7] ![0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[8] ?[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[9] "[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[10] '[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_addsUnicodeCharacters()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_addsSpecialCharacters()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_addsSingleCharacter()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_withEmptyArray()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_addsMultipleCharacters()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_addDelimiter_duplicateCharacters()[0m [32m✔[0m
[36m│  ├─[0m [36mDecToStringGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_zeroValue_withParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_positiveValue_withParens()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_variousValues_noParens(double)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 4.9E-324[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 1.7976931348623157E308[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 1.0E-10[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 1.0E10[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] 1.0[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[6] -1.0[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_positiveValue_noParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_negativeValue_noParens()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_variousValues_withParens(double)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 4.9E-324[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 1.7976931348623157E308[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 1.0E-10[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 1.0E10[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] 1.0[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[6] -1.0[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_negativeValue_withParens()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_toString_zeroValue_noParens()[0m [32m✔[0m
[36m│  ├─[0m [36mStringScannerScanGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_scan_specialCharactersInTokens_handlesCorrectly()[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_scan_mixedTokensAndDelimiters_returnsCorrectTokens()[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  ├─[0m [36mtest_scan_onlyDelimiters_returnsEmptyTokens(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1]  [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2]  [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3]  [0m [32m✔[0m
[36m│  │  │  └─[0m [34m[4]       [0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_scan_parameterized_delimiterHandling(String, int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] , 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[2]  , 0[0m [31m✘[0m [31mexpected: <0> but was: <1>[0m
[36m│  │  │  ├─[0m [34m[3] a, 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[4] a b, 2[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  │  └─[0m [31m[5]   a  b  c  , 3[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_scan_multipleSingleCharacterTokensSeparatedByDelimiter_returnsMultipleToken...[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  ├─[0m [34mtest_scan_consecutiveDelimiters_returnsTokensWithPossibleEmpties()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_scan_numericTokens_returnsAsStrings()[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  ├─[0m [34mtest_scan_leadingAndTrailingDelimiters_returnsTokensWithoutExtras()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_scan_emptyString_returnsEmptyList()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_scan_multiCharacterTokenNoDelimiters_returnsSingleToken()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_scan_longString_performanceReasonable()[0m [31m✘[0m [31mexpected: <1000> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_scan_mixedAlphanumeric_tokensParsedCorrectly()[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  ├─[0m [34mtest_scan_unicodeCharacters_handlesGracefully()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_scan_singleCharacterToken_returnsSingleToken()[0m [32m✔[0m
[36m│  ├─[0m [36mMathTreeSolveGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_verySmallPositiveNumber()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_resultTypeDouble()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_solve_integerResults(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] -2147483648[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[5] 2147483647[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_nullRootNode()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_solve_validResults(double)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] -1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 4.9E-324[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] 1.7976931348623157E308[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] 1.0E-10[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[7] 1.0E10[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_veryLargeNegativeNumber()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_veryLargePositiveNumber()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_solve_resultTypeInteger()[0m [32m✔[0m
[36m│  ├─[0m [36mMathTreeCleanStrListGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_numbersOnly()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_cleanStrList_mixedOperatorsAndNegatives()[0m [31m✘[0m [31mexpected: <7> but was: <5>[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_consecutiveOperators()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_cleanStrList_edgeCases(LinkedList, LinkedList)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] [0], [0][0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[2] [-0], [-, 0][0m [31m✘[0m [31mexpected: <[-, 0]> but was: <[-0]>[0m
[36m│  │  │  ├─[0m [31m[3] [-999999999], [-, 999999999][0m [31m✘[0m [31mexpected: <[-, 999999999]> but was: <[-999999999]>[0m
[36m│  │  │  ├─[0m [31m[4] [-2147483648], [-, 2147483648][0m [31m✘[0m [31mexpected: <[-, 2147483648]> but was: <[-2147483648]>[0m
[36m│  │  │  ├─[0m [34m[5] [-, 5, -, 3], [-, 5, -, 3][0m [32m✔[0m
[36m│  │  │  └─[0m [34m[6] [-, *, 5], [-, *, 5][0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_negativeFollowedByOperator()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_cleanStrList_negativeAtStart()[0m [31m✘[0m [31mexpected: <5> but was: <4>[0m
[36m│  │  ├─[0m [31mtest_cleanStrList_singleNegativeNumber()[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  └─[0m [34mtest_cleanStrList_emptyList()[0m [32m✔[0m
[36m│  └─[0m [36mMathTreeToStringGeneratedTest[0m [32m✔[0m
[36m│     └─[0m [34mtest_toString_nullRootNode()[0m [32m✔[0m
[36m├─[0m [36mJUnit Vintage[0m [32m✔[0m
[36m└─[0m [36mJUnit Platform Suite[0m [32m✔[0m

Failures (27):
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withNoArgs_promptsForInput()
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withNoArgs_promptsForInput', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
       mathTree.CalcAppMainGeneratedTest.test_main_withNoArgs_promptsForInput(CalcAppMainGeneratedTest.java:39)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withVerySmallDouble()
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withVerySmallDouble', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
       mathTree.CalcAppMainGeneratedTest.test_main_withVerySmallDouble(CalcAppMainGeneratedTest.java:154)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withEmptyOrWhitespaceInput(String):[1] 
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withEmptyOrWhitespaceInput', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: Unexpected exception thrown: java.util.NoSuchElementException: No line found
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
       org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
       [...]
     Caused by: java.util.NoSuchElementException: No line found
       java.base/java.util.Scanner.nextLine(Scanner.java:1660)
       mathTree.CalcApp.main(CalcApp.java:25)
       mathTree.CalcAppMainGeneratedTest.lambda$test_main_withEmptyOrWhitespaceInput$1(CalcAppMainGeneratedTest.java:58)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
       [...]
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withEmptyOrWhitespaceInput(String):[2]  
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withEmptyOrWhitespaceInput', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: Unexpected exception thrown: java.util.NoSuchElementException: No line found
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
       org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
       [...]
     Caused by: java.util.NoSuchElementException: No line found
       java.base/java.util.Scanner.nextLine(Scanner.java:1660)
       mathTree.CalcApp.main(CalcApp.java:25)
       mathTree.CalcAppMainGeneratedTest.lambda$test_main_withEmptyOrWhitespaceInput$1(CalcAppMainGeneratedTest.java:58)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
       [...]
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withEmptyOrWhitespaceInput(String):[3] 	
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withEmptyOrWhitespaceInput', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: Unexpected exception thrown: java.util.NoSuchElementException: No line found
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
       org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
       [...]
     Caused by: java.util.NoSuchElementException: No line found
       java.base/java.util.Scanner.nextLine(Scanner.java:1660)
       mathTree.CalcApp.main(CalcApp.java:25)
       mathTree.CalcAppMainGeneratedTest.lambda$test_main_withEmptyOrWhitespaceInput$1(CalcAppMainGeneratedTest.java:58)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
       [...]
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withEmptyOrWhitespaceInput(String):[4] 

    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withEmptyOrWhitespaceInput', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: Unexpected exception thrown: java.util.NoSuchElementException: No line found
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:84)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:53)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:36)
       org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3168)
       [...]
     Caused by: java.util.NoSuchElementException: No line found
       java.base/java.util.Scanner.nextLine(Scanner.java:1660)
       mathTree.CalcApp.main(CalcApp.java:25)
       mathTree.CalcAppMainGeneratedTest.lambda$test_main_withEmptyOrWhitespaceInput$1(CalcAppMainGeneratedTest.java:58)
       org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:49)
       [...]
  JUnit Jupiter:MathTreeInitGeneratedTest:test_init_complexNestedExpression_returnsTrue()
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_init_complexNestedExpression_returnsTrue', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: Complex nested expression should initialize ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_init_complexNestedExpression_returnsTrue(MathTreeInitGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeInitGeneratedTest:test_init_validExpressions_returnsTrue(String):[2] ((1 + 2) * 3)
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_init_validExpressions_returnsTrue', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: Valid expression should initialize successfully: ((1 + 2) * 3) ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_init_validExpressions_returnsTrue(MathTreeInitGeneratedTest.java:24)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:MathTreeInitGeneratedTest:test_init_deeplyNestedParentheses_returnsTrue()
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_init_deeplyNestedParentheses_returnsTrue', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: Deeply nested parentheses should initialize ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_init_deeplyNestedParentheses_returnsTrue(MathTreeInitGeneratedTest.java:111)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerSaveTokenGeneratedTest:test_saveToken_withEmptyOrWhitespace_doesNotAddToTokenList(String):[2]  
    MethodSource [className = 'mathTree.StringScannerSaveTokenGeneratedTest', methodName = 'test_saveToken_withEmptyOrWhitespace_doesNotAddToTokenList', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
       mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withEmptyOrWhitespace_doesNotAddToTokenList(StringScannerSaveTokenGeneratedTest.java:49)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerSaveTokenGeneratedTest:test_saveToken_withEmptyOrWhitespace_doesNotAddToTokenList(String):[3] 	
    MethodSource [className = 'mathTree.StringScannerSaveTokenGeneratedTest', methodName = 'test_saveToken_withEmptyOrWhitespace_doesNotAddToTokenList', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
       mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withEmptyOrWhitespace_doesNotAddToTokenList(StringScannerSaveTokenGeneratedTest.java:49)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerSaveTokenGeneratedTest:test_saveToken_withEmptyOrWhitespace_doesNotAddToTokenList(String):[4] 

    MethodSource [className = 'mathTree.StringScannerSaveTokenGeneratedTest', methodName = 'test_saveToken_withEmptyOrWhitespace_doesNotAddToTokenList', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
       mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withEmptyOrWhitespace_doesNotAddToTokenList(StringScannerSaveTokenGeneratedTest.java:49)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_specialCharactersInTokens_handlesCorrectly()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_specialCharactersInTokens_handlesCorrectly', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_specialCharactersInTokens_handlesCorrectly(StringScannerScanGeneratedTest.java:86)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_mixedTokensAndDelimiters_returnsCorrectTokens()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_mixedTokensAndDelimiters_returnsCorrectTokens', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_mixedTokensAndDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:61)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_parameterized_delimiterHandling(String, int):[2]  , 0
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_parameterized_delimiterHandling', methodParameterTypes = 'java.lang.String, int']
    => org.opentest4j.AssertionFailedError: expected: <0> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_parameterized_delimiterHandling(StringScannerScanGeneratedTest.java:139)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_parameterized_delimiterHandling(String, int):[4] a b, 2
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_parameterized_delimiterHandling', methodParameterTypes = 'java.lang.String, int']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_parameterized_delimiterHandling(StringScannerScanGeneratedTest.java:139)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_parameterized_delimiterHandling(String, int):[5]   a  b  c  , 3
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_parameterized_delimiterHandling', methodParameterTypes = 'java.lang.String, int']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_parameterized_delimiterHandling(StringScannerScanGeneratedTest.java:139)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_multipleSingleCharacterTokensSeparatedByDelimiter_returnsMultipleTokens()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_multipleSingleCharacterTokensSeparatedByDelimiter_returnsMultipleTokens', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_multipleSingleCharacterTokensSeparatedByDelimiter_returnsMultipleTokens(StringScannerScanGeneratedTest.java:43)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_numericTokens_returnsAsStrings()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_numericTokens_returnsAsStrings', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_numericTokens_returnsAsStrings(StringScannerScanGeneratedTest.java:93)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_longString_performanceReasonable()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_longString_performanceReasonable', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <1000> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_longString_performanceReasonable(StringScannerScanGeneratedTest.java:125)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_mixedAlphanumeric_tokensParsedCorrectly()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_mixedAlphanumeric_tokensParsedCorrectly', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_mixedAlphanumeric_tokensParsedCorrectly(StringScannerScanGeneratedTest.java:103)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_mixedOperatorsAndNegatives()
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_mixedOperatorsAndNegatives', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <7> but was: <5>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_mixedOperatorsAndNegatives(MathTreeCleanStrListGeneratedTest.java:107)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_edgeCases(LinkedList, LinkedList):[2] [-0], [-, 0]
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_edgeCases', methodParameterTypes = 'java.util.LinkedList, java.util.LinkedList']
    => org.opentest4j.AssertionFailedError: expected: <[-, 0]> but was: <[-0]>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_edgeCases(MathTreeCleanStrListGeneratedTest.java:64)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_edgeCases(LinkedList, LinkedList):[3] [-999999999], [-, 999999999]
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_edgeCases', methodParameterTypes = 'java.util.LinkedList, java.util.LinkedList']
    => org.opentest4j.AssertionFailedError: expected: <[-, 999999999]> but was: <[-999999999]>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_edgeCases(MathTreeCleanStrListGeneratedTest.java:64)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_edgeCases(LinkedList, LinkedList):[4] [-2147483648], [-, 2147483648]
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_edgeCases', methodParameterTypes = 'java.util.LinkedList, java.util.LinkedList']
    => org.opentest4j.AssertionFailedError: expected: <[-, 2147483648]> but was: <[-2147483648]>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1145)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_edgeCases(MathTreeCleanStrListGeneratedTest.java:64)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_negativeAtStart()
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_negativeAtStart', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <5> but was: <4>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_negativeAtStart(MathTreeCleanStrListGeneratedTest.java:53)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_singleNegativeNumber()
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_singleNegativeNumber', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_singleNegativeNumber(MathTreeCleanStrListGeneratedTest.java:43)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

Test run finished after 222 ms
[        34 containers found      ]
[         0 containers skipped    ]
[        34 containers started    ]
[         0 containers aborted    ]
[        34 containers successful ]
[         0 containers failed     ]
[       204 tests found           ]
[         0 tests skipped         ]
[       204 tests started         ]
[         0 tests aborted         ]
[       177 tests successful      ]
[        27 tests failed          ]


WARNING: Delegated to the 'execute' command.
         This behaviour has been deprecated and will be removed in a future release.
         Please use the 'execute' command directly.

$ java -jar /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/jacococli.jar report /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/jacoco.exec --classfiles /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main --sourcefiles /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src --xml /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/jacoco.xml --html /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/jacoco-html
[INFO] Loading execution data file /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/jacoco.exec.
[INFO] Analyzing 13 classes.

