<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="JUnit Jupiter" tests="306" skipped="0" failures="34" errors="13" time="0.123" hostname="shiqixuans-MacBook-Air.local" timestamp="2025-10-03T11:38:24">
<properties>
<property name="apple.awt.application.name" value="ConsoleLauncher"/>
<property name="file.encoding" value="UTF-8"/>
<property name="file.separator" value="/"/>
<property name="ftp.nonProxyHosts" value="127.0.0.1|192.168.0.0/16|*.192.168.0.0/16|10.0.0.0/8|*.10.0.0.0/8|172.16.0.0/12|*.172.16.0.0/12|172.29.0.0/16|*.172.29.0.0/16|localhost|*.localhost|local|*.local|crashlytics.com|*.crashlytics.com|&lt;local&gt;|*.&lt;local&gt;"/>
<property name="http.nonProxyHosts" value="127.0.0.1|192.168.0.0/16|*.192.168.0.0/16|10.0.0.0/8|*.10.0.0.0/8|172.16.0.0/12|*.172.16.0.0/12|172.29.0.0/16|*.172.29.0.0/16|localhost|*.localhost|local|*.local|crashlytics.com|*.crashlytics.com|&lt;local&gt;|*.&lt;local&gt;"/>
<property name="java.class.path" value="/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar"/>
<property name="java.class.version" value="65.0"/>
<property name="java.home" value="/opt/homebrew/Cellar/openjdk@21/21.0.7/libexec/openjdk.jdk/Contents/Home"/>
<property name="java.io.tmpdir" value="/var/folders/55/1ll2s_c15nz1vbqv9ypcngnm0000gn/T/"/>
<property name="java.library.path" value="/Users/shiqixuan/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
<property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
<property name="java.runtime.version" value="21.0.7"/>
<property name="java.specification.name" value="Java Platform API Specification"/>
<property name="java.specification.vendor" value="Oracle Corporation"/>
<property name="java.specification.version" value="21"/>
<property name="java.vendor" value="Homebrew"/>
<property name="java.vendor.url" value="https://github.com/Homebrew/homebrew-core/issues"/>
<property name="java.vendor.url.bug" value="https://github.com/Homebrew/homebrew-core/issues"/>
<property name="java.vendor.version" value="Homebrew"/>
<property name="java.version" value="21.0.7"/>
<property name="java.version.date" value="2025-04-15"/>
<property name="java.vm.compressedOopsMode" value="Zero based"/>
<property name="java.vm.info" value="mixed mode, sharing"/>
<property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
<property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
<property name="java.vm.specification.vendor" value="Oracle Corporation"/>
<property name="java.vm.specification.version" value="21"/>
<property name="java.vm.vendor" value="Homebrew"/>
<property name="java.vm.version" value="21.0.7"/>
<property name="jdk.debug" value="release"/>
<property name="line.separator" value="
"/>
<property name="native.encoding" value="UTF-8"/>
<property name="os.arch" value="aarch64"/>
<property name="os.name" value="Mac OS X"/>
<property name="os.version" value="15.6"/>
<property name="path.separator" value=":"/>
<property name="socksNonProxyHosts" value="127.0.0.1|192.168.0.0/16|*.192.168.0.0/16|10.0.0.0/8|*.10.0.0.0/8|172.16.0.0/12|*.172.16.0.0/12|172.29.0.0/16|*.172.29.0.0/16|localhost|*.localhost|local|*.local|crashlytics.com|*.crashlytics.com|&lt;local&gt;|*.&lt;local&gt;"/>
<property name="stderr.encoding" value="UTF-8"/>
<property name="stdout.encoding" value="UTF-8"/>
<property name="sun.arch.data.model" value="64"/>
<property name="sun.boot.library.path" value="/opt/homebrew/Cellar/openjdk@21/21.0.7/libexec/openjdk.jdk/Contents/Home/lib"/>
<property name="sun.cpu.endian" value="little"/>
<property name="sun.io.unicode.encoding" value="UnicodeBig"/>
<property name="sun.java.command" value="/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test --scan-classpath --reports-dir /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/reports"/>
<property name="sun.java.launcher" value="SUN_STANDARD"/>
<property name="sun.jnu.encoding" value="UTF-8"/>
<property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
<property name="user.country" value="CN"/>
<property name="user.dir" value="/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser"/>
<property name="user.home" value="/Users/shiqixuan"/>
<property name="user.language" value="en"/>
<property name="user.name" value="shiqixuan"/>
<property name="user.timezone" value="Asia/Shanghai"/>
</properties>
<testcase name="test_clone_withNullRightNode()" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[method:test_clone_withNullRightNode()]
display-name: test_clone_withNullRightNode()
]]></system-out>
</testcase>
<testcase name="test_toString_smallestPositiveNormal()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_smallestPositiveNormal()]
display-name: test_toString_smallestPositiveNormal()
]]></system-out>
</testcase>
<testcase name="test_main_withValidArgument_returnsResult()" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withValidArgument_returnsResult(CalcAppMainGeneratedTest.java:69)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[method:test_main_withValidArgument_returnsResult()]
display-name: test_main_withValidArgument_returnsResult()
]]></system-out>
</testcase>
<testcase name="test_calculate_positiveOne()" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[method:test_calculate_positiveOne()]
display-name: test_calculate_positiveOne()
]]></system-out>
</testcase>
<testcase name="test_scan_variousWhitespaceChars_handledAsDelimiters()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousWhitespaceChars_handledAsDelimiters(StringScannerScanGeneratedTest.java:131)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_variousWhitespaceChars_handledAsDelimiters()]
display-name: test_scan_variousWhitespaceChars_handledAsDelimiters()
]]></system-out>
</testcase>
<testcase name="test_scan_endsWithSpecialChar_handledCorrectly()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_endsWithSpecialChar_handledCorrectly(StringScannerScanGeneratedTest.java:111)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_endsWithSpecialChar_handledCorrectly()]
display-name: test_scan_endsWithSpecialChar_handledCorrectly()
]]></system-out>
</testcase>
<testcase name="test_calculate_base_less_than_neg_one_exponent_infinity()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_base_less_than_neg_one_exponent_infinity()]
display-name: test_calculate_base_less_than_neg_one_exponent_infinity()
]]></system-out>
</testcase>
<testcase name="test_getLeftNode_multipleCalls_returnSameReference()" classname="mathNode.OperatorGetLeftNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetLeftNodeGeneratedTest]/[method:test_getLeftNode_multipleCalls_returnSameReference()]
display-name: test_getLeftNode_multipleCalls_returnSameReference()
]]></system-out>
</testcase>
<testcase name="test_clone_isIdempotent()" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[method:test_clone_isIdempotent()]
display-name: test_clone_isIdempotent()
]]></system-out>
</testcase>
<testcase name="test_solve_returnsZero_whenRootNodeReturnsZero()" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[method:test_solve_returnsZero_whenRootNodeReturnsZero()]
display-name: test_solve_returnsZero_whenRootNodeReturnsZero()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_ParenthesesWithValidContent_ReturnsValidNodeWithParensSet()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_ParenthesesWithValidContent_ReturnsValidNodeWithParensSet()]
display-name: test_BuildTree_ParenthesesWithValidContent_ReturnsValidNodeWithParensSet()
]]></system-out>
</testcase>
<testcase name="test_clone_withMinIntValue()" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[method:test_clone_withMinIntValue()]
display-name: test_clone_withMinIntValue()
]]></system-out>
</testcase>
<testcase name="test_main_withNullArgument_doesNotCrash()" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withNullArgument_doesNotCrash(CalcAppMainGeneratedTest.java:94)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[method:test_main_withNullArgument_doesNotCrash()]
display-name: test_main_withNullArgument_doesNotCrash()
]]></system-out>
</testcase>
<testcase name="test_toString_NegativeValueNoParens()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_NegativeValueNoParens()]
display-name: test_toString_NegativeValueNoParens()
]]></system-out>
</testcase>
<testcase name="test_Init_NullInput_ThrowsException()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_NullInput_ThrowsException()]
display-name: test_Init_NullInput_ThrowsException()
]]></system-out>
</testcase>
<testcase name="test_setParens_transitionFromFalseToTrue_setsPrecedenceToZero()" classname="mathNode.OperatorSetParensGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorSetParensGeneratedTest]/[method:test_setParens_transitionFromFalseToTrue_setsPrecedenceToZero()]
display-name: test_setParens_transitionFromFalseToTrue_setsPrecedenceToZero()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_ExpressionStartingWithOperator_ReturnsNull()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<failure message="expected: &lt;null&gt; but was: &lt;mathTree.MathTreeBuildTreeGeneratedTest$mathNode$Expression@2ea6e30c&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <null> but was: <mathTree.MathTreeBuildTreeGeneratedTest$mathNode$Expression@2ea6e30c>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNull.failNotNull(AssertNull.java:50)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:35)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNull(Assertions.java:279)
	at mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ExpressionStartingWithOperator_ReturnsNull(MathTreeBuildTreeGeneratedTest.java:267)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_ExpressionStartingWithOperator_ReturnsNull()]
display-name: test_BuildTree_ExpressionStartingWithOperator_ReturnsNull()
]]></system-out>
</testcase>
<testcase name="test_clone_returnsDifferentInstance()" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[method:test_clone_returnsDifferentInstance()]
display-name: test_clone_returnsDifferentInstance()
]]></system-out>
</testcase>
<testcase name="test_clone_modificationOnClone_doesNotAffectOriginal()" classname="mathNode.ExpressionCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionCloneGeneratedTest]/[method:test_clone_modificationOnClone_doesNotAffectOriginal()]
display-name: test_clone_modificationOnClone_doesNotAffectOriginal
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_MultipleCharacters()" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[method:test_AddSpecialChar_MultipleCharacters()]
display-name: test_AddSpecialChar_MultipleCharacters()
]]></system-out>
</testcase>
<testcase name="test_calculate_base_negative_one_exponent_infinity()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_base_negative_one_exponent_infinity()]
display-name: test_calculate_base_negative_one_exponent_infinity()
]]></system-out>
</testcase>
<testcase name="test_scan_withSpecialChar_splitsIntoSeparateTokens()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_withSpecialChar_splitsIntoSeparateTokens(StringScannerScanGeneratedTest.java:71)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_withSpecialChar_splitsIntoSeparateTokens()]
display-name: test_scan_withSpecialChar_splitsIntoSeparateTokens()
]]></system-out>
</testcase>
<testcase name="test_clone_whenBothNodesNotCloneable_throwsCloneNotSupportedException()" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[method:test_clone_whenBothNodesNotCloneable_throwsCloneNotSupportedException()]
display-name: test_clone_whenBothNodesNotCloneable_throwsCloneNotSupportedException()
]]></system-out>
</testcase>
<testcase name="test_clone_withFloatingPointValues()" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[method:test_clone_withFloatingPointValues()]
display-name: test_clone_withFloatingPointValues()
]]></system-out>
</testcase>
<testcase name="test_toString_PositiveValueNoParens()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_PositiveValueNoParens()]
display-name: test_toString_PositiveValueNoParens()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_ComplexExpression_ReturnsValidNode()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<failure message="expected: not &lt;null&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: not <null>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
	at mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ComplexExpression_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:244)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_ComplexExpression_ReturnsValidNode()]
display-name: test_BuildTree_ComplexExpression_ReturnsValidNode()
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedNoParens(int)[3]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedNoParens(int)]/[test-template-invocation:#3]
display-name: [3] 0
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedNoParens(int)[2]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedNoParens(int)]/[test-template-invocation:#2]
display-name: [2] -1
]]></system-out>
</testcase>
<testcase name="test_calculate_positive_base_negative_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_positive_base_negative_exponent()]
display-name: test_calculate_positive_base_negative_exponent()
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedNoParens(int)[1]" classname="mathNode.IntToStringGeneratedTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedNoParens(int)]/[test-template-invocation:#1]
display-name: [1] 1
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedNoParens(int)[7]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedNoParens(int)]/[test-template-invocation:#7]
display-name: [7] -2147483648
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedNoParens(int)[6]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedNoParens(int)]/[test-template-invocation:#6]
display-name: [6] 2147483647
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedNoParens(int)[5]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedNoParens(int)]/[test-template-invocation:#5]
display-name: [5] -100
]]></system-out>
</testcase>
<testcase name="test_clone_calledTwice_producesIndependentInstances()" classname="mathNode.ExpressionCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionCloneGeneratedTest]/[method:test_clone_calledTwice_producesIndependentInstances()]
display-name: test_clone_calledTwice_producesIndependentInstances
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedNoParens(int)[4]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedNoParens(int)]/[test-template-invocation:#4]
display-name: [4] 100
]]></system-out>
</testcase>
<testcase name="test_scan_singleCharacter_returnsSingleToken()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_singleCharacter_returnsSingleToken()]
display-name: test_scan_singleCharacter_returnsSingleToken()
]]></system-out>
</testcase>
<testcase name="test_toString_MaxIntWithParens()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_MaxIntWithParens()]
display-name: test_toString_MaxIntWithParens()
]]></system-out>
</testcase>
<testcase name="test_toString_NegativeValueWithParens()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_NegativeValueWithParens()]
display-name: test_toString_NegativeValueWithParens()
]]></system-out>
</testcase>
<testcase name="test_clone_throwsCloneNotSupportedException_whenObjectNotCloneable()" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[method:test_clone_throwsCloneNotSupportedException_whenObjectNotCloneable()]
display-name: test_clone_throwsCloneNotSupportedException_whenObjectNotCloneable()
]]></system-out>
</testcase>
<testcase name="test_calculate_negativeOne()" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[method:test_calculate_negativeOne()]
display-name: test_calculate_negativeOne()
]]></system-out>
</testcase>
<testcase name="test_calculate_maxInteger()" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[method:test_calculate_maxInteger()]
display-name: test_calculate_maxInteger()
]]></system-out>
</testcase>
<testcase name="test_clone_withNullLeftNode_throwsNullPointerExceptionDuringClone()" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[method:test_clone_withNullLeftNode_throwsNullPointerExceptionDuringClone()]
display-name: test_clone_withNullLeftNode_throwsNullPointerExceptionDuringClone()
]]></system-out>
</testcase>
<testcase name="test_Init_IntegerMinValue_ReturnsTrue()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_IntegerMinValue_ReturnsTrue()]
display-name: test_Init_IntegerMinValue_ReturnsTrue()
]]></system-out>
</testcase>
<testcase name="test_scan_mixedContent_correctTokenization()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;5&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_mixedContent_correctTokenization(StringScannerScanGeneratedTest.java:90)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_mixedContent_correctTokenization()]
display-name: test_scan_mixedContent_correctTokenization()
]]></system-out>
</testcase>
<testcase name="test_solve_returnsVerySmallPositiveDouble_whenRootNodeReturnsVerySmallDouble()" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[method:test_solve_returnsVerySmallPositiveDouble_whenRootNodeReturnsVerySmallDouble()]
display-name: test_solve_returnsVerySmallPositiveDouble_whenRootNodeReturnsVerySmallDouble()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_SingleNumber_ReturnsValidNode()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<failure message="expected: not &lt;null&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: not <null>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
	at mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_SingleNumber_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:161)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_SingleNumber_ReturnsValidNode()]
display-name: test_BuildTree_SingleNumber_ReturnsValidNode()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_ExpressionWithUnmatchedOpeningParenthesis_ReturnsNull()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_ExpressionWithUnmatchedOpeningParenthesis_ReturnsNull()]
display-name: test_BuildTree_ExpressionWithUnmatchedOpeningParenthesis_ReturnsNull()
]]></system-out>
</testcase>
<testcase name="test_toString_negativeInfinity()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_negativeInfinity()]
display-name: test_toString_negativeInfinity()
]]></system-out>
</testcase>
<testcase name="test_calculate_any_base_zero_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_any_base_zero_exponent()]
display-name: test_calculate_any_base_zero_exponent()
]]></system-out>
</testcase>
<testcase name="test_clone_withBothNodesNull()" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[method:test_clone_withBothNodesNull()]
display-name: test_clone_withBothNodesNull()
]]></system-out>
</testcase>
<testcase name="test_clone_returnsNonNullInstance()" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[method:test_clone_returnsNonNullInstance()]
display-name: test_clone_returnsNonNullInstance()
]]></system-out>
</testcase>
<testcase name="test_toString_negativeFraction()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_negativeFraction()]
display-name: test_toString_negativeFraction()
]]></system-out>
</testcase>
<testcase name="test_setRightNode_withNullExpression_setsNodeToNull()" classname="mathNode.OperatorSetRightNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorSetRightNodeGeneratedTest]/[method:test_setRightNode_withNullExpression_setsNodeToNull()]
display-name: test_setRightNode_withNullExpression_setsNodeToNull()
]]></system-out>
</testcase>
<testcase name="test_toString_withParens_returnsParenthesizedValue()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_withParens_returnsParenthesizedValue()]
display-name: test_toString_withParens_returnsParenthesizedValue()
]]></system-out>
</testcase>
<testcase name="test_Init_SingleNumber_ReturnsTrue()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_SingleNumber_ReturnsTrue()]
display-name: test_Init_SingleNumber_ReturnsTrue()
]]></system-out>
</testcase>
<testcase name="test_getLeftNode_whenLeftNodeIsNonNull_returnsSameInstance()" classname="mathNode.OperatorGetLeftNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetLeftNodeGeneratedTest]/[method:test_getLeftNode_whenLeftNodeIsNonNull_returnsSameInstance()]
display-name: test_getLeftNode_whenLeftNodeIsNonNull_returnsSameInstance()
]]></system-out>
</testcase>
<testcase name="test_toString_MinIntNoParens()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_MinIntNoParens()]
display-name: test_toString_MinIntNoParens()
]]></system-out>
</testcase>
<testcase name="test_Init_EmptyString_ReturnsFalse()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_EmptyString_ReturnsFalse()]
display-name: test_Init_EmptyString_ReturnsFalse()
]]></system-out>
</testcase>
<testcase name="test_Init_ComplexValidExpression_ReturnsTrue()" classname="mathTree.MathTreeInitGeneratedTest" time="0.001">
<failure message="复杂但有效的表达式应成功初始化 ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 复杂但有效的表达式应成功初始化 ==> expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
	at mathTree.MathTreeInitGeneratedTest.test_Init_ComplexValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:96)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_ComplexValidExpression_ReturnsTrue()]
display-name: test_Init_ComplexValidExpression_ReturnsTrue()
]]></system-out>
</testcase>
<testcase name="test_clone_withBothNodesNull_throwsNullPointerExceptionDuringClone()" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[method:test_clone_withBothNodesNull_throwsNullPointerExceptionDuringClone()]
display-name: test_clone_withBothNodesNull_throwsNullPointerExceptionDuringClone()
]]></system-out>
</testcase>
<testcase name="test_setParens_true_setsParenthesisToTrueAndPrecedenceToZero()" classname="mathNode.OperatorSetParensGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorSetParensGeneratedTest]/[method:test_setParens_true_setsParenthesisToTrueAndPrecedenceToZero()]
display-name: test_setParens_true_setsParenthesisToTrueAndPrecedenceToZero()
]]></system-out>
</testcase>
<testcase name="test_toString_withoutParens_returnsRawValue()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_withoutParens_returnsRawValue()]
display-name: test_toString_withoutParens_returnsRawValue()
]]></system-out>
</testcase>
<testcase name="test_checkTree_validChildrenButRightInvalidGrandchild_returnsFalse()" classname="mathNode.OperatorCheckTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorCheckTreeGeneratedTest]/[method:test_checkTree_validChildrenButRightInvalidGrandchild_returnsFalse()]
display-name: test_checkTree_validChildrenButRightInvalidGrandchild_returnsFalse()
]]></system-out>
</testcase>
<testcase name="test_Init_WhitespaceOnly_ReturnsFalse()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_WhitespaceOnly_ReturnsFalse()]
display-name: test_Init_WhitespaceOnly_ReturnsFalse()
]]></system-out>
</testcase>
<testcase name="test_Init_DivisionByZeroInStructure_ReturnsTrueButEvaluationMayFail()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_DivisionByZeroInStructure_ReturnsTrueButEvaluationMayFail()]
display-name: test_Init_DivisionByZeroInStructure_ReturnsTrueButEvaluationMayFail()
]]></system-out>
</testcase>
<testcase name="test_calculate_zero_base_zero_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_zero_base_zero_exponent()]
display-name: test_calculate_zero_base_zero_exponent()
]]></system-out>
</testcase>
<testcase name="test_clone_returnsCorrectType()" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[method:test_clone_returnsCorrectType()]
display-name: test_clone_returnsCorrectType()
]]></system-out>
</testcase>
<testcase name="test_setParens_true_multipleTimes_isIdempotent()" classname="mathNode.OperatorSetParensGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorSetParensGeneratedTest]/[method:test_setParens_true_multipleTimes_isIdempotent()]
display-name: test_setParens_true_multipleTimes_isIdempotent()
]]></system-out>
</testcase>
<testcase name="test_getRightNode_whenRightNodeIsNonNull_returnsSameInstance()" classname="mathNode.OperatorGetRightNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetRightNodeGeneratedTest]/[method:test_getRightNode_whenRightNodeIsNonNull_returnsSameInstance()]
display-name: test_getRightNode_whenRightNodeIsNonNull_returnsSameInstance()
]]></system-out>
</testcase>
<testcase name="test_main_withInvalidExpression_initFails_noOutput()" classname="mathTree.CalcAppMainGeneratedTest" time="0.002">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withInvalidExpression_initFails_noOutput(CalcAppMainGeneratedTest.java:101)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[method:test_main_withInvalidExpression_initFails_noOutput()]
display-name: test_main_withInvalidExpression_initFails_noOutput()
]]></system-out>
</testcase>
<testcase name="test_Init_RepeatedInitOnSameInstance_DoesNotInterfere()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_RepeatedInitOnSameInstance_DoesNotInterfere()]
display-name: test_Init_RepeatedInitOnSameInstance_DoesNotInterfere()
]]></system-out>
</testcase>
<testcase name="test_toString_MaxIntNoParens()" classname="mathNode.IntToStringGeneratedTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_MaxIntNoParens()]
display-name: test_toString_MaxIntNoParens()
]]></system-out>
</testcase>
<testcase name="test_clone_withNegativeValue()" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[method:test_clone_withNegativeValue()]
display-name: test_clone_withNegativeValue()
]]></system-out>
</testcase>
<testcase name="test_main_withBoundaryNumericsAsArgs_succeeds(String)[5]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withBoundaryNumericsAsArgs_succeeds(CalcAppMainGeneratedTest.java:116)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withBoundaryNumericsAsArgs_succeeds(java.lang.String)]/[test-template-invocation:#5]
display-name: [5] (-5)
]]></system-out>
</testcase>
<testcase name="test_main_withBoundaryNumericsAsArgs_succeeds(String)[3]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withBoundaryNumericsAsArgs_succeeds(CalcAppMainGeneratedTest.java:116)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withBoundaryNumericsAsArgs_succeeds(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] 1.5
]]></system-out>
</testcase>
<testcase name="test_checkTree_leftChildNull_returnsFalse()" classname="mathNode.OperatorCheckTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorCheckTreeGeneratedTest]/[method:test_checkTree_leftChildNull_returnsFalse()]
display-name: test_checkTree_leftChildNull_returnsFalse()
]]></system-out>
</testcase>
<testcase name="test_main_withBoundaryNumericsAsArgs_succeeds(String)[4]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withBoundaryNumericsAsArgs_succeeds(CalcAppMainGeneratedTest.java:116)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withBoundaryNumericsAsArgs_succeeds(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] 1e10
]]></system-out>
</testcase>
<testcase name="test_clone_idempotent_property()" classname="mathNode.FactoryCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryCloneGeneratedTest]/[method:test_clone_idempotent_property()]
display-name: test_clone_idempotent_property
]]></system-out>
</testcase>
<testcase name="test_calculate_normalValues(int)[1]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_calculate_normalValues(int)]/[test-template-invocation:#1]
display-name: [1] 0
]]></system-out>
</testcase>
<testcase name="test_calculate_normalValues(int)[2]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_calculate_normalValues(int)]/[test-template-invocation:#2]
display-name: [2] 1
]]></system-out>
</testcase>
<testcase name="test_scan_multipleCharactersNoDelim_returnsOneToken()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_multipleCharactersNoDelim_returnsOneToken()]
display-name: test_scan_multipleCharactersNoDelim_returnsOneToken()
]]></system-out>
</testcase>
<testcase name="test_calculate_normalValues(int)[3]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_calculate_normalValues(int)]/[test-template-invocation:#3]
display-name: [3] -1
]]></system-out>
</testcase>
<testcase name="test_calculate_normalValues(int)[4]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_calculate_normalValues(int)]/[test-template-invocation:#4]
display-name: [4] 42
]]></system-out>
</testcase>
<testcase name="test_calculate_normalValues(int)[5]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_calculate_normalValues(int)]/[test-template-invocation:#5]
display-name: [5] 2147483647
]]></system-out>
</testcase>
<testcase name="test_BuildTree_EmptyList_ReturnsNull_WhenNotInParens()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_EmptyList_ReturnsNull_WhenNotInParens()]
display-name: test_BuildTree_EmptyList_ReturnsNull_WhenNotInParens()
]]></system-out>
</testcase>
<testcase name="test_scan_veryLongString_handledWithoutError()" classname="mathTree.StringScannerScanGeneratedTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_veryLongString_handledWithoutError()]
display-name: test_scan_veryLongString_handledWithoutError()
]]></system-out>
</testcase>
<testcase name="test_solve_propagatesException_whenRootNodeThrows()" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[method:test_solve_propagatesException_whenRootNodeThrows()]
display-name: test_solve_propagatesException_whenRootNodeThrows()
]]></system-out>
</testcase>
<testcase name="test_clone_withZeroValue_clonesSuccessfully()" classname="mathNode.ExpressionCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionCloneGeneratedTest]/[method:test_clone_withZeroValue_clonesSuccessfully()]
display-name: test_clone_withZeroValue_clonesSuccessfully
]]></system-out>
</testcase>
<testcase name="test_BuildTree_UnmatchedClosingParenthesis_ReturnsNull()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_UnmatchedClosingParenthesis_ReturnsNull()]
display-name: test_BuildTree_UnmatchedClosingParenthesis_ReturnsNull()
]]></system-out>
</testcase>
<testcase name="test_calculate_minInteger()" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[method:test_calculate_minInteger()]
display-name: test_calculate_minInteger()
]]></system-out>
</testcase>
<testcase name="test_toString_verySmallNumber()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_verySmallNumber()]
display-name: test_toString_verySmallNumber()
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_EmptyArray()" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[method:test_AddSpecialChar_EmptyArray()]
display-name: test_AddSpecialChar_EmptyArray()
]]></system-out>
</testcase>
<testcase name="test_toString_infinity()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_infinity()]
display-name: test_toString_infinity()
]]></system-out>
</testcase>
<testcase name="test_clone_preservesLeftNodeValue()" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[method:test_clone_preservesLeftNodeValue()]
display-name: test_clone_preservesLeftNodeValue()
]]></system-out>
</testcase>
<testcase name="test_toString_integerLikeDecimal()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_integerLikeDecimal()]
display-name: test_toString_integerLikeDecimal()
]]></system-out>
</testcase>
<testcase name="test_scan_onlyDelimiters_returnsEmptyTokens()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
	at mathTree.StringScannerScanGeneratedTest.test_scan_onlyDelimiters_returnsEmptyTokens(StringScannerScanGeneratedTest.java:36)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_onlyDelimiters_returnsEmptyTokens()]
display-name: test_scan_onlyDelimiters_returnsEmptyTokens()
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_SpecialAsciiValues(char)[2]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_SpecialAsciiValues(char)]/[test-template-invocation:#2]
display-name: [2] 
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_SpecialAsciiValues(char)[3]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_SpecialAsciiValues(char)]/[test-template-invocation:#3]
display-name: [3] ÿ
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_complexExpressionWithNegativesAndParentheses()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;8&gt; but was: &lt;7&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <8> but was: <7>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_complexExpressionWithNegativesAndParentheses(MathTreeCleanStrListGeneratedTest.java:171)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_complexExpressionWithNegativesAndParentheses()]
display-name: test_cleanStrList_complexExpressionWithNegativesAndParentheses()
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_SpecialAsciiValues(char)[1]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_SpecialAsciiValues(char)]/[test-template-invocation:#1]
display-name: [1] &#0;
]]></system-out>
</testcase>
<testcase name="test_toString_zeroValues(double)[1]" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[test-template:test_toString_zeroValues(double)]/[test-template-invocation:#1]
display-name: [1] 0.0
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_DuplicateCharacters()" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[method:test_AddSpecialChar_DuplicateCharacters()]
display-name: test_AddSpecialChar_DuplicateCharacters()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_EmptyParentheses_ReturnsNull()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_EmptyParentheses_ReturnsNull()]
display-name: test_BuildTree_EmptyParentheses_ReturnsNull()
]]></system-out>
</testcase>
<testcase name="test_calculate_normalValues(int)[6]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_calculate_normalValues(int)]/[test-template-invocation:#6]
display-name: [6] -2147483648
]]></system-out>
</testcase>
<testcase name="test_BuildTree_NormalExpression_ReturnsValidNode()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<failure message="expected: not &lt;null&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: not <null>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
	at mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_NormalExpression_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:126)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_NormalExpression_ReturnsValidNode()]
display-name: test_BuildTree_NormalExpression_ReturnsValidNode()
]]></system-out>
</testcase>
<testcase name="test_scan_emptyString_returnsEmptyList()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_emptyString_returnsEmptyList()]
display-name: test_scan_emptyString_returnsEmptyList()
]]></system-out>
</testcase>
<testcase name="test_solve_handlesSpecialFloatingPointValues(double)[1]" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[test-template:test_solve_handlesSpecialFloatingPointValues(double)]/[test-template-invocation:#1]
display-name: [1] NaN
]]></system-out>
</testcase>
<testcase name="test_clone_preservesRightNodeValue()" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[method:test_clone_preservesRightNodeValue()]
display-name: test_clone_preservesRightNodeValue()
]]></system-out>
</testcase>
<testcase name="test_solve_handlesSpecialFloatingPointValues(double)[3]" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[test-template:test_solve_handlesSpecialFloatingPointValues(double)]/[test-template-invocation:#3]
display-name: [3] -Infinity
]]></system-out>
</testcase>
<testcase name="test_scan_numericString_treatedAsSingleToken()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_numericString_treatedAsSingleToken()]
display-name: test_scan_numericString_treatedAsSingleToken()
]]></system-out>
</testcase>
<testcase name="test_solve_handlesSpecialFloatingPointValues(double)[2]" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[test-template:test_solve_handlesSpecialFloatingPointValues(double)]/[test-template-invocation:#2]
display-name: [2] Infinity
]]></system-out>
</testcase>
<testcase name="test_calculate_zero()" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[method:test_calculate_zero()]
display-name: test_calculate_zero()
]]></system-out>
</testcase>
<testcase name="test_solve_returnsMaxInteger_whenRootNodeReturnsMaxInteger()" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[method:test_solve_returnsMaxInteger_whenRootNodeReturnsMaxInteger()]
display-name: test_solve_returnsMaxInteger_whenRootNodeReturnsMaxInteger()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_doubleNegativeInMiddle()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_doubleNegativeInMiddle()]
display-name: test_cleanStrList_doubleNegativeInMiddle()
]]></system-out>
</testcase>
<testcase name="test_clone_modifyingCloneDoesNotAffectOriginal()" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[method:test_clone_modifyingCloneDoesNotAffectOriginal()]
display-name: test_clone_modifyingCloneDoesNotAffectOriginal()
]]></system-out>
</testcase>
<testcase name="test_clone_withEmptyCollections_createsIndependentEmptyCopies()" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[method:test_clone_withEmptyCollections_createsIndependentEmptyCopies()]
display-name: test_clone_withEmptyCollections_createsIndependentEmptyCopies()
]]></system-out>
</testcase>
<testcase name="test_solve_returnsMinInteger_whenRootNodeReturnsMinInteger()" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[method:test_solve_returnsMinInteger_whenRootNodeReturnsMinInteger()]
display-name: test_solve_returnsMinInteger_whenRootNodeReturnsMinInteger()
]]></system-out>
</testcase>
<testcase name="test_toString_zeroValues(double)[2]" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[test-template:test_toString_zeroValues(double)]/[test-template-invocation:#2]
display-name: [2] -0.0
]]></system-out>
</testcase>
<testcase name="test_toString_nan()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_nan()]
display-name: test_toString_nan()
]]></system-out>
</testcase>
<testcase name="test_calculate_large_base_small_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_large_base_small_exponent()]
display-name: test_calculate_large_base_small_exponent()
]]></system-out>
</testcase>
<testcase name="test_getPrecedence_zeroValue()" classname="mathNode.OperatorGetPrecedenceGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetPrecedenceGeneratedTest]/[method:test_getPrecedence_zeroValue()]
display-name: test_getPrecedence_zeroValue()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_ExpressionWithOnlyParentheses_ReturnsNull()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_ExpressionWithOnlyParentheses_ReturnsNull()]
display-name: test_BuildTree_ExpressionWithOnlyParentheses_ReturnsNull()
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousDelimiterCounts(int)[2]" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[test-template:test_clone_withVariousDelimiterCounts(int)]/[test-template-invocation:#2]
display-name: [2] 1
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousDelimiterCounts(int)[1]" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[test-template:test_clone_withVariousDelimiterCounts(int)]/[test-template-invocation:#1]
display-name: [1] 0
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousDelimiterCounts(int)[4]" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[test-template:test_clone_withVariousDelimiterCounts(int)]/[test-template-invocation:#4]
display-name: [4] 50
]]></system-out>
</testcase>
<testcase name="test_setParens_false_multipleTimes_isIdempotent()" classname="mathNode.OperatorSetParensGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorSetParensGeneratedTest]/[method:test_setParens_false_multipleTimes_isIdempotent()]
display-name: test_setParens_false_multipleTimes_isIdempotent()
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousDelimiterCounts(int)[3]" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[test-template:test_clone_withVariousDelimiterCounts(int)]/[test-template-invocation:#3]
display-name: [3] 10
]]></system-out>
</testcase>
<testcase name="test_getLeftNode_whenLeftNodeHasSpecialStringValue_returnsCorrectInstance()" classname="mathNode.OperatorGetLeftNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetLeftNodeGeneratedTest]/[method:test_getLeftNode_whenLeftNodeHasSpecialStringValue_returnsCorrectInstance()]
display-name: test_getLeftNode_whenLeftNodeHasSpecialStringValue_returnsCorrectInstance()
]]></system-out>
</testcase>
<testcase name="test_toString_positiveOne()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_positiveOne()]
display-name: test_toString_positiveOne()
]]></system-out>
</testcase>
<testcase name="test_Init_IntegerMaxValue_ReturnsTrue()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_IntegerMaxValue_ReturnsTrue()]
display-name: test_Init_IntegerMaxValue_ReturnsTrue()
]]></system-out>
</testcase>
<testcase name="test_clone_withMaxIntValue_clonesSuccessfully()" classname="mathNode.ExpressionCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionCloneGeneratedTest]/[method:test_clone_withMaxIntValue_clonesSuccessfully()]
display-name: test_clone_withMaxIntValue_clonesSuccessfully
]]></system-out>
</testcase>
<testcase name="test_toString_ZeroValueNoParens()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_ZeroValueNoParens()]
display-name: test_toString_ZeroValueNoParens()
]]></system-out>
</testcase>
<testcase name="test_solve_returnsNegativeValue_whenRootNodeReturnsNegative()" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[method:test_solve_returnsNegativeValue_whenRootNodeReturnsNegative()]
display-name: test_solve_returnsNegativeValue_whenRootNodeReturnsNegative()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_implicitMultiplicationBeforeOpenParen()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_implicitMultiplicationBeforeOpenParen()]
display-name: test_cleanStrList_implicitMultiplicationBeforeOpenParen()
]]></system-out>
</testcase>
<testcase name="test_clone_createsNewInstance()" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[method:test_clone_createsNewInstance()]
display-name: test_clone_createsNewInstance()
]]></system-out>
</testcase>
<testcase name="test_scan_allSpecialChars_eachCharIsToken()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;4&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <4> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_allSpecialChars_eachCharIsToken(StringScannerScanGeneratedTest.java:160)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_allSpecialChars_eachCharIsToken()]
display-name: test_scan_allSpecialChars_eachCharIsToken()
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousTokenCounts(int)[3]" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[test-template:test_clone_withVariousTokenCounts(int)]/[test-template-invocation:#3]
display-name: [3] 10
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousTokenCounts(int)[4]" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[test-template:test_clone_withVariousTokenCounts(int)]/[test-template-invocation:#4]
display-name: [4] 100
]]></system-out>
</testcase>
<testcase name="test_scan_consecutiveSpecialChars_eachAsSeparateToken()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_consecutiveSpecialChars_eachAsSeparateToken(StringScannerScanGeneratedTest.java:81)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_consecutiveSpecialChars_eachAsSeparateToken()]
display-name: test_scan_consecutiveSpecialChars_eachAsSeparateToken()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_ValidOperator_ReturnsValidNode(String)[1]" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<failure message="expected: not &lt;null&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: not <null>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
	at mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ValidOperator_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:215)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[test-template:test_BuildTree_ValidOperator_ReturnsValidNode(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] +
]]></system-out>
</testcase>
<testcase name="test_BuildTree_ValidOperator_ReturnsValidNode(String)[2]" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<failure message="expected: not &lt;null&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: not <null>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
	at mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ValidOperator_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:215)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[test-template:test_BuildTree_ValidOperator_ReturnsValidNode(java.lang.String)]/[test-template-invocation:#2]
display-name: [2] -
]]></system-out>
</testcase>
<testcase name="test_calculate_negative_base_even_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_negative_base_even_exponent()]
display-name: test_calculate_negative_base_even_exponent()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_ValidOperator_ReturnsValidNode(String)[3]" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<failure message="expected: not &lt;null&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: not <null>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
	at mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ValidOperator_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:215)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[test-template:test_BuildTree_ValidOperator_ReturnsValidNode(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] *
]]></system-out>
</testcase>
<testcase name="test_main_withBoundaryNumericsAsArgs_succeeds(String)[1]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withBoundaryNumericsAsArgs_succeeds(CalcAppMainGeneratedTest.java:116)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withBoundaryNumericsAsArgs_succeeds(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] 0
]]></system-out>
</testcase>
<testcase name="test_BuildTree_ValidOperator_ReturnsValidNode(String)[4]" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<failure message="expected: not &lt;null&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: not <null>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
	at mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ValidOperator_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:215)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[test-template:test_BuildTree_ValidOperator_ReturnsValidNode(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] /
]]></system-out>
</testcase>
<testcase name="test_main_withBoundaryNumericsAsArgs_succeeds(String)[2]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withBoundaryNumericsAsArgs_succeeds(CalcAppMainGeneratedTest.java:116)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withBoundaryNumericsAsArgs_succeeds(java.lang.String)]/[test-template-invocation:#2]
display-name: [2] -1
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousTokenCounts(int)[1]" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[test-template:test_clone_withVariousTokenCounts(int)]/[test-template-invocation:#1]
display-name: [1] 0
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousTokenCounts(int)[2]" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[test-template:test_clone_withVariousTokenCounts(int)]/[test-template-invocation:#2]
display-name: [2] 1
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_noImplicitMultiplicationBeforeOpenParenAfterOperator()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_noImplicitMultiplicationBeforeOpenParenAfterOperator()]
display-name: test_cleanStrList_noImplicitMultiplicationBeforeOpenParenAfterOperator()
]]></system-out>
</testcase>
<testcase name="test_getPrecedence_boundaryAndExtremeValues(int)[2]" classname="mathNode.OperatorGetPrecedenceGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetPrecedenceGeneratedTest]/[test-template:test_getPrecedence_boundaryAndExtremeValues(int)]/[test-template-invocation:#2]
display-name: [2] 2147483647
]]></system-out>
</testcase>
<testcase name="test_Init_InvalidFunctionName_ReturnsFalse()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_InvalidFunctionName_ReturnsFalse()]
display-name: test_Init_InvalidFunctionName_ReturnsFalse()
]]></system-out>
</testcase>
<testcase name="test_getPrecedence_boundaryAndExtremeValues(int)[1]" classname="mathNode.OperatorGetPrecedenceGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetPrecedenceGeneratedTest]/[test-template:test_getPrecedence_boundaryAndExtremeValues(int)]/[test-template-invocation:#1]
display-name: [1] -2147483648
]]></system-out>
</testcase>
<testcase name="test_getPrecedence_boundaryAndExtremeValues(int)[4]" classname="mathNode.OperatorGetPrecedenceGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetPrecedenceGeneratedTest]/[test-template:test_getPrecedence_boundaryAndExtremeValues(int)]/[test-template-invocation:#4]
display-name: [4] -100
]]></system-out>
</testcase>
<testcase name="test_getPrecedence_boundaryAndExtremeValues(int)[3]" classname="mathNode.OperatorGetPrecedenceGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetPrecedenceGeneratedTest]/[test-template:test_getPrecedence_boundaryAndExtremeValues(int)]/[test-template-invocation:#3]
display-name: [3] 100
]]></system-out>
</testcase>
<testcase name="test_solve_returnsValue_whenRootNodeReturnsDouble()" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[method:test_solve_returnsValue_whenRootNodeReturnsDouble()]
display-name: test_solve_returnsValue_whenRootNodeReturnsDouble()
]]></system-out>
</testcase>
<testcase name="test_calculate_one_base_any_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_one_base_any_exponent()]
display-name: test_calculate_one_base_any_exponent()
]]></system-out>
</testcase>
<testcase name="test_calculate_negative_base_negative_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_negative_base_negative_exponent()]
display-name: test_calculate_negative_base_negative_exponent()
]]></system-out>
</testcase>
<testcase name="test_checkTree_allNodesValid_returnsTrue()" classname="mathNode.OperatorCheckTreeGeneratedTest" time="0">
<failure message="expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
	at mathNode.OperatorCheckTreeGeneratedTest.test_checkTree_allNodesValid_returnsTrue(OperatorCheckTreeGeneratedTest.java:108)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorCheckTreeGeneratedTest]/[method:test_checkTree_allNodesValid_returnsTrue()]
display-name: test_checkTree_allNodesValid_returnsTrue()
]]></system-out>
</testcase>
<testcase name="test_clone_withNegativeValue_clonesSuccessfully()" classname="mathNode.ExpressionCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionCloneGeneratedTest]/[method:test_clone_withNegativeValue_clonesSuccessfully()]
display-name: test_clone_withNegativeValue_clonesSuccessfully
]]></system-out>
</testcase>
<testcase name="test_getPrecedence_negativeValue()" classname="mathNode.OperatorGetPrecedenceGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetPrecedenceGeneratedTest]/[method:test_getPrecedence_negativeValue()]
display-name: test_getPrecedence_negativeValue()
]]></system-out>
</testcase>
<testcase name="test_clone_withNullLeftNode()" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[method:test_clone_withNullLeftNode()]
display-name: test_clone_withNullLeftNode()
]]></system-out>
</testcase>
<testcase name="test_calculate_negative_base_odd_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_negative_base_odd_exponent()]
display-name: test_calculate_negative_base_odd_exponent()
]]></system-out>
</testcase>
<testcase name="test_clone_normalCase_createsDeepCopy()" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[method:test_clone_normalCase_createsDeepCopy()]
display-name: test_clone_normalCase_createsDeepCopy()
]]></system-out>
</testcase>
<testcase name="test_clone_modifyingOriginalDoesNotAffectClone()" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[method:test_clone_modifyingOriginalDoesNotAffectClone()]
display-name: test_clone_modifyingOriginalDoesNotAffectClone()
]]></system-out>
</testcase>
<testcase name="test_clone_withMaxIntValue()" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[method:test_clone_withMaxIntValue()]
display-name: test_clone_withMaxIntValue()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_negativeInMiddle()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_negativeInMiddle()]
display-name: test_cleanStrList_negativeInMiddle()
]]></system-out>
</testcase>
<testcase name="test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(String)[3]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(CalcAppMainGeneratedTest.java:86)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] 	
]]></system-out>
</testcase>
<testcase name="test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(String)[2]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(CalcAppMainGeneratedTest.java:86)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(java.lang.String)]/[test-template-invocation:#2]
display-name: [2]  
]]></system-out>
</testcase>
<testcase name="test_toString_negativeOne()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_negativeOne()]
display-name: test_toString_negativeOne()
]]></system-out>
</testcase>
<testcase name="test_clone_whenSuperCloneThrowsException_propagatesException()" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[method:test_clone_whenSuperCloneThrowsException_propagatesException()]
display-name: test_clone_whenSuperCloneThrowsException_propagatesException()
]]></system-out>
</testcase>
<testcase name="test_clone_throws_exception_when_super_clone_fails()" classname="mathNode.FactoryCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryCloneGeneratedTest]/[method:test_clone_throws_exception_when_super_clone_fails()]
display-name: test_clone_throws_exception_when_super_clone_fails
]]></system-out>
</testcase>
<testcase name="test_toString_maxFiniteDouble()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_maxFiniteDouble()]
display-name: test_toString_maxFiniteDouble()
]]></system-out>
</testcase>
<testcase name="test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(String)[1]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(CalcAppMainGeneratedTest.java:86)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] 
]]></system-out>
</testcase>
<testcase name="test_getLeftNode_whenLeftNodeIsNull_returnsNull()" classname="mathNode.OperatorGetLeftNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetLeftNodeGeneratedTest]/[method:test_getLeftNode_whenLeftNodeIsNull_returnsNull()]
display-name: test_getLeftNode_whenLeftNodeIsNull_returnsNull()
]]></system-out>
</testcase>
<testcase name="test_clone_parameterized(int)[4]" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[test-template:test_clone_parameterized(int)]/[test-template-invocation:#4]
display-name: [4] -100
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_VariedCommonSpecialChars(char)[10]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_VariedCommonSpecialChars(char)]/[test-template-invocation:#10]
display-name: [10] *
]]></system-out>
</testcase>
<testcase name="test_clone_parameterized(int)[5]" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[test-template:test_clone_parameterized(int)]/[test-template-invocation:#5]
display-name: [5] 2147483647
]]></system-out>
</testcase>
<testcase name="test_main_withBlankArgumentFromConsole_readsUntilNonBlankAndReturnsResult()" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withBlankArgumentFromConsole_readsUntilNonBlankAndReturnsResult(CalcAppMainGeneratedTest.java:77)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[method:test_main_withBlankArgumentFromConsole_readsUntilNonBlankAndReturnsResult()]
display-name: test_main_withBlankArgumentFromConsole_readsUntilNonBlankAndReturnsResult()
]]></system-out>
</testcase>
<testcase name="test_calculate_zero_base_negative_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_zero_base_negative_exponent()]
display-name: test_calculate_zero_base_negative_exponent()
]]></system-out>
</testcase>
<testcase name="test_clone_parameterized(int)[2]" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[test-template:test_clone_parameterized(int)]/[test-template-invocation:#2]
display-name: [2] -1
]]></system-out>
</testcase>
<testcase name="test_clone_parameterized(int)[3]" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[test-template:test_clone_parameterized(int)]/[test-template-invocation:#3]
display-name: [3] 100
]]></system-out>
</testcase>
<testcase name="test_getRightNode_whenRightNodeIsNull_returnsNull()" classname="mathNode.OperatorGetRightNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetRightNodeGeneratedTest]/[method:test_getRightNode_whenRightNodeIsNull_returnsNull()]
display-name: test_getRightNode_whenRightNodeIsNull_returnsNull()
]]></system-out>
</testcase>
<testcase name="test_clone_parameterized(int)[6]" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[test-template:test_clone_parameterized(int)]/[test-template-invocation:#6]
display-name: [6] -2147483648
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_singleElementNoNegative()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_singleElementNoNegative()]
display-name: test_cleanStrList_singleElementNoNegative()
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedWithParens(int)[1]" classname="mathNode.IntToStringGeneratedTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedWithParens(int)]/[test-template-invocation:#1]
display-name: [1] 1
]]></system-out>
</testcase>
<testcase name="test_clone_withZeroValue()" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[method:test_clone_withZeroValue()]
display-name: test_clone_withZeroValue()
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedWithParens(int)[2]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedWithParens(int)]/[test-template-invocation:#2]
display-name: [2] -1
]]></system-out>
</testcase>
<testcase name="test_BuildTree_InvalidToken_ReturnsNull()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_InvalidToken_ReturnsNull()]
display-name: test_BuildTree_InvalidToken_ReturnsNull()
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedWithParens(int)[3]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedWithParens(int)]/[test-template-invocation:#3]
display-name: [3] 0
]]></system-out>
</testcase>
<testcase name="test_toString_veryLargeNumber()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_veryLargeNumber()]
display-name: test_toString_veryLargeNumber()
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedWithParens(int)[4]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedWithParens(int)]/[test-template-invocation:#4]
display-name: [4] 100
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedWithParens(int)[5]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedWithParens(int)]/[test-template-invocation:#5]
display-name: [5] -100
]]></system-out>
</testcase>
<testcase name="test_scan_returnsNewLinkedListInstance()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_returnsNewLinkedListInstance()]
display-name: test_scan_returnsNewLinkedListInstance()
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedWithParens(int)[6]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedWithParens(int)]/[test-template-invocation:#6]
display-name: [6] 2147483647
]]></system-out>
</testcase>
<testcase name="test_toString_ParameterizedWithParens(int)[7]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_ParameterizedWithParens(int)]/[test-template-invocation:#7]
display-name: [7] -2147483648
]]></system-out>
</testcase>
<testcase name="test_getPrecedence_positiveValue()" classname="mathNode.OperatorGetPrecedenceGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorGetPrecedenceGeneratedTest]/[method:test_getPrecedence_positiveValue()]
display-name: test_getPrecedence_positiveValue()
]]></system-out>
</testcase>
<testcase name="test_clone_parameterized(int)[1]" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[test-template:test_clone_parameterized(int)]/[test-template-invocation:#1]
display-name: [1] 1
]]></system-out>
</testcase>
<testcase name="test_Init_ExtremeFloatValues_ReturnsTrue()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<failure message="接近Float.MIN_VALUE的值应能处理 ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 接近Float.MIN_VALUE的值应能处理 ==> expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
	at mathTree.MathTreeInitGeneratedTest.test_Init_ExtremeFloatValues_ReturnsTrue(MathTreeInitGeneratedTest.java:128)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_ExtremeFloatValues_ReturnsTrue()]
display-name: test_Init_ExtremeFloatValues_ReturnsTrue()
]]></system-out>
</testcase>
<testcase name="test_calculate_small_base_large_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_small_base_large_exponent()]
display-name: test_calculate_small_base_large_exponent()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_ExpressionWithMultipleOperators_ReturnsValidNode()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<failure message="expected: not &lt;null&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: not <null>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
	at org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
	at mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ExpressionWithMultipleOperators_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:257)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_ExpressionWithMultipleOperators_ReturnsValidNode()]
display-name: test_BuildTree_ExpressionWithMultipleOperators_ReturnsValidNode()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_negativeAtStart()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_negativeAtStart()]
display-name: test_cleanStrList_negativeAtStart()
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_SingleCharacter()" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[method:test_AddSpecialChar_SingleCharacter()]
display-name: test_AddSpecialChar_SingleCharacter()
]]></system-out>
</testcase>
<testcase name="test_main_withNoArgsAndImmediateEOFOnStdin_throwsException()" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<error message="Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub" type="java.lang.IllegalArgumentException"><![CDATA[java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
	at java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
	at java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
	at java.base/java.lang.reflect.Field.set(Field.java:836)
	at mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
	at mathTree.CalcAppMainGeneratedTest.test_main_withNoArgsAndImmediateEOFOnStdin_throwsException(CalcAppMainGeneratedTest.java:108)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[method:test_main_withNoArgsAndImmediateEOFOnStdin_throwsException()]
display-name: test_main_withNoArgsAndImmediateEOFOnStdin_throwsException()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_noImplicitMultiplicationAfterCloseParenBeforeOperator()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_noImplicitMultiplicationAfterCloseParenBeforeOperator()]
display-name: test_cleanStrList_noImplicitMultiplicationAfterCloseParenBeforeOperator()
]]></system-out>
</testcase>
<testcase name="test_toString_ZeroWithParens()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_ZeroWithParens()]
display-name: test_toString_ZeroWithParens()
]]></system-out>
</testcase>
<testcase name="test_calculate_fractional_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_fractional_exponent()]
display-name: test_calculate_fractional_exponent()
]]></system-out>
</testcase>
<testcase name="test_calculate_positive_base_positive_integer_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_positive_base_positive_integer_exponent()]
display-name: test_calculate_positive_base_positive_integer_exponent()
]]></system-out>
</testcase>
<testcase name="test_Init_InvalidExpression_ReturnsFalse(String)[1]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_InvalidExpression_ReturnsFalse(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] 
]]></system-out>
</testcase>
<testcase name="test_Init_InvalidExpression_ReturnsFalse(String)[3]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_InvalidExpression_ReturnsFalse(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] ()
]]></system-out>
</testcase>
<testcase name="test_clone_withNullRightNode_throwsNullPointerExceptionDuringClone()" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[method:test_clone_withNullRightNode_throwsNullPointerExceptionDuringClone()]
display-name: test_clone_withNullRightNode_throwsNullPointerExceptionDuringClone()
]]></system-out>
</testcase>
<testcase name="test_Init_InvalidExpression_ReturnsFalse(String)[2]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_InvalidExpression_ReturnsFalse(java.lang.String)]/[test-template-invocation:#2]
display-name: [2]  
]]></system-out>
</testcase>
<testcase name="test_setRightNode_onNewOperator_rightNodeIsInitiallyNull()" classname="mathNode.OperatorSetRightNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorSetRightNodeGeneratedTest]/[method:test_setRightNode_onNewOperator_rightNodeIsInitiallyNull()]
display-name: test_setRightNode_onNewOperator_rightNodeIsInitiallyNull()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_negativeHandling(String, String[])[4]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_negativeHandling(java.lang.String, %5BLjava.lang.String;)]/[test-template-invocation:#4]
display-name: [4] 5-3, [5, -, 3]
]]></system-out>
</testcase>
<testcase name="test_clone_normal_success()" classname="mathNode.FactoryCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryCloneGeneratedTest]/[method:test_clone_normal_success()]
display-name: test_clone_normal_success
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_negativeHandling(String, String[])[3]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_negativeHandling(java.lang.String, %5BLjava.lang.String;)]/[test-template-invocation:#3]
display-name: [3] ---5, [-, -, -5]
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_negativeHandling(String, String[])[5]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_negativeHandling(java.lang.String, %5BLjava.lang.String;)]/[test-template-invocation:#5]
display-name: [5] 5--3, [5, -, -3]
]]></system-out>
</testcase>
<testcase name="test_solve_returnsVeryLargeDouble_whenRootNodeReturnsVeryLargeDouble()" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[method:test_solve_returnsVeryLargeDouble_whenRootNodeReturnsVeryLargeDouble()]
display-name: test_solve_returnsVeryLargeDouble_whenRootNodeReturnsVeryLargeDouble()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_negativeHandling(String, String[])[2]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_negativeHandling(java.lang.String, %5BLjava.lang.String;)]/[test-template-invocation:#2]
display-name: [2] --5, [-, -5]
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_negativeHandling(String, String[])[1]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_negativeHandling(java.lang.String, %5BLjava.lang.String;)]/[test-template-invocation:#1]
display-name: [1] -5, [-5]
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_doubleNegativeAtStart()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_doubleNegativeAtStart()]
display-name: test_cleanStrList_doubleNegativeAtStart()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_emptyList()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_emptyList()]
display-name: test_cleanStrList_emptyList()
]]></system-out>
</testcase>
<testcase name="test_clone_withMinIntValue_clonesSuccessfully()" classname="mathNode.ExpressionCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionCloneGeneratedTest]/[method:test_clone_withMinIntValue_clonesSuccessfully()]
display-name: test_clone_withMinIntValue_clonesSuccessfully
]]></system-out>
</testcase>
<testcase name="test_setRightNode_withNonNullExpression_setsNodeCorrectly()" classname="mathNode.OperatorSetRightNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorSetRightNodeGeneratedTest]/[method:test_setRightNode_withNonNullExpression_setsNodeCorrectly()]
display-name: test_setRightNode_withNonNullExpression_setsNodeCorrectly()
]]></system-out>
</testcase>
<testcase name="test_scan_negativeNumberWithMinus_signHandledAsSeparateToken()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_negativeNumberWithMinus_signHandledAsSeparateToken(StringScannerScanGeneratedTest.java:151)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_negativeNumberWithMinus_signHandledAsSeparateToken()]
display-name: test_scan_negativeNumberWithMinus_signHandledAsSeparateToken()
]]></system-out>
</testcase>
<testcase name="test_calculate_zero_base_positive_exponent()" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[method:test_calculate_zero_base_positive_exponent()]
display-name: test_calculate_zero_base_positive_exponent()
]]></system-out>
</testcase>
<testcase name="test_scan_withDelimiters_splitsTokens(String)[4]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_withDelimiters_splitsTokens(StringScannerScanGeneratedTest.java:60)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_withDelimiters_splitsTokens(java.lang.String)]/[test-template-invocation:#4]
display-name: [4]  a 
]]></system-out>
</testcase>
<testcase name="test_scan_withDelimiters_splitsTokens(String)[3]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_withDelimiters_splitsTokens(StringScannerScanGeneratedTest.java:60)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_withDelimiters_splitsTokens(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] a
b
]]></system-out>
</testcase>
<testcase name="test_setRightNode_multipleTimes_overwritesPreviousValue()" classname="mathNode.OperatorSetRightNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorSetRightNodeGeneratedTest]/[method:test_setRightNode_multipleTimes_overwritesPreviousValue()]
display-name: test_setRightNode_multipleTimes_overwritesPreviousValue()
]]></system-out>
</testcase>
<testcase name="test_scan_withDelimiters_splitsTokens(String)[2]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_withDelimiters_splitsTokens(StringScannerScanGeneratedTest.java:60)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_withDelimiters_splitsTokens(java.lang.String)]/[test-template-invocation:#2]
display-name: [2] a	b
]]></system-out>
</testcase>
<testcase name="test_clone_returnsNewInstanceWithSameValue()" classname="mathNode.IntCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCloneGeneratedTest]/[method:test_clone_returnsNewInstanceWithSameValue()]
display-name: test_clone_returnsNewInstanceWithSameValue()
]]></system-out>
</testcase>
<testcase name="test_scan_withDelimiters_splitsTokens(String)[1]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_withDelimiters_splitsTokens(StringScannerScanGeneratedTest.java:60)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_withDelimiters_splitsTokens(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] a b
]]></system-out>
</testcase>
<testcase name="test_scan_withDelimiters_splitsTokens(String)[5]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_withDelimiters_splitsTokens(StringScannerScanGeneratedTest.java:60)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_withDelimiters_splitsTokens(java.lang.String)]/[test-template-invocation:#5]
display-name: [5] a  b
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_implicitMultiplicationAfterCloseParen()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_implicitMultiplicationAfterCloseParen()]
display-name: test_cleanStrList_implicitMultiplicationAfterCloseParen()
]]></system-out>
</testcase>
<testcase name="test_Init_VeryLargeNumber_ReturnsTrue()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_VeryLargeNumber_ReturnsTrue()]
display-name: test_Init_VeryLargeNumber_ReturnsTrue()
]]></system-out>
</testcase>
<testcase name="test_toString_MinIntWithParens()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_MinIntWithParens()]
display-name: test_toString_MinIntWithParens()
]]></system-out>
</testcase>
<testcase name="test_clone_normalBehavior_returnsNewInstanceWithSameValues()" classname="mathNode.ExpressionCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionCloneGeneratedTest]/[method:test_clone_normalBehavior_returnsNewInstanceWithSameValues()]
display-name: test_clone_normalBehavior_returnsNewInstanceWithSameValues
]]></system-out>
</testcase>
<testcase name="test_Init_InvalidExpression_ReturnsFalse(String)[8]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_InvalidExpression_ReturnsFalse(java.lang.String)]/[test-template-invocation:#8]
display-name: [8] 3 + ( 4 * 5
]]></system-out>
</testcase>
<testcase name="test_BuildTree_ExpressionEndingWithOperator_ReturnsNull()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<failure message="expected: &lt;null&gt; but was: &lt;mathTree.MathTreeBuildTreeGeneratedTest$mathNode$Expression@7803bfd&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <null> but was: <mathTree.MathTreeBuildTreeGeneratedTest$mathNode$Expression@7803bfd>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertNull.failNotNull(AssertNull.java:50)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:35)
	at org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:30)
	at org.junit.jupiter.api.Assertions.assertNull(Assertions.java:279)
	at mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ExpressionEndingWithOperator_ReturnsNull(MathTreeBuildTreeGeneratedTest.java:277)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_ExpressionEndingWithOperator_ReturnsNull()]
display-name: test_BuildTree_ExpressionEndingWithOperator_ReturnsNull()
]]></system-out>
</testcase>
<testcase name="test_Init_InvalidExpression_ReturnsFalse(String)[5]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_InvalidExpression_ReturnsFalse(java.lang.String)]/[test-template-invocation:#5]
display-name: [5] 3 ++ 4
]]></system-out>
</testcase>
<testcase name="test_Init_InvalidExpression_ReturnsFalse(String)[4]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_InvalidExpression_ReturnsFalse(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] ( 3 + 4
]]></system-out>
</testcase>
<testcase name="test_Init_InvalidExpression_ReturnsFalse(String)[7]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_InvalidExpression_ReturnsFalse(java.lang.String)]/[test-template-invocation:#7]
display-name: [7] unknownFunction(5)
]]></system-out>
</testcase>
<testcase name="test_Init_InvalidExpression_ReturnsFalse(String)[6]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_InvalidExpression_ReturnsFalse(java.lang.String)]/[test-template-invocation:#6]
display-name: [6] 3 + / 4
]]></system-out>
</testcase>
<testcase name="test_BuildTree_MissingClosingParenthesis_ReturnsNull()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_MissingClosingParenthesis_ReturnsNull()]
display-name: test_BuildTree_MissingClosingParenthesis_ReturnsNull()
]]></system-out>
</testcase>
<testcase name="test_clone_whenRightNodeNotCloneable_throwsCloneNotSupportedException()" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[method:test_clone_whenRightNodeNotCloneable_throwsCloneNotSupportedException()]
display-name: test_clone_whenRightNodeNotCloneable_throwsCloneNotSupportedException()
]]></system-out>
</testcase>
<testcase name="test_Init_ConsecutiveNumbersNoOperator_ReturnsFalse()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_ConsecutiveNumbersNoOperator_ReturnsFalse()]
display-name: test_Init_ConsecutiveNumbersNoOperator_ReturnsFalse()
]]></system-out>
</testcase>
<testcase name="test_clone_withPopulatedCollections_createsIndependentCopiesWithSameContent()" classname="mathTree.StringScannerCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerCloneGeneratedTest]/[method:test_clone_withPopulatedCollections_createsIndependentCopiesWithSameContent()]
display-name: test_clone_withPopulatedCollections_createsIndependentCopiesWithSameContent()
]]></system-out>
</testcase>
<testcase name="test_clone_withExtremeIntegerValues(int)[2]" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[test-template:test_clone_withExtremeIntegerValues(int)]/[test-template-invocation:#2]
display-name: [2] -1
]]></system-out>
</testcase>
<testcase name="test_clone_whenLeftNodeNotCloneable_throwsCloneNotSupportedException()" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[method:test_clone_whenLeftNodeNotCloneable_throwsCloneNotSupportedException()]
display-name: test_clone_whenLeftNodeNotCloneable_throwsCloneNotSupportedException()
]]></system-out>
</testcase>
<testcase name="test_clone_withExtremeIntegerValues(int)[3]" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[test-template:test_clone_withExtremeIntegerValues(int)]/[test-template-invocation:#3]
display-name: [3] 0
]]></system-out>
</testcase>
<testcase name="test_checkTree_rightChildNull_returnsFalse()" classname="mathNode.OperatorCheckTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorCheckTreeGeneratedTest]/[method:test_checkTree_rightChildNull_returnsFalse()]
display-name: test_checkTree_rightChildNull_returnsFalse()
]]></system-out>
</testcase>
<testcase name="test_clone_withExtremeIntegerValues(int)[4]" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[test-template:test_clone_withExtremeIntegerValues(int)]/[test-template-invocation:#4]
display-name: [4] 1
]]></system-out>
</testcase>
<testcase name="test_checkTree_childrenWithNullLeaves_returnsFalse()" classname="mathNode.OperatorCheckTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorCheckTreeGeneratedTest]/[method:test_checkTree_childrenWithNullLeaves_returnsFalse()]
display-name: test_checkTree_childrenWithNullLeaves_returnsFalse()
]]></system-out>
</testcase>
<testcase name="test_clone_withExtremeIntegerValues(int)[5]" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[test-template:test_clone_withExtremeIntegerValues(int)]/[test-template-invocation:#5]
display-name: [5] 2147483647
]]></system-out>
</testcase>
<testcase name="test_toString_minFiniteDouble()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_minFiniteDouble()]
display-name: test_toString_minFiniteDouble()
]]></system-out>
</testcase>
<testcase name="test_checkTree_bothChildrenNull_returnsFalse()" classname="mathNode.OperatorCheckTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorCheckTreeGeneratedTest]/[method:test_checkTree_bothChildrenNull_returnsFalse()]
display-name: test_checkTree_bothChildrenNull_returnsFalse()
]]></system-out>
</testcase>
<testcase name="test_Init_NegativeNumber_ReturnsTrue()" classname="mathTree.MathTreeInitGeneratedTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_NegativeNumber_ReturnsTrue()]
display-name: test_Init_NegativeNumber_ReturnsTrue()
]]></system-out>
</testcase>
<testcase name="test_clone_withExtremeIntegerValues(int)[1]" classname="mathNode.SubCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.SubCloneGeneratedTest]/[test-template:test_clone_withExtremeIntegerValues(int)]/[test-template-invocation:#1]
display-name: [1] -2147483648
]]></system-out>
</testcase>
<testcase name="test_Init_ExpressionWithMismatchedParentheses_ReturnsFalse()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_ExpressionWithMismatchedParentheses_ReturnsFalse()]
display-name: test_Init_ExpressionWithMismatchedParentheses_ReturnsFalse()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_EmptyList_ReturnsNull_WhenInParens()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_EmptyList_ReturnsNull_WhenInParens()]
display-name: test_BuildTree_EmptyList_ReturnsNull_WhenInParens()
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_VariedCommonSpecialChars(char)[4]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_VariedCommonSpecialChars(char)]/[test-template-invocation:#4]
display-name: [4] _
]]></system-out>
</testcase>
<testcase name="test_calculate_parametrized(double, double, double)[7]" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[test-template:test_calculate_parametrized(double, double, double)]/[test-template-invocation:#7]
display-name: [7] 2.0, -2.0, 0.25
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_VariedCommonSpecialChars(char)[5]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_VariedCommonSpecialChars(char)]/[test-template-invocation:#5]
display-name: [5] #
]]></system-out>
</testcase>
<testcase name="test_calculate_parametrized(double, double, double)[6]" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[test-template:test_calculate_parametrized(double, double, double)]/[test-template-invocation:#6]
display-name: [6] 999.0, 0.0, 1.0
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_VariedCommonSpecialChars(char)[2]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_VariedCommonSpecialChars(char)]/[test-template-invocation:#2]
display-name: [2] -
]]></system-out>
</testcase>
<testcase name="test_calculate_parametrized(double, double, double)[5]" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[test-template:test_calculate_parametrized(double, double, double)]/[test-template-invocation:#5]
display-name: [5] 1.0, 100.0, 1.0
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_VariedCommonSpecialChars(char)[3]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_VariedCommonSpecialChars(char)]/[test-template-invocation:#3]
display-name: [3] =
]]></system-out>
</testcase>
<testcase name="test_calculate_parametrized(double, double, double)[4]" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[test-template:test_calculate_parametrized(double, double, double)]/[test-template-invocation:#4]
display-name: [4] 0.0, 5.0, 0.0
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_VariedCommonSpecialChars(char)[8]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_VariedCommonSpecialChars(char)]/[test-template-invocation:#8]
display-name: [8] ^
]]></system-out>
</testcase>
<testcase name="test_Init_ValidExpression_ReturnsTrue(String)[6]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<failure message="初始化有效表达式应成功: sqrt(16) ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 初始化有效表达式应成功: sqrt(16) ==> expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
	at mathTree.MathTreeInitGeneratedTest.test_Init_ValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:23)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_ValidExpression_ReturnsTrue(java.lang.String)]/[test-template-invocation:#6]
display-name: [6] sqrt(16)
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_VariedCommonSpecialChars(char)[9]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_VariedCommonSpecialChars(char)]/[test-template-invocation:#9]
display-name: [9] &
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_VariedCommonSpecialChars(char)[6]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_VariedCommonSpecialChars(char)]/[test-template-invocation:#6]
display-name: [6] $
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_VariedCommonSpecialChars(char)[7]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_VariedCommonSpecialChars(char)]/[test-template-invocation:#7]
display-name: [7] %
]]></system-out>
</testcase>
<testcase name="test_calculate_parametrized(double, double, double)[8]" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[test-template:test_calculate_parametrized(double, double, double)]/[test-template-invocation:#8]
display-name: [8] 4.0, 0.5, 2.0
]]></system-out>
</testcase>
<testcase name="test_setParens_transitionFromTrueToFalse_restoresDefaultPrecedence()" classname="mathNode.OperatorSetParensGeneratedTest" time="0">
<failure message="expected: &lt;1&gt; but was: &lt;0&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <1> but was: <0>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathNode.OperatorSetParensGeneratedTest.test_setParens_transitionFromTrueToFalse_restoresDefaultPrecedence(OperatorSetParensGeneratedTest.java:71)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorSetParensGeneratedTest]/[method:test_setParens_transitionFromTrueToFalse_restoresDefaultPrecedence()]
display-name: test_setParens_transitionFromTrueToFalse_restoresDefaultPrecedence()
]]></system-out>
</testcase>
<testcase name="test_setParens_false_setsParenthesisToFalseAndPrecedenceUnchanged()" classname="mathNode.OperatorSetParensGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorSetParensGeneratedTest]/[method:test_setParens_false_setsParenthesisToFalseAndPrecedenceUnchanged()]
display-name: test_setParens_false_setsParenthesisToFalseAndPrecedenceUnchanged()
]]></system-out>
</testcase>
<testcase name="test_calculate_parametrized(double, double, double)[3]" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[test-template:test_calculate_parametrized(double, double, double)]/[test-template-invocation:#3]
display-name: [3] -2.0, 3.0, -8.0
]]></system-out>
</testcase>
<testcase name="test_AddSpecialChar_VariedCommonSpecialChars(char)[1]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_AddSpecialChar_VariedCommonSpecialChars(char)]/[test-template-invocation:#1]
display-name: [1] +
]]></system-out>
</testcase>
<testcase name="test_calculate_parametrized(double, double, double)[2]" classname="mathNode.PowCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[test-template:test_calculate_parametrized(double, double, double)]/[test-template-invocation:#2]
display-name: [2] -2.0, 2.0, 4.0
]]></system-out>
</testcase>
<testcase name="test_calculate_parametrized(double, double, double)[1]" classname="mathNode.PowCalculateGeneratedTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.PowCalculateGeneratedTest]/[test-template:test_calculate_parametrized(double, double, double)]/[test-template-invocation:#1]
display-name: [1] 2.0, 3.0, 8.0
]]></system-out>
</testcase>
<testcase name="test_toString_smallestPositiveSubnormal()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_smallestPositiveSubnormal()]
display-name: test_toString_smallestPositiveSubnormal()
]]></system-out>
</testcase>
<testcase name="test_Init_Zero_ReturnsTrue()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_Zero_ReturnsTrue()]
display-name: test_Init_Zero_ReturnsTrue()
]]></system-out>
</testcase>
<testcase name="test_BuildTree_NestedParentheses_ReturnsValidNode()" classname="mathTree.MathTreeBuildTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeBuildTreeGeneratedTest]/[method:test_BuildTree_NestedParentheses_ReturnsValidNode()]
display-name: test_BuildTree_NestedParentheses_ReturnsValidNode()
]]></system-out>
</testcase>
<testcase name="test_isParens_whenParenthesisIsFalse_returnsFalse()" classname="mathNode.ExpressionIsParensGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionIsParensGeneratedTest]/[method:test_isParens_whenParenthesisIsFalse_returnsFalse()]
display-name: test_isParens_whenParenthesisIsFalse_returnsFalse()
]]></system-out>
</testcase>
<testcase name="test_clone_returns_correct_type()" classname="mathNode.FactoryCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryCloneGeneratedTest]/[method:test_clone_returns_correct_type()]
display-name: test_clone_returns_correct_type
]]></system-out>
</testcase>
<testcase name="test_Init_ValidExpression_ReturnsTrue(String)[2]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<failure message="初始化有效表达式应成功: sin(0) ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 初始化有效表达式应成功: sin(0) ==> expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
	at mathTree.MathTreeInitGeneratedTest.test_Init_ValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:23)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_ValidExpression_ReturnsTrue(java.lang.String)]/[test-template-invocation:#2]
display-name: [2] sin(0)
]]></system-out>
</testcase>
<testcase name="test_Init_ValidExpression_ReturnsTrue(String)[3]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<failure message="初始化有效表达式应成功: cos(3.14159) ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 初始化有效表达式应成功: cos(3.14159) ==> expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
	at mathTree.MathTreeInitGeneratedTest.test_Init_ValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:23)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_ValidExpression_ReturnsTrue(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] cos(3.14159)
]]></system-out>
</testcase>
<testcase name="test_Init_ValidExpression_ReturnsTrue(String)[4]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<failure message="初始化有效表达式应成功: tan(0.785) ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 初始化有效表达式应成功: tan(0.785) ==> expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
	at mathTree.MathTreeInitGeneratedTest.test_Init_ValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:23)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_ValidExpression_ReturnsTrue(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] tan(0.785)
]]></system-out>
</testcase>
<testcase name="test_Init_ValidExpression_ReturnsTrue(String)[5]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<failure message="初始化有效表达式应成功: log(10) ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: 初始化有效表达式应成功: log(10) ==> expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
	at mathTree.MathTreeInitGeneratedTest.test_Init_ValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:23)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_ValidExpression_ReturnsTrue(java.lang.String)]/[test-template-invocation:#5]
display-name: [5] log(10)
]]></system-out>
</testcase>
<testcase name="test_Init_ValidExpression_ReturnsTrue(String)[1]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_Init_ValidExpression_ReturnsTrue(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] 3 + 4 * 2 / ( 1 - 5 )
]]></system-out>
</testcase>
<testcase name="test_checkTree_validChildrenButLeftInvalidGrandchild_returnsFalse()" classname="mathNode.OperatorCheckTreeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.OperatorCheckTreeGeneratedTest]/[method:test_checkTree_validChildrenButLeftInvalidGrandchild_returnsFalse()]
display-name: test_checkTree_validChildrenButLeftInvalidGrandchild_returnsFalse()
]]></system-out>
</testcase>
<testcase name="test_toString_PositiveValueWithParens()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_PositiveValueWithParens()]
display-name: test_toString_PositiveValueWithParens()
]]></system-out>
</testcase>
<testcase name="test_isParens_whenParenthesisIsTrue_returnsTrue()" classname="mathNode.ExpressionIsParensGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionIsParensGeneratedTest]/[method:test_isParens_whenParenthesisIsTrue_returnsTrue()]
display-name: test_isParens_whenParenthesisIsTrue_returnsTrue()
]]></system-out>
</testcase>
<testcase name="test_solve_returnsNull_whenRootNodeIsNull()" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[method:test_solve_returnsNull_whenRootNodeIsNull()]
display-name: test_solve_returnsNull_whenRootNodeIsNull()
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousExpressionValues_performsDeepCopy(Expression, Expression)[4]" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[test-template:test_clone_withVariousExpressionValues_performsDeepCopy(mathNode.AddCloneGeneratedTest$Expression, mathNode.AddCloneGeneratedTest$Expression)]/[test-template-invocation:#4]
display-name: [4] mathNode.AddCloneGeneratedTest$Expression@80100000, mathNode.AddCloneGeneratedTest$Expression@1
]]></system-out>
</testcase>
<testcase name="test_solve_returnsValue_whenRootNodeReturnsInteger()" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[method:test_solve_returnsValue_whenRootNodeReturnsInteger()]
display-name: test_solve_returnsValue_whenRootNodeReturnsInteger()
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousExpressionValues_performsDeepCopy(Expression, Expression)[3]" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[test-template:test_clone_withVariousExpressionValues_performsDeepCopy(mathNode.AddCloneGeneratedTest$Expression, mathNode.AddCloneGeneratedTest$Expression)]/[test-template-invocation:#3]
display-name: [3] mathNode.AddCloneGeneratedTest$Expression@7fffffff, mathNode.AddCloneGeneratedTest$Expression@80000000
]]></system-out>
</testcase>
<testcase name="test_Init_MultipleOperatorsWithoutOperands_ReturnsFalse()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_Init_MultipleOperatorsWithoutOperands_ReturnsFalse()]
display-name: test_Init_MultipleOperatorsWithoutOperands_ReturnsFalse()
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousExpressionValues_performsDeepCopy(Expression, Expression)[5]" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[test-template:test_clone_withVariousExpressionValues_performsDeepCopy(mathNode.AddCloneGeneratedTest$Expression, mathNode.AddCloneGeneratedTest$Expression)]/[test-template-invocation:#5]
display-name: [5] mathNode.AddCloneGeneratedTest$Expression@364492, mathNode.AddCloneGeneratedTest$Expression@0
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousExpressionValues_performsDeepCopy(Expression, Expression)[2]" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[test-template:test_clone_withVariousExpressionValues_performsDeepCopy(mathNode.AddCloneGeneratedTest$Expression, mathNode.AddCloneGeneratedTest$Expression)]/[test-template-invocation:#2]
display-name: [2] mathNode.AddCloneGeneratedTest$Expression@ffffffff, mathNode.AddCloneGeneratedTest$Expression@1
]]></system-out>
</testcase>
<testcase name="test_clone_withVariousExpressionValues_performsDeepCopy(Expression, Expression)[1]" classname="mathNode.AddCloneGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.AddCloneGeneratedTest]/[test-template:test_clone_withVariousExpressionValues_performsDeepCopy(mathNode.AddCloneGeneratedTest$Expression, mathNode.AddCloneGeneratedTest$Expression)]/[test-template-invocation:#1]
display-name: [1] mathNode.AddCloneGeneratedTest$Expression@0, mathNode.AddCloneGeneratedTest$Expression@0
]]></system-out>
</testcase>
<testcase name="test_toString_fractionalPartOnly()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_fractionalPartOnly()]
display-name: test_toString_fractionalPartOnly()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_implicitMultiplication(String[], String[])[4]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_implicitMultiplication(%5BLjava.lang.String;, %5BLjava.lang.String;)]/[test-template-invocation:#4]
display-name: [4] [(, x, ), y], [(, x, ), *, y]
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_implicitMultiplication(String[], String[])[1]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_implicitMultiplication(%5BLjava.lang.String;, %5BLjava.lang.String;)]/[test-template-invocation:#1]
display-name: [1] [2, (, 3, )], [2, *, (, 3, )]
]]></system-out>
</testcase>
<testcase name="test_scan_startsWithSpecialChar_handledCorrectly()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_startsWithSpecialChar_handledCorrectly(StringScannerScanGeneratedTest.java:102)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_startsWithSpecialChar_handledCorrectly()]
display-name: test_scan_startsWithSpecialChar_handledCorrectly()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_implicitMultiplication(String[], String[])[3]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_implicitMultiplication(%5BLjava.lang.String;, %5BLjava.lang.String;)]/[test-template-invocation:#3]
display-name: [3] [x, (, y, )], [x, *, (, y, )]
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_implicitMultiplication(String[], String[])[2]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_implicitMultiplication(%5BLjava.lang.String;, %5BLjava.lang.String;)]/[test-template-invocation:#2]
display-name: [2] [(, 3, ), 2], [(, 3, ), *, 2]
]]></system-out>
</testcase>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]
display-name: JUnit Jupiter
]]></system-out>
</testsuite>
