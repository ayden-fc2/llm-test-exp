$ javac -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Mult.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Operator.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Add.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Int.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Pow.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Factory.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Div.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Expression.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Dec.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Sub.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathTree/StringScanner.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathTree/CalcApp.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathTree/MathTree.java
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetLeftNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionSetParensGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/IntCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetParensGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorGetPrecedenceGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/IntCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/IntToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/SubToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/SubCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorGetRightNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionIsParensGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/IntCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/SubCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetRightNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorGetLeftNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeBuildTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerAddDelimiterGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCleanStrListGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/CalcAppMainGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerScanGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInitGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeSolveGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerAddSpecialCharGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddCalculateGeneratedTest.java:164: error: floating-point number too large
        assertEquals(2e308, result.doubleValue(), 1e292); // Delta adjusted for magnitude
                     ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetLeftNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetLeftNodeGeneratedTest.java:16: error: Operator is abstract; cannot be instantiated
        Operator operator = new Operator();
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetLeftNodeGeneratedTest.java:18: error: incompatible types: mathNode.OperatorSetLeftNodeGeneratedTest.Expression cannot be converted to mathNode.Expression
        operator.setLeftNode(node);
                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetLeftNodeGeneratedTest.java:24: error: Operator is abstract; cannot be instantiated
        Operator operator = new Operator();
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetLeftNodeGeneratedTest.java:31: error: Operator is abstract; cannot be instantiated
        Operator operator = new Operator();
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetLeftNodeGeneratedTest.java:35: error: incompatible types: mathNode.OperatorSetLeftNodeGeneratedTest.Expression cannot be converted to mathNode.Expression
        operator.setLeftNode(node1);
                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetLeftNodeGeneratedTest.java:38: error: incompatible types: mathNode.OperatorSetLeftNodeGeneratedTest.Expression cannot be converted to mathNode.Expression
        operator.setLeftNode(node2);
                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetLeftNodeGeneratedTest.java:44: error: Operator is abstract; cannot be instantiated
        Operator operator = new Operator();
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetLeftNodeGeneratedTest.java:47: error: incompatible types: mathNode.OperatorSetLeftNodeGeneratedTest.Expression cannot be converted to mathNode.Expression
        operator.setLeftNode(node);
                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetLeftNodeGeneratedTest.java:48: error: incompatible types: mathNode.OperatorSetLeftNodeGeneratedTest.Expression cannot be converted to mathNode.Expression
        operator.setLeftNode(node); // Set again
                             ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
9 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddCloneGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddToStringGeneratedTest.java:27: error: getLeftNode() in AddStub cannot override getLeftNode() in Operator
        protected Node getLeftNode() {
                       ^
  attempting to assign weaker access privileges; was public
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddToStringGeneratedTest.java:26: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddToStringGeneratedTest.java:32: error: getRightNode() in AddStub cannot override getRightNode() in Operator
        protected Node getRightNode() {
                       ^
  attempting to assign weaker access privileges; was public
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddToStringGeneratedTest.java:31: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddToStringGeneratedTest.java:37: error: isParens() in AddStub cannot override isParens() in Expression
        protected boolean isParens() {
                          ^
  attempting to assign weaker access privileges; was public
5 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorCheckTreeGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionSetParensGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionSetParensGeneratedTest.java:11: error: Expression is abstract; cannot be instantiated
        Expression expression = new Expression();
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionSetParensGeneratedTest.java:19: error: cannot find symbol
        assertTrue(expression.getParens());
                             ^
  symbol:   method getParens()
  location: variable expression of type Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionSetParensGeneratedTest.java:25: error: Expression is abstract; cannot be instantiated
        Expression expression = new Expression();
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionSetParensGeneratedTest.java:32: error: cannot find symbol
        assertFalse(expression.getParens());
                              ^
  symbol:   method getParens()
  location: variable expression of type Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionSetParensGeneratedTest.java:38: error: Expression is abstract; cannot be instantiated
        Expression expression = new Expression();
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionSetParensGeneratedTest.java:45: error: cannot find symbol
        assertTrue(expression.getParens());
                             ^
  symbol:   method getParens()
  location: variable expression of type Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionSetParensGeneratedTest.java:51: error: Expression is abstract; cannot be instantiated
        Expression expression = new Expression();
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionSetParensGeneratedTest.java:58: error: cannot find symbol
        assertFalse(expression.getParens());
                              ^
  symbol:   method getParens()
  location: variable expression of type Expression
8 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/IntCloneGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/AddCalculateGeneratedTest.java:164: error: floating-point number too large
        assertEquals(2e308, result.doubleValue(), 1e292); // Delta adjusted for magnitude
                     ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCalculateGeneratedTest.java:15: error: cannot find symbol
    private static class StubNode implements Node {
                                             ^
  symbol:   class Node
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCalculateGeneratedTest.java:22: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCalculateGeneratedTest.java:31: error: incompatible types: StubNode cannot be converted to Expression
        mult.setLeftNode(new StubNode(left));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCalculateGeneratedTest.java:32: error: incompatible types: StubNode cannot be converted to Expression
        mult.setRightNode(new StubNode(right));
                          ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
4 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:15: error: cannot find symbol
    static class TestNode implements Node {
                                     ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:28: error: cannot find symbol
        public Node getLeftNode() {
               ^
  symbol:   class Node
  location: class TestNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:33: error: cannot find symbol
        public Node getRightNode() {
               ^
  symbol:   class Node
  location: class TestNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:44: error: cannot find symbol
        private final Node left;
                      ^
  symbol:   class Node
  location: class Mult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:45: error: cannot find symbol
        private final Node right;
                      ^
  symbol:   class Node
  location: class Mult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:48: error: cannot find symbol
        Mult(Node left, Node right, boolean parens) {
             ^
  symbol:   class Node
  location: class Mult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:48: error: cannot find symbol
        Mult(Node left, Node right, boolean parens) {
                        ^
  symbol:   class Node
  location: class Mult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:56: error: cannot find symbol
        public Node getLeftNode() {
               ^
  symbol:   class Node
  location: class Mult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:61: error: cannot find symbol
        public Node getRightNode() {
               ^
  symbol:   class Node
  location: class Mult
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:27: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:32: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:37: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:94: error: cannot find symbol
        Node left = new TestNode(leftVal);
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:95: error: cannot find symbol
        Node right = new TestNode(rightVal);
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:103: error: cannot find symbol
        Node left = new TestNode("");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:104: error: cannot find symbol
        Node right = new TestNode("");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:111: error: cannot find symbol
        Node left = new TestNode("");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:112: error: cannot find symbol
        Node right = new TestNode("");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:119: error: cannot find symbol
        Node left = new TestNode("0");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:120: error: cannot find symbol
        Node right = new TestNode("1");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:127: error: cannot find symbol
        Node left = new TestNode("-1");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:128: error: cannot find symbol
        Node right = new TestNode("-2");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:135: error: cannot find symbol
        Node left = new TestNode("2147483647"); // Integer.MAX_VALUE as string
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:136: error: cannot find symbol
        Node right = new TestNode("-2147483648"); // Integer.MIN_VALUE as string
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:143: error: cannot find symbol
        Node left = new TestNode("x + y");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:144: error: cannot find symbol
        Node right = new TestNode("z - w");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:151: error: cannot find symbol
        Node left = new TestNode("x + y");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:152: error: cannot find symbol
        Node right = new TestNode("z - w");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:161: error: cannot find symbol
        Node left = new TestNode(longStr1);
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:162: error: cannot find symbol
        Node right = new TestNode(longStr2);
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:169: error: cannot find symbol
        Node left = new TestNode("x@y");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultToStringGeneratedTest.java:170: error: cannot find symbol
        Node right = new TestNode("z#w");
        ^
  symbol:   class Node
  location: class MultToStringGeneratedTest
32 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:19: error: cannot find symbol
        assertEquals(input, ((Dec) result).getValue(), 1e-9);
                                          ^
  symbol:   method getValue()
  location: class Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:28: error: cannot find symbol
        assertEquals(input, ((Dec) result).getValue(), 1e-9);
                                          ^
  symbol:   method getValue()
  location: class Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:37: error: cannot find symbol
        assertEquals(input, ((Dec) result).getValue(), 1e-9);
                                          ^
  symbol:   method getValue()
  location: class Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:46: error: cannot find symbol
        assertEquals(input, ((Dec) result).getValue(), 1e-9);
                                          ^
  symbol:   method getValue()
  location: class Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:55: error: cannot find symbol
        assertEquals(input, ((Dec) result).getValue(), 1e-9);
                                          ^
  symbol:   method getValue()
  location: class Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:64: error: cannot find symbol
        assertEquals(input, ((Dec) result).getValue(), 1e-9);
                                          ^
  symbol:   method getValue()
  location: class Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:73: error: cannot find symbol
        assertEquals(input, ((Dec) result).getValue(), 1e-9);
                                          ^
  symbol:   method getValue()
  location: class Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:82: error: cannot find symbol
        assertEquals(input, ((Dec) result).getValue(), Math.abs(input) * 1e-9);
                                          ^
  symbol:   method getValue()
  location: class Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:91: error: cannot find symbol
        assertEquals(input, ((Dec) result).getValue(), Math.abs(input) * 1e-9);
                                          ^
  symbol:   method getValue()
  location: class Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:100: error: cannot find symbol
        assertEquals(input, ((Dec) result).getValue(), 0.0);
                                          ^
  symbol:   method getValue()
  location: class Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:109: error: cannot find symbol
        assertEquals(input, ((Dec) result).getValue(), 0.0);
                                          ^
  symbol:   method getValue()
  location: class Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryBuildNodeGeneratedTest.java:118: error: cannot find symbol
        assertTrue(Double.isNaN(((Dec) result).getValue()));
                                              ^
  symbol:   method getValue()
  location: class Dec
12 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCalculateGeneratedTest.java:15: error: constructor Dec in class Dec cannot be applied to given types;
        Dec dec = new Dec();
                  ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetParensGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:12: error: cannot find symbol
    private static abstract class NodeStub implements Node {
                                                      ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:19: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:28: error: cannot find symbol
        Node left = new NodeStub(10.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:29: error: cannot find symbol
        Node right = new NodeStub(2.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:42: error: cannot find symbol
        Node left = new NodeStub(10.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:43: error: cannot find symbol
        Node right = new NodeStub(0.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:56: error: cannot find symbol
        Node left = new NodeStub(-10.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:57: error: cannot find symbol
        Node right = new NodeStub(0.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:70: error: cannot find symbol
        Node left = new NodeStub(0.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:71: error: cannot find symbol
        Node right = new NodeStub(5.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:83: error: cannot find symbol
        Node left = new NodeStub(-20.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:84: error: cannot find symbol
        Node right = new NodeStub(4.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:96: error: cannot find symbol
        Node left = new NodeStub(20.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:97: error: cannot find symbol
        Node right = new NodeStub(-4.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:109: error: cannot find symbol
        Node left = new NodeStub(-20.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:110: error: cannot find symbol
        Node right = new NodeStub(-4.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:122: error: cannot find symbol
        Node left = new NodeStub(Double.MAX_VALUE) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:123: error: cannot find symbol
        Node right = new NodeStub(Double.MAX_VALUE / 2) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:135: error: cannot find symbol
        Node left = new NodeStub(Double.MIN_VALUE * 2) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:136: error: cannot find symbol
        Node right = new NodeStub(Double.MIN_VALUE) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:157: error: cannot find symbol
        Node left = new NodeStub(leftVal) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:158: error: cannot find symbol
        Node right = new NodeStub(rightVal) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:175: error: cannot find symbol
        Node left = new NodeStub(Double.NaN) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:176: error: cannot find symbol
        Node right = new NodeStub(2.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:188: error: cannot find symbol
        Node left = new NodeStub(2.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:189: error: cannot find symbol
        Node right = new NodeStub(Double.NaN) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:201: error: cannot find symbol
        Node left = new NodeStub(Double.POSITIVE_INFINITY) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:202: error: cannot find symbol
        Node right = new NodeStub(2.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:215: error: cannot find symbol
        Node left = new NodeStub(2.0) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCalculateGeneratedTest.java:216: error: cannot find symbol
        Node right = new NodeStub(Double.POSITIVE_INFINITY) {};
        ^
  symbol:   class Node
  location: class DivCalculateGeneratedTest
30 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCheckTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCheckTreeGeneratedTest.java:16: error: TestExpression is not abstract and does not override abstract method toString() in Expression
    private static class TestExpression extends Expression {
                   ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecToStringGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCloneGeneratedTest.java:47: error: class MultCloneTest is public, should be declared in a file named MultCloneTest.java
public class MultCloneTest {
       ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCloneGeneratedTest.java:54: error: <anonymous mathNode.MultCloneTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockLeft = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCloneGeneratedTest.java:57: error: <anonymous mathNode.MultCloneTest$1$1> is not abstract and does not override abstract method checkTree() in Expression
                return new Expression() {}; // 简单克隆返回新实例
                                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCloneGeneratedTest.java:61: error: <anonymous mathNode.MultCloneTest$2> is not abstract and does not override abstract method checkTree() in Expression
        mockRight = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCloneGeneratedTest.java:64: error: <anonymous mathNode.MultCloneTest$2$1> is not abstract and does not override abstract method checkTree() in Expression
                return new Expression() {}; // 简单克隆返回新实例
                                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCloneGeneratedTest.java:105: error: <anonymous mathNode.MultCloneTest$3> is not abstract and does not override abstract method checkTree() in Expression
        Expression leftThatThrows = new Expression() {
                                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/MultCloneGeneratedTest.java:119: error: <anonymous mathNode.MultCloneTest$4> is not abstract and does not override abstract method checkTree() in Expression
        Expression rightThatThrows = new Expression() {
                                                      ^
7 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorGetPrecedenceGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCloneGeneratedTest.java:17: error: interface expected here
    static class ExpressionStub implements Expression, Cloneable {
                                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCloneGeneratedTest.java:43: error: incompatible types: ExpressionStub cannot be converted to Expression
        leftNode = new ExpressionStub("left");
                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCloneGeneratedTest.java:44: error: incompatible types: ExpressionStub cannot be converted to Expression
        rightNode = new ExpressionStub("right");
                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCloneGeneratedTest.java:83: error: interface expected here
        class NonCloneableExpression implements Expression {
                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCloneGeneratedTest.java:89: error: incompatible types: NonCloneableExpression cannot be converted to Expression
        div.setLeftNode(new NonCloneableExpression());
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCloneGeneratedTest.java:95: error: interface expected here
        class NonCloneableExpression implements Expression {
                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCloneGeneratedTest.java:101: error: incompatible types: NonCloneableExpression cannot be converted to Expression
        div.setRightNode(new NonCloneableExpression());
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCloneGeneratedTest.java:120: error: incompatible types: ExpressionStub cannot be converted to Expression
        div.setLeftNode(left);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivCloneGeneratedTest.java:121: error: incompatible types: ExpressionStub cannot be converted to Expression
        div.setRightNode(right);
                         ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
9 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/IntCalculateGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/IntToStringGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/SubToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/SubToStringGeneratedTest.java:16: error: toString() in Node cannot override toString() in Object
        abstract String toString();
                        ^
  attempting to assign weaker access privileges; was public
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/SubCloneGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:98: error: cannot find symbol
    void test_toString_variousCombinations(Node left, Node right, boolean parens, String expected) {
                                           ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:98: error: cannot find symbol
    void test_toString_variousCombinations(Node left, Node right, boolean parens, String expected) {
                                                      ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:15: error: cannot find symbol
    private static class MockNode implements Node {
                                             ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:28: error: cannot find symbol
        public Node getLeftNode() {
               ^
  symbol:   class Node
  location: class MockNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:33: error: cannot find symbol
        public Node getRightNode() {
               ^
  symbol:   class Node
  location: class MockNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:44: error: cannot find symbol
    private static class TestableDiv implements Node {
                                                ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:45: error: cannot find symbol
        private final Node left;
                      ^
  symbol:   class Node
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:46: error: cannot find symbol
        private final Node right;
                      ^
  symbol:   class Node
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:49: error: cannot find symbol
        public TestableDiv(Node left, Node right, boolean parens) {
                           ^
  symbol:   class Node
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:49: error: cannot find symbol
        public TestableDiv(Node left, Node right, boolean parens) {
                                      ^
  symbol:   class Node
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:56: error: cannot find symbol
        public Node getLeftNode() {
               ^
  symbol:   class Node
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:61: error: cannot find symbol
        public Node getRightNode() {
               ^
  symbol:   class Node
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:27: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:32: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:37: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:55: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:60: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:65: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:82: error: cannot find symbol
        Node left = new MockNode("5");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:83: error: cannot find symbol
        Node right = new MockNode("2");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:84: error: incompatible types: TestableDiv cannot be converted to Div
        Div div = new TestableDiv(left, right, false);
                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:90: error: cannot find symbol
        Node left = new MockNode("x");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:91: error: cannot find symbol
        Node right = new MockNode("y");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:92: error: incompatible types: TestableDiv cannot be converted to Div
        Div div = new TestableDiv(left, right, true);
                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:99: error: incompatible types: TestableDiv cannot be converted to Div
        Div div = new TestableDiv(left, right, parens);
                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:118: error: cannot find symbol
        Node left = new MockNode("");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:119: error: cannot find symbol
        Node right = new MockNode("");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:120: error: incompatible types: TestableDiv cannot be converted to Div
        Div div = new TestableDiv(left, right, false);
                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:126: error: cannot find symbol
        Node left = new MockNode(" ");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:127: error: cannot find symbol
        Node right = new MockNode(" ");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:128: error: incompatible types: TestableDiv cannot be converted to Div
        Div div = new TestableDiv(left, right, true);
                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:134: error: cannot find symbol
        Node left = new MockNode("0");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:135: error: cannot find symbol
        Node right = new MockNode("1");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:136: error: incompatible types: TestableDiv cannot be converted to Div
        Div div = new TestableDiv(left, right, false);
                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:142: error: cannot find symbol
        Node left = new MockNode("-5");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:143: error: cannot find symbol
        Node right = new MockNode("-2");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:144: error: incompatible types: TestableDiv cannot be converted to Div
        Div div = new TestableDiv(left, right, true);
                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:150: error: cannot find symbol
        Node left = new MockNode("MAX_INT");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:151: error: cannot find symbol
        Node right = new MockNode("MIN_INT");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:152: error: incompatible types: TestableDiv cannot be converted to Div
        Div div = new TestableDiv(left, right, false);
                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:158: error: cannot find symbol
        Node left = new MockNode("3.14159");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:159: error: cannot find symbol
        Node right = new MockNode("2.71828");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:160: error: incompatible types: TestableDiv cannot be converted to Div
        Div div = new TestableDiv(left, right, true);
                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:166: error: cannot find symbol
        Node left = new MockNode("expr1");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:167: error: cannot find symbol
        Node right = new MockNode("expr2");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:168: error: incompatible types: TestableDiv cannot be converted to Div
        Div div = new TestableDiv(left, right, false);
                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:175: error: cannot find symbol
        Node left = new MockNode("expr1");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:176: error: cannot find symbol
        Node right = new MockNode("expr2");
        ^
  symbol:   class Node
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DivToStringGeneratedTest.java:177: error: incompatible types: TestableDiv cannot be converted to Div
        Div div = new TestableDiv(left, right, true);
                  ^
49 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCloneGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorGetRightNodeGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionToStringGeneratedTest.java:72: error: expression not allowed as annotation value
        Integer.toString(Integer.MAX_VALUE),
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionToStringGeneratedTest.java:73: error: expression not allowed as annotation value
        Integer.toString(Integer.MIN_VALUE),
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionToStringGeneratedTest.java:74: error: expression not allowed as annotation value
        Double.toString(Double.MAX_VALUE),
                       ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionToStringGeneratedTest.java:75: error: expression not allowed as annotation value
        Double.toString(Double.MIN_VALUE),
                       ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionToStringGeneratedTest.java:15: error: StubExpression is not abstract and does not override abstract method checkTree() in Expression
    private static class StubExpression extends Expression {
                   ^
5 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionIsParensGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/IntCheckTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/IntCheckTreeGeneratedTest.java:14: error: constructor Int in class Int cannot be applied to given types;
        Int node = new Int(); // Default constructor assumed to exist
                   ^
  required: int
  found:    no arguments
  reason: actual and formal argument lists differ in length
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/SubCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/SubCalculateGeneratedTest.java:15: error: cannot find symbol
    private static class StubNode implements Node {
                                             ^
  symbol:   class Node
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/SubCalculateGeneratedTest.java:22: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/SubCalculateGeneratedTest.java:31: error: incompatible types: StubNode cannot be converted to Expression
        sub.setLeftNode(new StubNode(left));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/SubCalculateGeneratedTest.java:32: error: incompatible types: StubNode cannot be converted to Expression
        sub.setRightNode(new StubNode(right));
                         ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
4 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowCloneGeneratedTest.java:80: error: interface expected here
    static class ExpressionStub implements Expression {
                                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowCloneGeneratedTest.java:21: error: incompatible types: ExpressionStub cannot be converted to Expression
        pow.setLeftNode(leftNodeStub);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowCloneGeneratedTest.java:22: error: incompatible types: ExpressionStub cannot be converted to Expression
        pow.setRightNode(rightNodeStub);
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowCloneGeneratedTest.java:42: error: incompatible types: Expression cannot be converted to ExpressionStub
        assertEquals(((ExpressionStub) pow.getLeftNode()).getValue(),
                                                      ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowCloneGeneratedTest.java:43: error: incompatible types: Expression cannot be converted to ExpressionStub
                     ((ExpressionStub) cloned.getLeftNode()).getValue());
                                                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowCloneGeneratedTest.java:44: error: incompatible types: Expression cannot be converted to ExpressionStub
        assertEquals(((ExpressionStub) pow.getRightNode()).getValue(),
                                                       ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowCloneGeneratedTest.java:45: error: incompatible types: Expression cannot be converted to ExpressionStub
                     ((ExpressionStub) cloned.getRightNode()).getValue());
                                                          ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
7 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorSetRightNodeGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCloneGeneratedTest.java:19: error: constructor Dec in class Dec cannot be applied to given types;
        decInstance = new Dec();
                      ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCloneGeneratedTest.java:49: error: constructor Dec in class Dec cannot be applied to given types;
        class UncloneableDec extends Dec {
        ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCloneGeneratedTest.java:63: error: constructor Dec in class Dec cannot be applied to given types;
        decInstance = new Dec() {
                      ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCloneGeneratedTest.java:66: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCloneGeneratedTest.java:73: error: cannot find symbol
        assertEquals(decInstance.doubleValue(), cloned.doubleValue(), 1e-9);
                                ^
  symbol:   method doubleValue()
  location: variable decInstance of type Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCloneGeneratedTest.java:73: error: cannot find symbol
        assertEquals(decInstance.doubleValue(), cloned.doubleValue(), 1e-9);
                                                      ^
  symbol:   method doubleValue()
  location: variable cloned of type Dec
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCloneGeneratedTest.java:78: error: constructor Dec in class Dec cannot be applied to given types;
        decInstance = new Dec() {
                      ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCloneGeneratedTest.java:81: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCloneGeneratedTest.java:88: error: cannot find symbol
        assertTrue(Double.isNaN(cloned.doubleValue()));
                                      ^
  symbol:   method doubleValue()
  location: variable cloned of type Dec
9 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:64: error: class PowToStringTest is public, should be declared in a file named PowToStringTest.java
public class PowToStringTest {
       ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:18: error: cannot find symbol
class TestNode extends Node {
                       ^
  symbol: class Node
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:33: error: cannot find symbol
    private final Node leftNode;
                  ^
  symbol:   class Node
  location: class Pow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:34: error: cannot find symbol
    private final Node rightNode;
                  ^
  symbol:   class Node
  location: class Pow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:37: error: cannot find symbol
    public Pow(Node leftNode, Node rightNode, boolean parens) {
               ^
  symbol:   class Node
  location: class Pow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:37: error: cannot find symbol
    public Pow(Node leftNode, Node rightNode, boolean parens) {
                              ^
  symbol:   class Node
  location: class Pow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:43: error: cannot find symbol
    protected Node getLeftNode() {
              ^
  symbol:   class Node
  location: class Pow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:47: error: cannot find symbol
    protected Node getRightNode() {
              ^
  symbol:   class Node
  location: class Pow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:14: error: toString() in PowToStringGeneratedTest cannot override toString() in Object
    abstract String toString();
                    ^
  attempting to assign weaker access privileges; was public
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:25: error: method does not override or implement a method from a supertype
    @Override
    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:81: error: cannot find symbol
        Node leftNode = new TestNode(left);
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:82: error: cannot find symbol
        Node rightNode = new TestNode(right);
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:90: error: cannot find symbol
        Node leftNode = new TestNode("");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:91: error: cannot find symbol
        Node rightNode = new TestNode("");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:99: error: cannot find symbol
        Node leftNode = new TestNode("");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:100: error: cannot find symbol
        Node rightNode = new TestNode("x");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:107: error: cannot find symbol
        Node leftNode = new TestNode("x");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:108: error: cannot find symbol
        Node rightNode = new TestNode("");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:116: error: cannot find symbol
        Node leftNode = new TestNode("a+b");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:117: error: cannot find symbol
        Node rightNode = new TestNode("c*d");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:125: error: cannot find symbol
        Node leftNode = new TestNode("base");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:126: error: cannot find symbol
        Node rightNode = new TestNode("exp");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:134: error: cannot find symbol
        Node leftNode = new TestNode("base");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:135: error: cannot find symbol
        Node rightNode = new TestNode("exp");
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:143: error: cannot find symbol
        Node leftNode = new TestNode(String.valueOf(Integer.MAX_VALUE));
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:144: error: cannot find symbol
        Node rightNode = new TestNode(String.valueOf(Integer.MIN_VALUE));
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:152: error: cannot find symbol
        Node leftNode = new TestNode("1.7976931348623157E308"); // Double.MAX_VALUE as string
        ^
  symbol:   class Node
  location: class PowToStringTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowToStringGeneratedTest.java:153: error: cannot find symbol
        Node rightNode = new TestNode("4.9E-324");               // Double.MIN_VALUE as string
        ^
  symbol:   class Node
  location: class PowToStringTest
28 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/PowCalculateGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/OperatorGetLeftNodeGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCheckTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/DecCheckTreeGeneratedTest.java:14: error: constructor Dec in class Dec cannot be applied to given types;
        Dec dec = new Dec();
                  ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/FactoryCloneGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCalculateGeneratedTest.java:19: error: ConstantExpression is not abstract and does not override abstract method checkTree() in Expression
    private static class ConstantExpression extends Expression {
                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCalculateGeneratedTest.java:33: error: NegateExpression is not abstract and does not override abstract method checkTree() in Expression
    private static class NegateExpression extends Expression {
                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCalculateGeneratedTest.java:52: error: IdentityExpression is not abstract and does not override abstract method checkTree() in Expression
    private static class IdentityExpression extends Expression {
                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCalculateGeneratedTest.java:66: error: FaultyExpression is not abstract and does not override abstract method checkTree() in Expression
    private static class FaultyExpression extends Expression {
                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathNode/ExpressionCalculateGeneratedTest.java:197: error: incompatible types: Object cannot be converted to Expression
        Expression cloned = expr.clone();
                                      ^
5 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeBuildTreeGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerAddDelimiterGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerAddDelimiterGeneratedTest.java:21: error: constructor StringScanner in class StringScanner cannot be applied to given types;
        scanner = new StringScanner(""); // Assuming default constructor exists or is minimally stubbed
                  ^
  required: no arguments
  found:    String
  reason: actual and formal argument lists differ in length
Note: /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerAddDelimiterGeneratedTest.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java:34: error: tokenList has private access in StringScanner
            return new LinkedList<>(tokenList); // defensive copy
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java:45: error: cannot find symbol
        scanner.saveToken("validToken");
               ^
  symbol:   method saveToken(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java:54: error: cannot find symbol
        scanner.saveToken(input);
               ^
  symbol:   method saveToken(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java:66: error: cannot find symbol
        scanner.saveToken("");
               ^
  symbol:   method saveToken(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java:73: error: cannot find symbol
        scanner.saveToken("first");
               ^
  symbol:   method saveToken(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java:74: error: cannot find symbol
        scanner.saveToken("");
               ^
  symbol:   method saveToken(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java:75: error: cannot find symbol
        scanner.saveToken("second");
               ^
  symbol:   method saveToken(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java:85: error: cannot find symbol
        scanner.saveToken(special);
               ^
  symbol:   method saveToken(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java:94: error: cannot find symbol
        scanner.saveToken(longString);
               ^
  symbol:   method saveToken(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSaveTokenGeneratedTest.java:103: error: cannot find symbol
        scanner.saveToken(unicode);
               ^
  symbol:   method saveToken(String)
  location: variable scanner of type StringScanner
10 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:33: error: cannot find symbol
        MathTree.TreeNode mockNode = new MathTree.TreeNode() {
                ^
  symbol:   class TreeNode
  location: class MathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:33: error: cannot find symbol
        MathTree.TreeNode mockNode = new MathTree.TreeNode() {
                                                 ^
  symbol:   class TreeNode
  location: class MathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:34: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:39: error: rootNode has private access in MathTree
        mathTree.rootNode = mockNode;
                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:53: error: cannot find symbol
        MathTree.TreeNode mockNode = new MathTree.TreeNode() {
                ^
  symbol:   class TreeNode
  location: class MathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:53: error: cannot find symbol
        MathTree.TreeNode mockNode = new MathTree.TreeNode() {
                                                 ^
  symbol:   class TreeNode
  location: class MathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:54: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:59: error: rootNode has private access in MathTree
        mathTree.rootNode = mockNode;
                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:72: error: cannot find symbol
        MathTree.TreeNode faultyNode = new MathTree.TreeNode() {
                ^
  symbol:   class TreeNode
  location: class MathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:72: error: cannot find symbol
        MathTree.TreeNode faultyNode = new MathTree.TreeNode() {
                                                   ^
  symbol:   class TreeNode
  location: class MathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:73: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeToStringGeneratedTest.java:78: error: rootNode has private access in MathTree
        mathTree.rootNode = faultyNode;
                ^
12 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCleanStrListGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/CalcAppMainGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:70: error: nodeFactory has private access in MathTree
        mathTree.nodeFactory = factoryStub;
                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:70: error: incompatible types: mathTree.MathTreeCloneGeneratedTest.mathNode.Factory cannot be converted to mathNode.Factory
        mathTree.nodeFactory = factoryStub;
                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:71: error: rootNode has private access in MathTree
        mathTree.rootNode = expressionStub;
                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:71: error: incompatible types: mathTree.MathTreeCloneGeneratedTest.mathNode.Expression cannot be converted to mathNode.Expression
        mathTree.rootNode = expressionStub;
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:80: error: nodeFactory has private access in MathTree
        assertNotSame(mathTree.nodeFactory, cloned.nodeFactory);
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:80: error: nodeFactory has private access in MathTree
        assertNotSame(mathTree.nodeFactory, cloned.nodeFactory);
                                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:81: error: rootNode has private access in MathTree
        assertNotSame(mathTree.rootNode, cloned.rootNode);
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:81: error: rootNode has private access in MathTree
        assertNotSame(mathTree.rootNode, cloned.rootNode);
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:83: error: nodeFactory has private access in MathTree
        assertEquals(mathTree.nodeFactory, cloned.nodeFactory);
                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:83: error: nodeFactory has private access in MathTree
        assertEquals(mathTree.nodeFactory, cloned.nodeFactory);
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:84: error: rootNode has private access in MathTree
        assertEquals(mathTree.rootNode, cloned.rootNode);
                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:84: error: rootNode has private access in MathTree
        assertEquals(mathTree.rootNode, cloned.rootNode);
                                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:89: error: nodeFactory has private access in MathTree
        mathTree.nodeFactory = null;
                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:96: error: rootNode has private access in MathTree
        mathTree.rootNode = null;
                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:107: error: nodeFactory has private access in MathTree
        assertNotSame(clone1.nodeFactory, clone2.nodeFactory);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:107: error: nodeFactory has private access in MathTree
        assertNotSame(clone1.nodeFactory, clone2.nodeFactory);
                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:108: error: rootNode has private access in MathTree
        assertNotSame(clone1.rootNode, clone2.rootNode);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:108: error: rootNode has private access in MathTree
        assertNotSame(clone1.rootNode, clone2.rootNode);
                                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:110: error: nodeFactory has private access in MathTree
        assertEquals(clone1.nodeFactory, clone2.nodeFactory);
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:110: error: nodeFactory has private access in MathTree
        assertEquals(clone1.nodeFactory, clone2.nodeFactory);
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:111: error: rootNode has private access in MathTree
        assertEquals(clone1.rootNode, clone2.rootNode);
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:111: error: rootNode has private access in MathTree
        assertEquals(clone1.rootNode, clone2.rootNode);
                                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:123: error: nodeFactory has private access in MathTree
        mathTree.nodeFactory = new mathNode.Factory("");
                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:123: error: incompatible types: mathTree.MathTreeCloneGeneratedTest.mathNode.Factory cannot be converted to mathNode.Factory
        mathTree.nodeFactory = new mathNode.Factory("");
                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:124: error: rootNode has private access in MathTree
        mathTree.rootNode = new mathNode.ConstantExpression("");
                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:124: error: incompatible types: ConstantExpression cannot be converted to Expression
        mathTree.rootNode = new mathNode.ConstantExpression("");
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:129: error: nodeFactory has private access in MathTree
        assertEquals(mathTree.nodeFactory, cloned.nodeFactory);
                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:129: error: nodeFactory has private access in MathTree
        assertEquals(mathTree.nodeFactory, cloned.nodeFactory);
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:130: error: rootNode has private access in MathTree
        assertEquals(mathTree.rootNode, cloned.rootNode);
                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeCloneGeneratedTest.java:130: error: rootNode has private access in MathTree
        assertEquals(mathTree.rootNode, cloned.rootNode);
                                              ^
30 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:62: error: incompatible types: mathNode cannot be converted to Expression
        mathNode result = tree.insertNode(null, newNode);
                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:71: error: incompatible types: mathNode cannot be converted to Expression
        mathNode result = tree.insertNode(rootNode, null);
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:82: error: incompatible types: Operator cannot be converted to Expression
        mathNode result = tree.insertNode(rootOp, newOp);
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:96: error: incompatible types: Operator cannot be converted to Expression
        mathNode result = tree.insertNode(rootOp, newOp);
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:113: error: incompatible types: Operator cannot be converted to Expression
        mathNode result = tree.insertNode(rootOp, newOp);
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:131: error: incompatible types: Operator cannot be converted to Expression
        mathNode result = tree.insertNode(rootOp, newOp);
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:148: error: incompatible types: Operator cannot be converted to Expression
        mathNode result = tree.insertNode(rootOp, parenOp);
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:166: error: incompatible types: Operator cannot be converted to Expression
        mathNode result = tree.insertNode(rootOp, newVal);
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:182: error: incompatible types: Operator cannot be converted to Expression
        mathNode result = tree.insertNode(rootOp, newVal);
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:195: error: incompatible types: Int cannot be converted to Expression
        mathNode result = tree.insertNode(rootVal, newVal);
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:212: error: incompatible types: Operator cannot be converted to Expression
        mathNode result = tree.insertNode(rootOp, newVal);
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:229: error: incompatible types: Operator cannot be converted to Expression
        mathNode result = tree.insertNode(rootOp, newOp);
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInsertNodeGeneratedTest.java:260: error: incompatible types: Operator cannot be converted to Expression
        mathNode result = tree.insertNode(rootOp, newOpLow);
                                          ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
13 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:33: error: constructor StringScanner in class StringScanner cannot be applied to given types;
            super(""); // dummy input
            ^
  required: no arguments
  found:    String
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:38: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:59: error: isDelim(char) has private access in StringScanner
        assertTrue(scannerWithWhitespaceEnabled.isDelim(ch));
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:67: error: isDelim(char) has private access in StringScanner
        assertTrue(scannerWithWhitespaceEnabled.isDelim(ch));
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:68: error: isDelim(char) has private access in StringScanner
        assertTrue(scannerWithWhitespaceDisabled.isDelim(ch));
                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:76: error: isDelim(char) has private access in StringScanner
        assertFalse(scannerWithWhitespaceDisabled.isDelim('\0'));
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:81: error: isDelim(char) has private access in StringScanner
        assertFalse(scannerWithWhitespaceDisabled.isDelim(Character.MAX_VALUE));
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:86: error: isDelim(char) has private access in StringScanner
        assertFalse(scannerWithWhitespaceDisabled.isDelim(Character.MIN_VALUE));
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:91: error: isDelim(char) has private access in StringScanner
        assertFalse(scannerWithWhitespaceDisabled.isDelim('a'));
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:96: error: isDelim(char) has private access in StringScanner
        assertTrue(scannerWithWhitespaceEnabled.isDelim(' '));
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:101: error: isDelim(char) has private access in StringScanner
        assertFalse(scannerWithWhitespaceDisabled.isDelim(' '));
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:112: error: isDelim(char) has private access in StringScanner
        assertTrue(scanner.isDelim(' '));
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:121: error: isDelim(char) has private access in StringScanner
        assertTrue(scanner.isDelim('#'));
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:129: error: isDelim(char) has private access in StringScanner
        assertFalse(scanner.isDelim('a'));
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:130: error: isDelim(char) has private access in StringScanner
        assertFalse(scanner.isDelim(' '));
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:131: error: isDelim(char) has private access in StringScanner
        assertFalse(scanner.isDelim(','));
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:137: error: isDelim(char) has private access in StringScanner
        assertTrue(scanner.isDelim(' '));
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:138: error: isDelim(char) has private access in StringScanner
        assertFalse(scanner.isDelim('a'));
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerIsDelimGeneratedTest.java:139: error: isDelim(char) has private access in StringScanner
        assertFalse(scanner.isDelim(','));
                           ^
19 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerScanGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeInitGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerCloneGeneratedTest.java
Note: /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerCloneGeneratedTest.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/MathTreeSolveGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerAddSpecialCharGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:37: error: cannot find symbol
        assertTrue(scanner.isSkipWhitespace(), "skipWhitespace flag should be true after calling skipWhitespace()");
                          ^
  symbol:   method isSkipWhitespace()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/nl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:49: error: cannot find symbol
        assertTrue(scanner.isSkipWhitespace(), "skipWhitespace flag should remain true on subsequent calls");
                          ^
  symbol:   method isSkipWhitespace()
  location: variable scanner of type StringScanner
2 errors

$ java -jar /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/test --scan-classpath --reports-dir /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/nl/reports

Thanks for using JUnit! Support its development at https://junit.org/sponsoring

Invalid: Missing operator between 3 and 4
Invalid: Unknown expression "sin"
Invalid: Unknown expression "invalidFunc"
Invalid: Unknown expression "sin"
Invalid: Unknown expression "cos"
Invalid: Unknown expression "tan"
Invalid: Unknown expression "log"
Invalid: Unknown expression "sqrt"
Invalid: Missing "("
Invalid: Empty parenthesis
Invalid: Missing ")"
Invalid: Unknown expression
Invalid: Missing value between two operators
Invalid: Unknown expression "unknownFunction"
Invalid: Missing ")"
Invalid: Unknown expression "1.4E"
Invalid: Missing value between two operators
Invalid: Unknown expression "2"
Invalid: Unknown expression "2"
Invalid: Missing "("
Invalid: Empty parenthesis
Invalid: Empty parenthesis
Invalid: Unknown expression "42"
Invalid: Unknown expression "2"
Invalid: Missing ")"
Invalid: Unknown expression "2"
Invalid: Unknown expression "2"
Invalid: Unknown expression "2"
Invalid: Unknown expression "2"
Invalid: Unknown expression "invalid"
Invalid: Missing "("
Invalid: Unknown expression "2"
[36m╷[0m
[36m├─[0m [36mJUnit Jupiter[0m [32m✔[0m
[36m│  ├─[0m [36mIntToStringGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_MaxIntNoParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_MinIntNoParens()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_ParameterizedNoParens(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 100[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] -100[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] 2147483647[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[7] -2147483648[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_ZeroValueNoParens()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_ParameterizedWithParens(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 100[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] -100[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] 2147483647[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[7] -2147483648[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_PositiveValueWithParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_MinIntWithParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_MaxIntWithParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_PositiveValueNoParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_NegativeValueNoParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_ZeroWithParens()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_toString_NegativeValueWithParens()[0m [32m✔[0m
[36m│  ├─[0m [36mSubCloneGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_isIdempotent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withFloatingPointValues()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_preservesLeftNodeValue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_preservesRightNodeValue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withNullLeftNode()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_clone_withExtremeIntegerValues(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] -2147483648[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 1[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[5] 2147483647[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withBothNodesNull()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withNullRightNode()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_clone_createsNewInstance()[0m [32m✔[0m
[36m│  ├─[0m [36mCalcAppMainGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_main_withInvalidExpression_initFails_noOutput()[0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  ├─[0m [36mtest_main_withBoundaryNumericsAsArgs_succeeds(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[1] 0[0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  │  ├─[0m [31m[2] -1[0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  │  ├─[0m [31m[3] 1.5[0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  │  ├─[0m [31m[4] 1e10[0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  │  └─[0m [31m[5] (-5)[0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  ├─[0m [31mtest_main_withNullArgument_doesNotCrash()[0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  ├─[0m [31mtest_main_withValidArgument_returnsResult()[0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  ├─[0m [31mtest_main_withBlankArgumentFromConsole_readsUntilNonBlankAndReturnsResult()[0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  ├─[0m [36mtest_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[1] [0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  │  ├─[0m [31m[2]  [0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  │  └─[0m [31m[3]  [0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  │  └─[0m [31mtest_main_withNoArgsAndImmediateEOFOnStdin_throwsException()[0m [31m✘[0m [31mCan not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub[0m
[36m│  ├─[0m [36mStringScannerAddSpecialCharGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_AddSpecialChar_DuplicateCharacters()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_AddSpecialChar_VariedCommonSpecialChars(char)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] +[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] =[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] _[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] #[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] $[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[7] %[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[8] ^[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[9] &[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[10] *[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_AddSpecialChar_MultipleCharacters()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_AddSpecialChar_EmptyArray()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_AddSpecialChar_SpecialAsciiValues(char)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] .[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] .[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[3] ÿ[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_AddSpecialChar_SingleCharacter()[0m [32m✔[0m
[36m│  ├─[0m [36mIntCalculateGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_positiveOne()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_calculate_normalValues(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 42[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] 2147483647[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[6] -2147483648[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_maxInteger()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_negativeOne()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_minInteger()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_calculate_zero()[0m [32m✔[0m
[36m│  ├─[0m [36mPowCalculateGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_large_base_small_exponent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_small_base_large_exponent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_zero_base_positive_exponent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_negative_base_odd_exponent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_positive_base_negative_exponent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_positive_base_positive_integer_exponent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_one_base_any_exponent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_zero_base_negative_exponent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_base_negative_one_exponent_infinity()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_any_base_zero_exponent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_zero_base_zero_exponent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_base_less_than_neg_one_exponent_infinity()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_calculate_parametrized(double, double, double)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 2.0, 3.0, 8.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -2.0, 2.0, 4.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] -2.0, 3.0, -8.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 0.0, 5.0, 0.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] 1.0, 100.0, 1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] 999.0, 0.0, 1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[7] 2.0, -2.0, 0.25[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[8] 4.0, 0.5, 2.0[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_negative_base_negative_exponent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_negative_base_even_exponent()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_calculate_fractional_exponent()[0m [32m✔[0m
[36m│  ├─[0m [36mExpression Clone Tests[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_modificationOnClone_doesNotAffectOriginal[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_normalBehavior_returnsNewInstanceWithSameValues[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withMinIntValue_clonesSuccessfully[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withNegativeValue_clonesSuccessfully[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withMaxIntValue_clonesSuccessfully[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withZeroValue_clonesSuccessfully[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_clone_calledTwice_producesIndependentInstances[0m [32m✔[0m
[36m│  ├─[0m [36mFactory Clone Tests[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_idempotent_property[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_returns_correct_type[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_throws_exception_when_super_clone_fails[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_clone_normal_success[0m [32m✔[0m
[36m│  ├─[0m [36mMathTreeInitGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_Init_NegativeNumber_ReturnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_Init_ConsecutiveNumbersNoOperator_ReturnsFalse()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_Init_WhitespaceOnly_ReturnsFalse()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_Init_IntegerMinValue_ReturnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_Init_ComplexValidExpression_ReturnsTrue()[0m [31m✘[0m [31m复杂但有效的表达式应成功初始化 ==> expected: <true> but was: <false>[0m
[36m│  │  ├─[0m [34mtest_Init_InvalidFunctionName_ReturnsFalse()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_Init_Zero_ReturnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_Init_VeryLargeNumber_ReturnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_Init_IntegerMaxValue_ReturnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_Init_ValidExpression_ReturnsTrue(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 3 + 4 * 2 / ( 1 - 5 )[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[2] sin(0)[0m [31m✘[0m [31m初始化有效表达式应成功: sin(0) ==> expected: <true> but was: <false>[0m
[36m│  │  │  ├─[0m [31m[3] cos(3.14159)[0m [31m✘[0m [31m初始化有效表达式应成功: cos(3.14159) ==> expected: <true> but was: <false>[0m
[36m│  │  │  ├─[0m [31m[4] tan(0.785)[0m [31m✘[0m [31m初始化有效表达式应成功: tan(0.785) ==> expected: <true> but was: <false>[0m
[36m│  │  │  ├─[0m [31m[5] log(10)[0m [31m✘[0m [31m初始化有效表达式应成功: log(10) ==> expected: <true> but was: <false>[0m
[36m│  │  │  └─[0m [31m[6] sqrt(16)[0m [31m✘[0m [31m初始化有效表达式应成功: sqrt(16) ==> expected: <true> but was: <false>[0m
[36m│  │  ├─[0m [34mtest_Init_ExpressionWithMismatchedParentheses_ReturnsFalse()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_Init_EmptyString_ReturnsFalse()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_Init_RepeatedInitOnSameInstance_DoesNotInterfere()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_Init_InvalidExpression_ReturnsFalse(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2]  [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] ()[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] ( 3 + 4[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] 3 ++ 4[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] 3 + / 4[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[7] unknownFunction(5)[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[8] 3 + ( 4 * 5[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_Init_SingleNumber_ReturnsTrue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_Init_DivisionByZeroInStructure_ReturnsTrueButEvaluationMayFail()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_Init_ExtremeFloatValues_ReturnsTrue()[0m [31m✘[0m [31m接近Float.MIN_VALUE的值应能处理 ==> expected: <true> but was: <false>[0m
[36m│  │  ├─[0m [34mtest_Init_NullInput_ThrowsException()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_Init_MultipleOperatorsWithoutOperands_ReturnsFalse()[0m [32m✔[0m
[36m│  ├─[0m [36mOperatorGetLeftNodeGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_getLeftNode_multipleCalls_returnSameReference()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_getLeftNode_whenLeftNodeHasSpecialStringValue_returnsCorrectInstance()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_getLeftNode_whenLeftNodeIsNonNull_returnsSameInstance()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_getLeftNode_whenLeftNodeIsNull_returnsNull()[0m [32m✔[0m
[36m│  ├─[0m [36mOperatorSetRightNodeGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_setRightNode_multipleTimes_overwritesPreviousValue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_setRightNode_withNonNullExpression_setsNodeCorrectly()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_setRightNode_onNewOperator_rightNodeIsInitiallyNull()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_setRightNode_withNullExpression_setsNodeToNull()[0m [32m✔[0m
[36m│  ├─[0m [36mAddCloneGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_normalCase_createsDeepCopy()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_whenRightNodeNotCloneable_throwsCloneNotSupportedException()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_clone_withVariousExpressionValues_performsDeepCopy(Expression, Expression)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] mathNode.AddCloneGeneratedTest$Expression@0, mathNode.AddCloneGeneratedTest$...[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] mathNode.AddCloneGeneratedTest$Expression@ffffffff, mathNode.AddCloneGenerat...[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] mathNode.AddCloneGeneratedTest$Expression@7fffffff, mathNode.AddCloneGenerat...[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] mathNode.AddCloneGeneratedTest$Expression@80100000, mathNode.AddCloneGenerat...[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[5] mathNode.AddCloneGeneratedTest$Expression@364492, mathNode.AddCloneGenerated...[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_whenBothNodesNotCloneable_throwsCloneNotSupportedException()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_whenLeftNodeNotCloneable_throwsCloneNotSupportedException()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withNullRightNode_throwsNullPointerExceptionDuringClone()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withNullLeftNode_throwsNullPointerExceptionDuringClone()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_clone_withBothNodesNull_throwsNullPointerExceptionDuringClone()[0m [32m✔[0m
[36m│  ├─[0m [36mDecToStringGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_negativeFraction()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_zeroValues(double)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0.0[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[2] -0.0[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_veryLargeNumber()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_infinity()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_fractionalPartOnly()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_verySmallNumber()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_integerLikeDecimal()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_positiveOne()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_nan()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_minFiniteDouble()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_negativeOne()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_negativeInfinity()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_withoutParens_returnsRawValue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_smallestPositiveNormal()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_smallestPositiveSubnormal()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_maxFiniteDouble()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_toString_withParens_returnsParenthesizedValue()[0m [32m✔[0m
[36m│  ├─[0m [36mStringScannerCloneGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_returnsDifferentInstance()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_modifyingCloneDoesNotAffectOriginal()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_whenSuperCloneThrowsException_propagatesException()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_returnsNonNullInstance()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withPopulatedCollections_createsIndependentCopiesWithSameContent()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_clone_withVariousDelimiterCounts(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 10[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[4] 50[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_clone_withVariousTokenCounts(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 10[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[4] 100[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_modifyingOriginalDoesNotAffectClone()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withEmptyCollections_createsIndependentEmptyCopies()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_clone_returnsCorrectType()[0m [32m✔[0m
[36m│  ├─[0m [36mStringScannerScanGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_scan_mixedContent_correctTokenization()[0m [31m✘[0m [31mexpected: <5> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_scan_onlyDelimiters_returnsEmptyTokens()[0m [31m✘[0m [31mexpected: <true> but was: <false>[0m
[36m│  │  ├─[0m [31mtest_scan_startsWithSpecialChar_handledCorrectly()[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_scan_withSpecialChar_splitsIntoSeparateTokens()[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_scan_negativeNumberWithMinus_signHandledAsSeparateToken()[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  ├─[0m [34mtest_scan_singleCharacter_returnsSingleToken()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_scan_emptyString_returnsEmptyList()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_scan_numericString_treatedAsSingleToken()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_scan_multipleCharactersNoDelim_returnsOneToken()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_scan_allSpecialChars_eachCharIsToken()[0m [31m✘[0m [31mexpected: <4> but was: <1>[0m
[36m│  │  ├─[0m [34mtest_scan_returnsNewLinkedListInstance()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_scan_veryLongString_handledWithoutError()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_scan_endsWithSpecialChar_handledCorrectly()[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  ├─[0m [36mtest_scan_withDelimiters_splitsTokens(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[1] a b[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[2] a b[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[3] a b[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[4]  a [0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  │  └─[0m [31m[5] a  b[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_scan_variousWhitespaceChars_handledAsDelimiters()[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  └─[0m [31mtest_scan_consecutiveSpecialChars_eachAsSeparateToken()[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  ├─[0m [36mMathTreeSolveGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_returnsValue_whenRootNodeReturnsDouble()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_returnsVeryLargeDouble_whenRootNodeReturnsVeryLargeDouble()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_returnsVerySmallPositiveDouble_whenRootNodeReturnsVerySmallDouble()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_returnsNegativeValue_whenRootNodeReturnsNegative()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_returnsNull_whenRootNodeIsNull()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_returnsMaxInteger_whenRootNodeReturnsMaxInteger()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_returnsMinInteger_whenRootNodeReturnsMinInteger()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_propagatesException_whenRootNodeThrows()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_solve_handlesSpecialFloatingPointValues(double)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] NaN[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] Infinity[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[3] -Infinity[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_solve_returnsValue_whenRootNodeReturnsInteger()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_solve_returnsZero_whenRootNodeReturnsZero()[0m [32m✔[0m
[36m│  ├─[0m [36mOperatorSetParensGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_setParens_transitionFromFalseToTrue_setsPrecedenceToZero()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_setParens_false_setsParenthesisToFalseAndPrecedenceUnchanged()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_setParens_transitionFromTrueToFalse_restoresDefaultPrecedence()[0m [31m✘[0m [31mexpected: <1> but was: <0>[0m
[36m│  │  ├─[0m [34mtest_setParens_true_multipleTimes_isIdempotent()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_setParens_true_setsParenthesisToTrueAndPrecedenceToZero()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_setParens_false_multipleTimes_isIdempotent()[0m [32m✔[0m
[36m│  ├─[0m [36mOperatorCheckTreeGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_checkTree_leftChildNull_returnsFalse()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_checkTree_rightChildNull_returnsFalse()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_checkTree_bothChildrenNull_returnsFalse()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_checkTree_allNodesValid_returnsTrue()[0m [31m✘[0m [31mexpected: <true> but was: <false>[0m
[36m│  │  ├─[0m [34mtest_checkTree_validChildrenButRightInvalidGrandchild_returnsFalse()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_checkTree_childrenWithNullLeaves_returnsFalse()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_checkTree_validChildrenButLeftInvalidGrandchild_returnsFalse()[0m [32m✔[0m
[36m│  ├─[0m [36mMathTreeCleanStrListGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_doubleNegativeAtStart()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_cleanStrList_negativeHandling(String, String[])[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] -5, [-5][0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] --5, [-, -5][0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] ---5, [-, -, -5][0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 5-3, [5, -, 3][0m [32m✔[0m
[36m│  │  │  └─[0m [34m[5] 5--3, [5, -, -3][0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_noImplicitMultiplicationAfterCloseParenBeforeOperator()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_doubleNegativeInMiddle()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_implicitMultiplicationBeforeOpenParen()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_implicitMultiplicationAfterCloseParen()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_singleElementNoNegative()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_cleanStrList_complexExpressionWithNegativesAndParentheses()[0m [31m✘[0m [31mexpected: <8> but was: <7>[0m
[36m│  │  ├─[0m [36mtest_cleanStrList_implicitMultiplication(String[], String[])[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] [2, (, 3, )], [2, *, (, 3, )][0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] [(, 3, ), 2], [(, 3, ), *, 2][0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] [x, (, y, )], [x, *, (, y, )][0m [32m✔[0m
[36m│  │  │  └─[0m [34m[4] [(, x, ), y], [(, x, ), *, y][0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_noImplicitMultiplicationBeforeOpenParenAfterOperator()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_negativeAtStart()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_emptyList()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_cleanStrList_negativeInMiddle()[0m [32m✔[0m
[36m│  ├─[0m [36mMathTreeBuildTreeGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_BuildTree_ExpressionStartingWithOperator_ReturnsNull()[0m [31m✘[0m [31mexpected: <null> but was: <mathTree.MathTreeBuildTreeGeneratedTest$mathNode$Expression@2ea6e30c>[0m
[36m│  │  ├─[0m [31mtest_BuildTree_ExpressionWithMultipleOperators_ReturnsValidNode()[0m [31m✘[0m [31mexpected: not <null>[0m
[36m│  │  ├─[0m [34mtest_BuildTree_ParenthesesWithValidContent_ReturnsValidNodeWithParensSet()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_BuildTree_EmptyList_ReturnsNull_WhenNotInParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_BuildTree_ExpressionWithUnmatchedOpeningParenthesis_ReturnsNull()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_BuildTree_UnmatchedClosingParenthesis_ReturnsNull()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_BuildTree_EmptyParentheses_ReturnsNull()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_BuildTree_ExpressionWithOnlyParentheses_ReturnsNull()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_BuildTree_SingleNumber_ReturnsValidNode()[0m [31m✘[0m [31mexpected: not <null>[0m
[36m│  │  ├─[0m [34mtest_BuildTree_NestedParentheses_ReturnsValidNode()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_BuildTree_ComplexExpression_ReturnsValidNode()[0m [31m✘[0m [31mexpected: not <null>[0m
[36m│  │  ├─[0m [31mtest_BuildTree_ExpressionEndingWithOperator_ReturnsNull()[0m [31m✘[0m [31mexpected: <null> but was: <mathTree.MathTreeBuildTreeGeneratedTest$mathNode$Expression@7803bfd>[0m
[36m│  │  ├─[0m [34mtest_BuildTree_MissingClosingParenthesis_ReturnsNull()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_BuildTree_ValidOperator_ReturnsValidNode(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[1] +[0m [31m✘[0m [31mexpected: not <null>[0m
[36m│  │  │  ├─[0m [31m[2] -[0m [31m✘[0m [31mexpected: not <null>[0m
[36m│  │  │  ├─[0m [31m[3] *[0m [31m✘[0m [31mexpected: not <null>[0m
[36m│  │  │  └─[0m [31m[4] /[0m [31m✘[0m [31mexpected: not <null>[0m
[36m│  │  ├─[0m [34mtest_BuildTree_InvalidToken_ReturnsNull()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_BuildTree_EmptyList_ReturnsNull_WhenInParens()[0m [32m✔[0m
[36m│  │  └─[0m [31mtest_BuildTree_NormalExpression_ReturnsValidNode()[0m [31m✘[0m [31mexpected: not <null>[0m
[36m│  ├─[0m [36mIntCloneGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withMinIntValue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_returnsNewInstanceWithSameValue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withNegativeValue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_withMaxIntValue()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_clone_parameterized(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 100[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] -100[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] 2147483647[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[6] -2147483648[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_clone_throwsCloneNotSupportedException_whenObjectNotCloneable()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_clone_withZeroValue()[0m [32m✔[0m
[36m│  ├─[0m [36mExpressionIsParensGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_isParens_whenParenthesisIsTrue_returnsTrue()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_isParens_whenParenthesisIsFalse_returnsFalse()[0m [32m✔[0m
[36m│  ├─[0m [36mOperatorGetPrecedenceGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_getPrecedence_boundaryAndExtremeValues(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] -2147483648[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 2147483647[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 100[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[4] -100[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_getPrecedence_positiveValue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_getPrecedence_negativeValue()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_getPrecedence_zeroValue()[0m [32m✔[0m
[36m│  └─[0m [36mOperatorGetRightNodeGeneratedTest[0m [32m✔[0m
[36m│     ├─[0m [34mtest_getRightNode_whenRightNodeIsNull_returnsNull()[0m [32m✔[0m
[36m│     └─[0m [34mtest_getRightNode_whenRightNodeIsNonNull_returnsSameInstance()[0m [32m✔[0m
[36m├─[0m [36mJUnit Vintage[0m [32m✔[0m
[36m└─[0m [36mJUnit Platform Suite[0m [32m✔[0m

Failures (47):
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withInvalidExpression_initFails_noOutput()
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withInvalidExpression_initFails_noOutput', methodParameterTypes = '']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withInvalidExpression_initFails_noOutput(CalcAppMainGeneratedTest.java:101)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withBoundaryNumericsAsArgs_succeeds(String):[1] 0
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withBoundaryNumericsAsArgs_succeeds', methodParameterTypes = 'java.lang.String']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withBoundaryNumericsAsArgs_succeeds(CalcAppMainGeneratedTest.java:116)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withBoundaryNumericsAsArgs_succeeds(String):[2] -1
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withBoundaryNumericsAsArgs_succeeds', methodParameterTypes = 'java.lang.String']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withBoundaryNumericsAsArgs_succeeds(CalcAppMainGeneratedTest.java:116)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withBoundaryNumericsAsArgs_succeeds(String):[3] 1.5
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withBoundaryNumericsAsArgs_succeeds', methodParameterTypes = 'java.lang.String']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withBoundaryNumericsAsArgs_succeeds(CalcAppMainGeneratedTest.java:116)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withBoundaryNumericsAsArgs_succeeds(String):[4] 1e10
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withBoundaryNumericsAsArgs_succeeds', methodParameterTypes = 'java.lang.String']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withBoundaryNumericsAsArgs_succeeds(CalcAppMainGeneratedTest.java:116)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withBoundaryNumericsAsArgs_succeeds(String):[5] (-5)
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withBoundaryNumericsAsArgs_succeeds', methodParameterTypes = 'java.lang.String']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withBoundaryNumericsAsArgs_succeeds(CalcAppMainGeneratedTest.java:116)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withNullArgument_doesNotCrash()
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withNullArgument_doesNotCrash', methodParameterTypes = '']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withNullArgument_doesNotCrash(CalcAppMainGeneratedTest.java:94)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withValidArgument_returnsResult()
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withValidArgument_returnsResult', methodParameterTypes = '']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withValidArgument_returnsResult(CalcAppMainGeneratedTest.java:69)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withBlankArgumentFromConsole_readsUntilNonBlankAndReturnsResult()
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withBlankArgumentFromConsole_readsUntilNonBlankAndReturnsResult', methodParameterTypes = '']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withBlankArgumentFromConsole_readsUntilNonBlankAndReturnsResult(CalcAppMainGeneratedTest.java:77)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(String):[1] 
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully', methodParameterTypes = 'java.lang.String']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(CalcAppMainGeneratedTest.java:86)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(String):[2]  
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully', methodParameterTypes = 'java.lang.String']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(CalcAppMainGeneratedTest.java:86)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(String):[3] 	
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully', methodParameterTypes = 'java.lang.String']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withOnlyBlankInputsFromConsole_throwsOrHandlesGracefully(CalcAppMainGeneratedTest.java:86)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:CalcAppMainGeneratedTest:test_main_withNoArgsAndImmediateEOFOnStdin_throwsException()
    MethodSource [className = 'mathTree.CalcAppMainGeneratedTest', methodName = 'test_main_withNoArgsAndImmediateEOFOnStdin_throwsException', methodParameterTypes = '']
    => java.lang.IllegalArgumentException: Can not set static mathTree.MathTree field mathTree.CalcApp.calcTree to mathTree.CalcAppMainGeneratedTest$MathTreeStub
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:228)
       java.base/jdk.internal.reflect.FieldAccessorImpl.throwSetIllegalArgumentException(FieldAccessorImpl.java:232)
       java.base/jdk.internal.reflect.MethodHandleObjectFieldAccessorImpl.set(MethodHandleObjectFieldAccessorImpl.java:115)
       java.base/java.lang.reflect.Field.set(Field.java:836)
       mathTree.CalcAppMainGeneratedTest.injectMathTreeStub(CalcAppMainGeneratedTest.java:64)
       mathTree.CalcAppMainGeneratedTest.test_main_withNoArgsAndImmediateEOFOnStdin_throwsException(CalcAppMainGeneratedTest.java:108)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeInitGeneratedTest:test_Init_ComplexValidExpression_ReturnsTrue()
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_Init_ComplexValidExpression_ReturnsTrue', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: 复杂但有效的表达式应成功初始化 ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_Init_ComplexValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:96)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeInitGeneratedTest:test_Init_ValidExpression_ReturnsTrue(String):[2] sin(0)
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_Init_ValidExpression_ReturnsTrue', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: 初始化有效表达式应成功: sin(0) ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_Init_ValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:23)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:MathTreeInitGeneratedTest:test_Init_ValidExpression_ReturnsTrue(String):[3] cos(3.14159)
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_Init_ValidExpression_ReturnsTrue', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: 初始化有效表达式应成功: cos(3.14159) ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_Init_ValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:23)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:MathTreeInitGeneratedTest:test_Init_ValidExpression_ReturnsTrue(String):[4] tan(0.785)
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_Init_ValidExpression_ReturnsTrue', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: 初始化有效表达式应成功: tan(0.785) ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_Init_ValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:23)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:MathTreeInitGeneratedTest:test_Init_ValidExpression_ReturnsTrue(String):[5] log(10)
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_Init_ValidExpression_ReturnsTrue', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: 初始化有效表达式应成功: log(10) ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_Init_ValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:23)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:MathTreeInitGeneratedTest:test_Init_ValidExpression_ReturnsTrue(String):[6] sqrt(16)
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_Init_ValidExpression_ReturnsTrue', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: 初始化有效表达式应成功: sqrt(16) ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_Init_ValidExpression_ReturnsTrue(MathTreeInitGeneratedTest.java:23)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:MathTreeInitGeneratedTest:test_Init_ExtremeFloatValues_ReturnsTrue()
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_Init_ExtremeFloatValues_ReturnsTrue', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: 接近Float.MIN_VALUE的值应能处理 ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_Init_ExtremeFloatValues_ReturnsTrue(MathTreeInitGeneratedTest.java:128)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_mixedContent_correctTokenization()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_mixedContent_correctTokenization', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_mixedContent_correctTokenization(StringScannerScanGeneratedTest.java:90)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_onlyDelimiters_returnsEmptyTokens()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_onlyDelimiters_returnsEmptyTokens', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
       mathTree.StringScannerScanGeneratedTest.test_scan_onlyDelimiters_returnsEmptyTokens(StringScannerScanGeneratedTest.java:36)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_startsWithSpecialChar_handledCorrectly()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_startsWithSpecialChar_handledCorrectly', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_startsWithSpecialChar_handledCorrectly(StringScannerScanGeneratedTest.java:102)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_withSpecialChar_splitsIntoSeparateTokens()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_withSpecialChar_splitsIntoSeparateTokens', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_withSpecialChar_splitsIntoSeparateTokens(StringScannerScanGeneratedTest.java:71)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_negativeNumberWithMinus_signHandledAsSeparateToken()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_negativeNumberWithMinus_signHandledAsSeparateToken', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_negativeNumberWithMinus_signHandledAsSeparateToken(StringScannerScanGeneratedTest.java:151)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_allSpecialChars_eachCharIsToken()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_allSpecialChars_eachCharIsToken', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <4> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_allSpecialChars_eachCharIsToken(StringScannerScanGeneratedTest.java:160)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_endsWithSpecialChar_handledCorrectly()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_endsWithSpecialChar_handledCorrectly', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_endsWithSpecialChar_handledCorrectly(StringScannerScanGeneratedTest.java:111)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_withDelimiters_splitsTokens(String):[1] a b
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_withDelimiters_splitsTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_withDelimiters_splitsTokens(StringScannerScanGeneratedTest.java:60)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_withDelimiters_splitsTokens(String):[2] a	b
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_withDelimiters_splitsTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_withDelimiters_splitsTokens(StringScannerScanGeneratedTest.java:60)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_withDelimiters_splitsTokens(String):[3] a
b
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_withDelimiters_splitsTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_withDelimiters_splitsTokens(StringScannerScanGeneratedTest.java:60)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_withDelimiters_splitsTokens(String):[4]  a 
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_withDelimiters_splitsTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_withDelimiters_splitsTokens(StringScannerScanGeneratedTest.java:60)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_withDelimiters_splitsTokens(String):[5] a  b
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_withDelimiters_splitsTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_withDelimiters_splitsTokens(StringScannerScanGeneratedTest.java:60)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousWhitespaceChars_handledAsDelimiters()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousWhitespaceChars_handledAsDelimiters', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousWhitespaceChars_handledAsDelimiters(StringScannerScanGeneratedTest.java:131)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_consecutiveSpecialChars_eachAsSeparateToken()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_consecutiveSpecialChars_eachAsSeparateToken', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_consecutiveSpecialChars_eachAsSeparateToken(StringScannerScanGeneratedTest.java:81)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:OperatorSetParensGeneratedTest:test_setParens_transitionFromTrueToFalse_restoresDefaultPrecedence()
    MethodSource [className = 'mathNode.OperatorSetParensGeneratedTest', methodName = 'test_setParens_transitionFromTrueToFalse_restoresDefaultPrecedence', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <1> but was: <0>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathNode.OperatorSetParensGeneratedTest.test_setParens_transitionFromTrueToFalse_restoresDefaultPrecedence(OperatorSetParensGeneratedTest.java:71)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:OperatorCheckTreeGeneratedTest:test_checkTree_allNodesValid_returnsTrue()
    MethodSource [className = 'mathNode.OperatorCheckTreeGeneratedTest', methodName = 'test_checkTree_allNodesValid_returnsTrue', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
       mathNode.OperatorCheckTreeGeneratedTest.test_checkTree_allNodesValid_returnsTrue(OperatorCheckTreeGeneratedTest.java:108)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_complexExpressionWithNegativesAndParentheses()
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_complexExpressionWithNegativesAndParentheses', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <8> but was: <7>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_complexExpressionWithNegativesAndParentheses(MathTreeCleanStrListGeneratedTest.java:171)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeBuildTreeGeneratedTest:test_BuildTree_ExpressionStartingWithOperator_ReturnsNull()
    MethodSource [className = 'mathTree.MathTreeBuildTreeGeneratedTest', methodName = 'test_BuildTree_ExpressionStartingWithOperator_ReturnsNull', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <null> but was: <mathTree.MathTreeBuildTreeGeneratedTest$mathNode$Expression@2ea6e30c>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertNull.failNotNull(AssertNull.java:50)
       org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:35)
       org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:30)
       org.junit.jupiter.api.Assertions.assertNull(Assertions.java:279)
       mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ExpressionStartingWithOperator_ReturnsNull(MathTreeBuildTreeGeneratedTest.java:267)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeBuildTreeGeneratedTest:test_BuildTree_ExpressionWithMultipleOperators_ReturnsValidNode()
    MethodSource [className = 'mathTree.MathTreeBuildTreeGeneratedTest', methodName = 'test_BuildTree_ExpressionWithMultipleOperators_ReturnsValidNode', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: not <null>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
       org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
       mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ExpressionWithMultipleOperators_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:257)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeBuildTreeGeneratedTest:test_BuildTree_SingleNumber_ReturnsValidNode()
    MethodSource [className = 'mathTree.MathTreeBuildTreeGeneratedTest', methodName = 'test_BuildTree_SingleNumber_ReturnsValidNode', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: not <null>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
       org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
       mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_SingleNumber_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:161)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeBuildTreeGeneratedTest:test_BuildTree_ComplexExpression_ReturnsValidNode()
    MethodSource [className = 'mathTree.MathTreeBuildTreeGeneratedTest', methodName = 'test_BuildTree_ComplexExpression_ReturnsValidNode', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: not <null>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
       org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
       mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ComplexExpression_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:244)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeBuildTreeGeneratedTest:test_BuildTree_ExpressionEndingWithOperator_ReturnsNull()
    MethodSource [className = 'mathTree.MathTreeBuildTreeGeneratedTest', methodName = 'test_BuildTree_ExpressionEndingWithOperator_ReturnsNull', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <null> but was: <mathTree.MathTreeBuildTreeGeneratedTest$mathNode$Expression@7803bfd>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertNull.failNotNull(AssertNull.java:50)
       org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:35)
       org.junit.jupiter.api.AssertNull.assertNull(AssertNull.java:30)
       org.junit.jupiter.api.Assertions.assertNull(Assertions.java:279)
       mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ExpressionEndingWithOperator_ReturnsNull(MathTreeBuildTreeGeneratedTest.java:277)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeBuildTreeGeneratedTest:test_BuildTree_ValidOperator_ReturnsValidNode(String):[1] +
    MethodSource [className = 'mathTree.MathTreeBuildTreeGeneratedTest', methodName = 'test_BuildTree_ValidOperator_ReturnsValidNode', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: not <null>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
       org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
       mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ValidOperator_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:215)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:MathTreeBuildTreeGeneratedTest:test_BuildTree_ValidOperator_ReturnsValidNode(String):[2] -
    MethodSource [className = 'mathTree.MathTreeBuildTreeGeneratedTest', methodName = 'test_BuildTree_ValidOperator_ReturnsValidNode', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: not <null>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
       org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
       mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ValidOperator_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:215)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:MathTreeBuildTreeGeneratedTest:test_BuildTree_ValidOperator_ReturnsValidNode(String):[3] *
    MethodSource [className = 'mathTree.MathTreeBuildTreeGeneratedTest', methodName = 'test_BuildTree_ValidOperator_ReturnsValidNode', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: not <null>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
       org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
       mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ValidOperator_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:215)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:MathTreeBuildTreeGeneratedTest:test_BuildTree_ValidOperator_ReturnsValidNode(String):[4] /
    MethodSource [className = 'mathTree.MathTreeBuildTreeGeneratedTest', methodName = 'test_BuildTree_ValidOperator_ReturnsValidNode', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: not <null>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
       org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
       mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_ValidOperator_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:215)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:MathTreeBuildTreeGeneratedTest:test_BuildTree_NormalExpression_ReturnsValidNode()
    MethodSource [className = 'mathTree.MathTreeBuildTreeGeneratedTest', methodName = 'test_BuildTree_NormalExpression_ReturnsValidNode', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: not <null>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:152)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertNotNull.failNull(AssertNotNull.java:49)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:35)
       org.junit.jupiter.api.AssertNotNull.assertNotNull(AssertNotNull.java:30)
       org.junit.jupiter.api.Assertions.assertNotNull(Assertions.java:304)
       mathTree.MathTreeBuildTreeGeneratedTest.test_BuildTree_NormalExpression_ReturnsValidNode(MathTreeBuildTreeGeneratedTest.java:126)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

Test run finished after 167 ms
[        49 containers found      ]
[         0 containers skipped    ]
[        49 containers started    ]
[         0 containers aborted    ]
[        49 containers successful ]
[         0 containers failed     ]
[       306 tests found           ]
[         0 tests skipped         ]
[       306 tests started         ]
[         0 tests aborted         ]
[       259 tests successful      ]
[        47 tests failed          ]


WARNING: Delegated to the 'execute' command.
         This behaviour has been deprecated and will be removed in a future release.
         Please use the 'execute' command directly.

