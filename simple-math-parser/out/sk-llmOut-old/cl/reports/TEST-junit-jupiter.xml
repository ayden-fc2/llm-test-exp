<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="JUnit Jupiter" tests="221" skipped="0" failures="58" errors="0" time="0.112" hostname="shiqixuans-MacBook-Air.local" timestamp="2025-10-03T11:37:52">
<properties>
<property name="apple.awt.application.name" value="ConsoleLauncher"/>
<property name="file.encoding" value="UTF-8"/>
<property name="file.separator" value="/"/>
<property name="ftp.nonProxyHosts" value="127.0.0.1|192.168.0.0/16|*.192.168.0.0/16|10.0.0.0/8|*.10.0.0.0/8|172.16.0.0/12|*.172.16.0.0/12|172.29.0.0/16|*.172.29.0.0/16|localhost|*.localhost|local|*.local|crashlytics.com|*.crashlytics.com|&lt;local&gt;|*.&lt;local&gt;"/>
<property name="http.nonProxyHosts" value="127.0.0.1|192.168.0.0/16|*.192.168.0.0/16|10.0.0.0/8|*.10.0.0.0/8|172.16.0.0/12|*.172.16.0.0/12|172.29.0.0/16|*.172.29.0.0/16|localhost|*.localhost|local|*.local|crashlytics.com|*.crashlytics.com|&lt;local&gt;|*.&lt;local&gt;"/>
<property name="java.class.path" value="/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar"/>
<property name="java.class.version" value="65.0"/>
<property name="java.home" value="/opt/homebrew/Cellar/openjdk@21/21.0.7/libexec/openjdk.jdk/Contents/Home"/>
<property name="java.io.tmpdir" value="/var/folders/55/1ll2s_c15nz1vbqv9ypcngnm0000gn/T/"/>
<property name="java.library.path" value="/Users/shiqixuan/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
<property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
<property name="java.runtime.version" value="21.0.7"/>
<property name="java.specification.name" value="Java Platform API Specification"/>
<property name="java.specification.vendor" value="Oracle Corporation"/>
<property name="java.specification.version" value="21"/>
<property name="java.vendor" value="Homebrew"/>
<property name="java.vendor.url" value="https://github.com/Homebrew/homebrew-core/issues"/>
<property name="java.vendor.url.bug" value="https://github.com/Homebrew/homebrew-core/issues"/>
<property name="java.vendor.version" value="Homebrew"/>
<property name="java.version" value="21.0.7"/>
<property name="java.version.date" value="2025-04-15"/>
<property name="java.vm.compressedOopsMode" value="Zero based"/>
<property name="java.vm.info" value="mixed mode, sharing"/>
<property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
<property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
<property name="java.vm.specification.vendor" value="Oracle Corporation"/>
<property name="java.vm.specification.version" value="21"/>
<property name="java.vm.vendor" value="Homebrew"/>
<property name="java.vm.version" value="21.0.7"/>
<property name="jdk.debug" value="release"/>
<property name="line.separator" value="
"/>
<property name="native.encoding" value="UTF-8"/>
<property name="os.arch" value="aarch64"/>
<property name="os.name" value="Mac OS X"/>
<property name="os.version" value="15.6"/>
<property name="path.separator" value=":"/>
<property name="socksNonProxyHosts" value="127.0.0.1|192.168.0.0/16|*.192.168.0.0/16|10.0.0.0/8|*.10.0.0.0/8|172.16.0.0/12|*.172.16.0.0/12|172.29.0.0/16|*.172.29.0.0/16|localhost|*.localhost|local|*.local|crashlytics.com|*.crashlytics.com|&lt;local&gt;|*.&lt;local&gt;"/>
<property name="stderr.encoding" value="UTF-8"/>
<property name="stdout.encoding" value="UTF-8"/>
<property name="sun.arch.data.model" value="64"/>
<property name="sun.boot.library.path" value="/opt/homebrew/Cellar/openjdk@21/21.0.7/libexec/openjdk.jdk/Contents/Home/lib"/>
<property name="sun.cpu.endian" value="little"/>
<property name="sun.io.unicode.encoding" value="UnicodeBig"/>
<property name="sun.java.command" value="/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test --scan-classpath --reports-dir /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/reports"/>
<property name="sun.java.launcher" value="SUN_STANDARD"/>
<property name="sun.jnu.encoding" value="UTF-8"/>
<property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
<property name="user.country" value="CN"/>
<property name="user.dir" value="/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser"/>
<property name="user.home" value="/Users/shiqixuan"/>
<property name="user.language" value="en"/>
<property name="user.name" value="shiqixuan"/>
<property name="user.timezone" value="Asia/Shanghai"/>
</properties>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[12]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#12]
display-name: [12] %
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[11]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#11]
display-name: [11] $
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[10]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#10]
display-name: [10] #
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[16]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#16]
display-name: [16] )
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[15]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#15]
display-name: [15] (
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[14]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#14]
display-name: [14] *
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[13]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#13]
display-name: [13] ^
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_negativeAtStart_splitIntoMinusAndNumber()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;5&gt; but was: &lt;3&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <5> but was: <3>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_negativeAtStart_splitIntoMinusAndNumber(MathTreeCleanStrListGeneratedTest.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_negativeAtStart_splitIntoMinusAndNumber()]
display-name: test_cleanStrList_negativeAtStart_splitIntoMinusAndNumber()
]]></system-out>
</testcase>
<testcase name="test_buildNode_withVerySmallPositiveDouble()" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[method:test_buildNode_withVerySmallPositiveDouble()]
display-name: test_buildNode_withVerySmallPositiveDouble()
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[19]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#19]
display-name: [19] {
]]></system-out>
</testcase>
<testcase name="test_saveToken_withVeryLongString_addsTokenToList()" classname="mathTree.StringScannerSaveTokenGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerSaveTokenGeneratedTest]/[method:test_saveToken_withVeryLongString_addsTokenToList()]
display-name: test_saveToken_withVeryLongString_addsTokenToList()
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[18]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#18]
display-name: [18] ]
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[17]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#17]
display-name: [17] [
]]></system-out>
</testcase>
<testcase name="test_init_withMinIntegerValues()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_init_withMinIntegerValues()]
display-name: test_init_withMinIntegerValues()
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[23]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#23]
display-name: [23] =
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[22]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#22]
display-name: [22] >
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[21]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#21]
display-name: [21] <
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[20]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#20]
display-name: [20] }
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[27]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#27]
display-name: [27] \
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[26]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#26]
display-name: [26] /
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withMultipleUniqueCharacters()" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[method:test_addDelimiter_withMultipleUniqueCharacters()]
display-name: test_addDelimiter_withMultipleUniqueCharacters()
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[25]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#25]
display-name: [25] -
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[24]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#24]
display-name: [24] +
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_emptyList_noChange()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_emptyList_noChange()]
display-name: test_cleanStrList_emptyList_noChange()
]]></system-out>
</testcase>
<testcase name="test_calculate_returnsStoredValue_zero()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_calculate_returnsStoredValue_zero()]
display-name: test_calculate_returnsStoredValue_zero()
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withWhitespaceAndBracketCharacters(char)[2]" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[test-template:test_addDelimiter_withWhitespaceAndBracketCharacters(char)]/[test-template-invocation:#2]
display-name: [2] 	
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withWhitespaceAndBracketCharacters(char)[3]" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[test-template:test_addDelimiter_withWhitespaceAndBracketCharacters(char)]/[test-template-invocation:#3]
display-name: [3] 

]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withWhitespaceAndBracketCharacters(char)[1]" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[test-template:test_addDelimiter_withWhitespaceAndBracketCharacters(char)]/[test-template-invocation:#1]
display-name: [1]  
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withWhitespaceAndBracketCharacters(char)[6]" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[test-template:test_addDelimiter_withWhitespaceAndBracketCharacters(char)]/[test-template-invocation:#6]
display-name: [6] [
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withWhitespaceAndBracketCharacters(char)[7]" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[test-template:test_addDelimiter_withWhitespaceAndBracketCharacters(char)]/[test-template-invocation:#7]
display-name: [7] ]
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withWhitespaceAndBracketCharacters(char)[4]" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[test-template:test_addDelimiter_withWhitespaceAndBracketCharacters(char)]/[test-template-invocation:#4]
display-name: [4] (
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withWhitespaceAndBracketCharacters(char)[5]" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[test-template:test_addDelimiter_withWhitespaceAndBracketCharacters(char)]/[test-template-invocation:#5]
display-name: [5] )
]]></system-out>
</testcase>
<testcase name="test_init_withMaxIntegerValues()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_init_withMaxIntegerValues()]
display-name: test_init_withMaxIntegerValues()
]]></system-out>
</testcase>
<testcase name="test_toString_minIntWithoutParens_returnsMinIntString()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_minIntWithoutParens_returnsMinIntString()]
display-name: test_toString_minIntWithoutParens_returnsMinIntString()
]]></system-out>
</testcase>
<testcase name="test_scan_specialCharacters_returnsCorrectTokens()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;7&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <7> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_specialCharacters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:115)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_specialCharacters_returnsCorrectTokens()]
display-name: test_scan_specialCharacters_returnsCorrectTokens()
]]></system-out>
</testcase>
<testcase name="test_addSpecialChar_addsMultipleSpecialCharacters(char)[3]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_addSpecialChar_addsMultipleSpecialCharacters(char)]/[test-template-invocation:#3]
display-name: [3] *
]]></system-out>
</testcase>
<testcase name="test_addSpecialChar_addsMultipleSpecialCharacters(char)[4]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_addSpecialChar_addsMultipleSpecialCharacters(char)]/[test-template-invocation:#4]
display-name: [4] /
]]></system-out>
</testcase>
<testcase name="test_addSpecialChar_addsMultipleSpecialCharacters(char)[5]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_addSpecialChar_addsMultipleSpecialCharacters(char)]/[test-template-invocation:#5]
display-name: [5] -
]]></system-out>
</testcase>
<testcase name="test_buildNode_withVeryLargeDouble()" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[method:test_buildNode_withVeryLargeDouble()]
display-name: test_buildNode_withVeryLargeDouble()
]]></system-out>
</testcase>
<testcase name="test_addSpecialChar_addsMultipleSpecialCharacters(char)[6]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_addSpecialChar_addsMultipleSpecialCharacters(char)]/[test-template-invocation:#6]
display-name: [6] +
]]></system-out>
</testcase>
<testcase name="test_addSpecialChar_addsMultipleSpecialCharacters(char)[1]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_addSpecialChar_addsMultipleSpecialCharacters(char)]/[test-template-invocation:#1]
display-name: [1] (
]]></system-out>
</testcase>
<testcase name="test_init_withComplexExpression()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_init_withComplexExpression()]
display-name: test_init_withComplexExpression()
]]></system-out>
</testcase>
<testcase name="test_addSpecialChar_addsMultipleSpecialCharacters(char)[2]" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[test-template:test_addSpecialChar_addsMultipleSpecialCharacters(char)]/[test-template-invocation:#2]
display-name: [2] )
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withWhitespaceAndBracketCharacters(char)[8]" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[test-template:test_addDelimiter_withWhitespaceAndBracketCharacters(char)]/[test-template-invocation:#8]
display-name: [8] {
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withWhitespaceAndBracketCharacters(char)[9]" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[test-template:test_addDelimiter_withWhitespaceAndBracketCharacters(char)]/[test-template-invocation:#9]
display-name: [9] }
]]></system-out>
</testcase>
<testcase name="test_toString_positiveValueWithoutParens_returnsPlainString(int)[1]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_positiveValueWithoutParens_returnsPlainString(int)]/[test-template-invocation:#1]
display-name: [1] 1
]]></system-out>
</testcase>
<testcase name="test_toString_positiveValueWithoutParens_returnsPlainString(int)[2]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_positiveValueWithoutParens_returnsPlainString(int)]/[test-template-invocation:#2]
display-name: [2] 42
]]></system-out>
</testcase>
<testcase name="test_addSpecialChar_emptyArrayDoesNotChangeSet()" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[method:test_addSpecialChar_emptyArrayDoesNotChangeSet()]
display-name: test_addSpecialChar_emptyArrayDoesNotChangeSet()
]]></system-out>
</testcase>
<testcase name="test_toString_positiveValueWithoutParens_returnsPlainString(int)[3]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_positiveValueWithoutParens_returnsPlainString(int)]/[test-template-invocation:#3]
display-name: [3] 1000
]]></system-out>
</testcase>
<testcase name="test_scan_parameterizedInputs_returnsExpectedTokenCount(String, int)[1]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;5&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_parameterizedInputs_returnsExpectedTokenCount(StringScannerScanGeneratedTest.java:95)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_parameterizedInputs_returnsExpectedTokenCount(java.lang.String, int)]/[test-template-invocation:#1]
display-name: [1] a b c, 5
]]></system-out>
</testcase>
<testcase name="test_scan_parameterizedInputs_returnsExpectedTokenCount(String, int)[2]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;5&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_parameterizedInputs_returnsExpectedTokenCount(StringScannerScanGeneratedTest.java:95)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_parameterizedInputs_returnsExpectedTokenCount(java.lang.String, int)]/[test-template-invocation:#2]
display-name: [2] 1+2, 5
]]></system-out>
</testcase>
<testcase name="test_scan_parameterizedInputs_returnsExpectedTokenCount(String, int)[3]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;5&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_parameterizedInputs_returnsExpectedTokenCount(StringScannerScanGeneratedTest.java:95)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_parameterizedInputs_returnsExpectedTokenCount(java.lang.String, int)]/[test-template-invocation:#3]
display-name: [3] x:y:z, 5
]]></system-out>
</testcase>
<testcase name="test_scan_parameterizedInputs_returnsExpectedTokenCount(String, int)[4]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;5&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_parameterizedInputs_returnsExpectedTokenCount(StringScannerScanGeneratedTest.java:95)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_parameterizedInputs_returnsExpectedTokenCount(java.lang.String, int)]/[test-template-invocation:#4]
display-name: [4] start|middle|end, 5
]]></system-out>
</testcase>
<testcase name="test_main_withDoubleEdgeCases(String)[5]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withDoubleEdgeCases(java.lang.String)]/[test-template-invocation:#5]
display-name: [5] 1.7976931348623157E308
]]></system-out>
</testcase>
<testcase name="test_main_withDoubleEdgeCases(String)[4]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withDoubleEdgeCases(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] 4.9E-324
]]></system-out>
</testcase>
<testcase name="test_main_withDoubleEdgeCases(String)[3]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withDoubleEdgeCases(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] -1.0
]]></system-out>
</testcase>
<testcase name="test_main_withDoubleEdgeCases(String)[2]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withDoubleEdgeCases(java.lang.String)]/[test-template-invocation:#2]
display-name: [2] 1.0
]]></system-out>
</testcase>
<testcase name="test_main_withDoubleEdgeCases(String)[1]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withDoubleEdgeCases(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] 0.0
]]></system-out>
</testcase>
<testcase name="test_isParens_handlesBothBooleanValues(boolean)[2]" classname="mathNode.ExpressionIsParensGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionIsParensGeneratedTest]/[test-template:test_isParens_handlesBothBooleanValues(boolean)]/[test-template-invocation:#2]
display-name: [2] false
]]></system-out>
</testcase>
<testcase name="test_isParens_handlesBothBooleanValues(boolean)[1]" classname="mathNode.ExpressionIsParensGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionIsParensGeneratedTest]/[test-template:test_isParens_handlesBothBooleanValues(boolean)]/[test-template-invocation:#1]
display-name: [1] true
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withSpecialUnicodeCharacters()" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[method:test_addDelimiter_withSpecialUnicodeCharacters()]
display-name: test_addDelimiter_withSpecialUnicodeCharacters()
]]></system-out>
</testcase>
<testcase name="test_toString_handlesSpecialValues(double)[6]" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[test-template:test_toString_handlesSpecialValues(double)]/[test-template-invocation:#6]
display-name: [6] 1.7976931348623157E308
]]></system-out>
</testcase>
<testcase name="test_toString_handlesSpecialValues(double)[7]" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[test-template:test_toString_handlesSpecialValues(double)]/[test-template-invocation:#7]
display-name: [7] Infinity
]]></system-out>
</testcase>
<testcase name="test_toString_handlesSpecialValues(double)[4]" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[test-template:test_toString_handlesSpecialValues(double)]/[test-template-invocation:#4]
display-name: [4] -1.0
]]></system-out>
</testcase>
<testcase name="test_toString_handlesSpecialValues(double)[5]" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[test-template:test_toString_handlesSpecialValues(double)]/[test-template-invocation:#5]
display-name: [5] 4.9E-324
]]></system-out>
</testcase>
<testcase name="test_toString_handlesSpecialValues(double)[2]" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[test-template:test_toString_handlesSpecialValues(double)]/[test-template-invocation:#2]
display-name: [2] -0.0
]]></system-out>
</testcase>
<testcase name="test_toString_handlesSpecialValues(double)[3]" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[test-template:test_toString_handlesSpecialValues(double)]/[test-template-invocation:#3]
display-name: [3] 1.0
]]></system-out>
</testcase>
<testcase name="test_toString_handlesSpecialValues(double)[1]" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[test-template:test_toString_handlesSpecialValues(double)]/[test-template-invocation:#1]
display-name: [1] 0.0
]]></system-out>
</testcase>
<testcase name="test_main_withVeryLargeNumber()" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[method:test_main_withVeryLargeNumber()]
display-name: test_main_withVeryLargeNumber()
]]></system-out>
</testcase>
<testcase name="test_calculate_returnsStoredValue_negative()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_calculate_returnsStoredValue_negative()]
display-name: test_calculate_returnsStoredValue_negative()
]]></system-out>
</testcase>
<testcase name="test_main_withNoArgs_promptsForInput()" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[method:test_main_withNoArgs_promptsForInput()]
display-name: test_main_withNoArgs_promptsForInput()
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withEmptyArray()" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[method:test_addDelimiter_withEmptyArray()]
display-name: test_addDelimiter_withEmptyArray()
]]></system-out>
</testcase>
<testcase name="test_calculate_returnsStoredValue_nan()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_calculate_returnsStoredValue_nan()]
display-name: test_calculate_returnsStoredValue_nan()
]]></system-out>
</testcase>
<testcase name="test_scan_singleCharacterDelimiter_returnsTwoEmptyTokens()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_singleCharacterDelimiter_returnsTwoEmptyTokens(StringScannerScanGeneratedTest.java:26)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_singleCharacterDelimiter_returnsTwoEmptyTokens()]
display-name: test_scan_singleCharacterDelimiter_returnsTwoEmptyTokens()
]]></system-out>
</testcase>
<testcase name="test_calculate_returnsStoredValue_maxDouble()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_calculate_returnsStoredValue_maxDouble()]
display-name: test_calculate_returnsStoredValue_maxDouble()
]]></system-out>
</testcase>
<testcase name="test_main_withZeroDivision()" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[method:test_main_withZeroDivision()]
display-name: test_main_withZeroDivision()
]]></system-out>
</testcase>
<testcase name="test_scan_longStringWithDelimiters_returnsCorrectTokens()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;21&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <21> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_longStringWithDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_longStringWithDelimiters_returnsCorrectTokens()]
display-name: test_scan_longStringWithDelimiters_returnsCorrectTokens()
]]></system-out>
</testcase>
<testcase name="test_buildNode_withNaN()" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[method:test_buildNode_withNaN()]
display-name: test_buildNode_withNaN()
]]></system-out>
</testcase>
<testcase name="test_toString_positiveValueWithParens_returnsParenthesizedString(int)[2]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_positiveValueWithParens_returnsParenthesizedString(int)]/[test-template-invocation:#2]
display-name: [2] 42
]]></system-out>
</testcase>
<testcase name="test_toString_positiveValueWithParens_returnsParenthesizedString(int)[1]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_positiveValueWithParens_returnsParenthesizedString(int)]/[test-template-invocation:#1]
display-name: [1] 1
]]></system-out>
</testcase>
<testcase name="test_calculate_returnsStoredValue_negativeInfinity()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_calculate_returnsStoredValue_negativeInfinity()]
display-name: test_calculate_returnsStoredValue_negativeInfinity()
]]></system-out>
</testcase>
<testcase name="test_toString_positiveValueWithParens_returnsParenthesizedString(int)[3]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_positiveValueWithParens_returnsParenthesizedString(int)]/[test-template-invocation:#3]
display-name: [3] 1000
]]></system-out>
</testcase>
<testcase name="test_calculate_returnsStoredValue_positive()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_calculate_returnsStoredValue_positive()]
display-name: test_calculate_returnsStoredValue_positive()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_zeroAsNegative_handled()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_zeroAsNegative_handled(MathTreeCleanStrListGeneratedTest.java:118)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_zeroAsNegative_handled()]
display-name: test_cleanStrList_zeroAsNegative_handled()
]]></system-out>
</testcase>
<testcase name="test_main_withVerySmallNumber()" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[method:test_main_withVerySmallNumber()]
display-name: test_main_withVerySmallNumber()
]]></system-out>
</testcase>
<testcase name="test_calculate_returnsStoredValue_minDouble()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_calculate_returnsStoredValue_minDouble()]
display-name: test_calculate_returnsStoredValue_minDouble()
]]></system-out>
</testcase>
<testcase name="test_scan_emptyString_returnsEmptyList()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_emptyString_returnsEmptyList()]
display-name: test_scan_emptyString_returnsEmptyList()
]]></system-out>
</testcase>
<testcase name="test_toString_minIntWithParens_returnsParenthesizedMinIntString()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_minIntWithParens_returnsParenthesizedMinIntString()]
display-name: test_toString_minIntWithParens_returnsParenthesizedMinIntString()
]]></system-out>
</testcase>
<testcase name="test_toString_wrapsNegativeValueInParens_whenParensEnabled()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_toString_wrapsNegativeValueInParens_whenParensEnabled()]
display-name: test_toString_wrapsNegativeValueInParens_whenParensEnabled()
]]></system-out>
</testcase>
<testcase name="test_main_withIntegerEdgeCases(String)[2]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withIntegerEdgeCases(java.lang.String)]/[test-template-invocation:#2]
display-name: [2] 1
]]></system-out>
</testcase>
<testcase name="test_main_withIntegerEdgeCases(String)[3]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withIntegerEdgeCases(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] -1
]]></system-out>
</testcase>
<testcase name="test_main_withIntegerEdgeCases(String)[1]" classname="mathTree.CalcAppMainGeneratedTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withIntegerEdgeCases(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] 0
]]></system-out>
</testcase>
<testcase name="test_toString_handlesNegativeInfinityWithParens()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_toString_handlesNegativeInfinityWithParens()]
display-name: test_toString_handlesNegativeInfinityWithParens()
]]></system-out>
</testcase>
<testcase name="test_main_withIntegerEdgeCases(String)[4]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withIntegerEdgeCases(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] 2147483647
]]></system-out>
</testcase>
<testcase name="test_main_withIntegerEdgeCases(String)[5]" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[test-template:test_main_withIntegerEdgeCases(java.lang.String)]/[test-template-invocation:#5]
display-name: [5] -2147483648
]]></system-out>
</testcase>
<testcase name="test_scan_onlyDelimiters_returnsCorrectEmptyTokens()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;4&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <4> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_onlyDelimiters_returnsCorrectEmptyTokens(StringScannerScanGeneratedTest.java:55)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_onlyDelimiters_returnsCorrectEmptyTokens()]
display-name: test_scan_onlyDelimiters_returnsCorrectEmptyTokens()
]]></system-out>
</testcase>
<testcase name="test_calculate_returnsCorrectValue()" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[method:test_calculate_returnsCorrectValue()]
display-name: test_calculate_returnsCorrectValue()
]]></system-out>
</testcase>
<testcase name="test_init_withZeroValues()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_init_withZeroValues()]
display-name: test_init_withZeroValues()
]]></system-out>
</testcase>
<testcase name="test_init_invalidMathStatements(String)[10]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_invalidMathStatements(java.lang.String)]/[test-template-invocation:#10]
display-name: [10] abc + def
]]></system-out>
</testcase>
<testcase name="test_init_withVerySmallDoubleValues()" classname="mathTree.MathTreeInitGeneratedTest" time="0.001">
<failure message="Should handle Double.MIN_VALUE correctly ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Should handle Double.MIN_VALUE correctly ==> expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
	at mathTree.MathTreeInitGeneratedTest.test_init_withVerySmallDoubleValues(MathTreeInitGeneratedTest.java:88)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_init_withVerySmallDoubleValues()]
display-name: test_init_withVerySmallDoubleValues()
]]></system-out>
</testcase>
<testcase name="test_toString_handlesInfinityWithParens()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_toString_handlesInfinityWithParens()]
display-name: test_toString_handlesInfinityWithParens()
]]></system-out>
</testcase>
<testcase name="test_saveToken_withNonEmptyString_addsTokenToList()" classname="mathTree.StringScannerSaveTokenGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerSaveTokenGeneratedTest]/[method:test_saveToken_withNonEmptyString_addsTokenToList()]
display-name: test_saveToken_withNonEmptyString_addsTokenToList()
]]></system-out>
</testcase>
<testcase name="test_toString_handlesSpecialValues(double)[8]" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[test-template:test_toString_handlesSpecialValues(double)]/[test-template-invocation:#8]
display-name: [8] -Infinity
]]></system-out>
</testcase>
<testcase name="test_toString_handlesSpecialValues(double)[9]" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[test-template:test_toString_handlesSpecialValues(double)]/[test-template-invocation:#9]
display-name: [9] NaN
]]></system-out>
</testcase>
<testcase name="test_addSpecialChar_addsSingleCharacter()" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[method:test_addSpecialChar_addsSingleCharacter()]
display-name: test_addSpecialChar_addsSingleCharacter()
]]></system-out>
</testcase>
<testcase name="test_toString_edgeCasesWithoutParens(int)[5]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_toString_edgeCasesWithoutParens(int)]/[test-template-invocation:#5]
display-name: [5] 2147483647
]]></system-out>
</testcase>
<testcase name="test_toString_edgeCasesWithoutParens(int)[4]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_toString_edgeCasesWithoutParens(int)]/[test-template-invocation:#4]
display-name: [4] -2147483648
]]></system-out>
</testcase>
<testcase name="test_scan_noDelimiters_returnsSingleToken()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_noDelimiters_returnsSingleToken()]
display-name: test_scan_noDelimiters_returnsSingleToken()
]]></system-out>
</testcase>
<testcase name="test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(String)[2]" classname="mathTree.StringScannerSaveTokenGeneratedTest" time="0">
<failure message="expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
	at mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(StringScannerSaveTokenGeneratedTest.java:50)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerSaveTokenGeneratedTest]/[test-template:test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(java.lang.String)]/[test-template-invocation:#2]
display-name: [2]  
]]></system-out>
</testcase>
<testcase name="test_toString_returnsRawValueWhenNoParens()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_returnsRawValueWhenNoParens()]
display-name: test_toString_returnsRawValueWhenNoParens()
]]></system-out>
</testcase>
<testcase name="test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(String)[3]" classname="mathTree.StringScannerSaveTokenGeneratedTest" time="0">
<failure message="expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
	at mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(StringScannerSaveTokenGeneratedTest.java:50)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerSaveTokenGeneratedTest]/[test-template:test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(java.lang.String)]/[test-template-invocation:#3]
display-name: [3]   
]]></system-out>
</testcase>
<testcase name="test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(String)[1]" classname="mathTree.StringScannerSaveTokenGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerSaveTokenGeneratedTest]/[test-template:test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] 
]]></system-out>
</testcase>
<testcase name="test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(String)[4]" classname="mathTree.StringScannerSaveTokenGeneratedTest" time="0">
<failure message="expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
	at mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(StringScannerSaveTokenGeneratedTest.java:50)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerSaveTokenGeneratedTest]/[test-template:test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] 	
]]></system-out>
</testcase>
<testcase name="test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(String)[5]" classname="mathTree.StringScannerSaveTokenGeneratedTest" time="0">
<failure message="expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
	at mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(StringScannerSaveTokenGeneratedTest.java:50)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerSaveTokenGeneratedTest]/[test-template:test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(java.lang.String)]/[test-template-invocation:#5]
display-name: [5] 

]]></system-out>
</testcase>
<testcase name="test_init_withVeryLargeDoubleValues()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_init_withVeryLargeDoubleValues()]
display-name: test_init_withVeryLargeDoubleValues()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_operatorsNotModified(String)[5]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;4&gt; but was: &lt;3&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_operatorsNotModified(MathTreeCleanStrListGeneratedTest.java:89)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_operatorsNotModified(java.lang.String)]/[test-template-invocation:#5]
display-name: [5] ^
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_operatorsNotModified(String)[4]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;4&gt; but was: &lt;3&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_operatorsNotModified(MathTreeCleanStrListGeneratedTest.java:89)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_operatorsNotModified(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] /
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_operatorsNotModified(String)[3]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;4&gt; but was: &lt;3&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_operatorsNotModified(MathTreeCleanStrListGeneratedTest.java:89)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_operatorsNotModified(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] *
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_operatorsNotModified(String)[2]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;4&gt; but was: &lt;3&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_operatorsNotModified(MathTreeCleanStrListGeneratedTest.java:89)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_operatorsNotModified(java.lang.String)]/[test-template-invocation:#2]
display-name: [2] +
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_operatorsNotModified(String)[1]" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;4&gt; but was: &lt;3&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_operatorsNotModified(MathTreeCleanStrListGeneratedTest.java:89)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[test-template:test_cleanStrList_operatorsNotModified(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] -
]]></system-out>
</testcase>
<testcase name="test_init_withNegativeNumbers()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_init_withNegativeNumbers()]
display-name: test_init_withNegativeNumbers()
]]></system-out>
</testcase>
<testcase name="test_toString_handlesNanWithParens()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_toString_handlesNanWithParens()]
display-name: test_toString_handlesNanWithParens()
]]></system-out>
</testcase>
<testcase name="test_toString_negativeValueWithoutParens_returnsPlainString(int)[2]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_negativeValueWithoutParens_returnsPlainString(int)]/[test-template-invocation:#2]
display-name: [2] -42
]]></system-out>
</testcase>
<testcase name="test_toString_negativeValueWithoutParens_returnsPlainString(int)[1]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_negativeValueWithoutParens_returnsPlainString(int)]/[test-template-invocation:#1]
display-name: [1] -1
]]></system-out>
</testcase>
<testcase name="test_toString_negativeValueWithoutParens_returnsPlainString(int)[3]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_negativeValueWithoutParens_returnsPlainString(int)]/[test-template-invocation:#3]
display-name: [3] -1000
]]></system-out>
</testcase>
<testcase name="test_addSpecialChar_addsArrayWithMultipleCharacters()" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[method:test_addSpecialChar_addsArrayWithMultipleCharacters()]
display-name: test_addSpecialChar_addsArrayWithMultipleCharacters()
]]></system-out>
</testcase>
<testcase name="test_toString_returnsParenthesizedValueWhenParens()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_returnsParenthesizedValueWhenParens()]
display-name: test_toString_returnsParenthesizedValueWhenParens()
]]></system-out>
</testcase>
<testcase name="test_toString_maxIntWithoutParens_returnsMaxIntString()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_maxIntWithoutParens_returnsMaxIntString()]
display-name: test_toString_maxIntWithoutParens_returnsMaxIntString()
]]></system-out>
</testcase>
<testcase name="test_toString_edgeCasesWithoutParens(int)[3]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_toString_edgeCasesWithoutParens(int)]/[test-template-invocation:#3]
display-name: [3] 1
]]></system-out>
</testcase>
<testcase name="test_toString_edgeCasesWithoutParens(int)[2]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_toString_edgeCasesWithoutParens(int)]/[test-template-invocation:#2]
display-name: [2] -1
]]></system-out>
</testcase>
<testcase name="test_toString_edgeCasesWithoutParens(int)[1]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_toString_edgeCasesWithoutParens(int)]/[test-template-invocation:#1]
display-name: [1] 0
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withSingleCharacter()" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[method:test_addDelimiter_withSingleCharacter()]
display-name: test_addDelimiter_withSingleCharacter()
]]></system-out>
</testcase>
<testcase name="test_toString_handlesVeryLargePositiveDouble()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_handlesVeryLargePositiveDouble()]
display-name: test_toString_handlesVeryLargePositiveDouble()
]]></system-out>
</testcase>
<testcase name="test_toString_zeroWithParens_returnsParenthesizedZeroString()" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_zeroWithParens_returnsParenthesizedZeroString()]
display-name: test_toString_zeroWithParens_returnsParenthesizedZeroString()
]]></system-out>
</testcase>
<testcase name="test_toString_withoutParens()" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[method:test_toString_withoutParens()]
display-name: test_toString_withoutParens()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_mixedExpression_processedCorrectly()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;7&gt; but was: &lt;5&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <7> but was: <5>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_mixedExpression_processedCorrectly(MathTreeCleanStrListGeneratedTest.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_mixedExpression_processedCorrectly()]
display-name: test_cleanStrList_mixedExpression_processedCorrectly()
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withDuplicateCharacters()" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[method:test_addDelimiter_withDuplicateCharacters()]
display-name: test_addDelimiter_withDuplicateCharacters()
]]></system-out>
</testcase>
<testcase name="test_toString_wrapsZeroInParens_whenParensEnabled()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_toString_wrapsZeroInParens_whenParensEnabled()]
display-name: test_toString_wrapsZeroInParens_whenParensEnabled()
]]></system-out>
</testcase>
<testcase name="test_scan_multipleDelimiters_returnsCorrectTokens()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;5&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_multipleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:35)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_multipleDelimiters_returnsCorrectTokens()]
display-name: test_scan_multipleDelimiters_returnsCorrectTokens()
]]></system-out>
</testcase>
<testcase name="test_calculate_returnsStoredValue_positiveInfinity()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_calculate_returnsStoredValue_positiveInfinity()]
display-name: test_calculate_returnsStoredValue_positiveInfinity()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_noNegatives_noChanges()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_noNegatives_noChanges()]
display-name: test_cleanStrList_noNegatives_noChanges()
]]></system-out>
</testcase>
<testcase name="test_main_withComplexExpression()" classname="mathTree.CalcAppMainGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.CalcAppMainGeneratedTest]/[method:test_main_withComplexExpression()]
display-name: test_main_withComplexExpression()
]]></system-out>
</testcase>
<testcase name="test_toString_edgeCasesWithParens(int)[1]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_toString_edgeCasesWithParens(int)]/[test-template-invocation:#1]
display-name: [1] 0
]]></system-out>
</testcase>
<testcase name="test_toString_edgeCasesWithParens(int)[4]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_toString_edgeCasesWithParens(int)]/[test-template-invocation:#4]
display-name: [4] -2147483648
]]></system-out>
</testcase>
<testcase name="test_buildNode_returnsDecInstance()" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[method:test_buildNode_returnsDecInstance()]
display-name: test_buildNode_returnsDecInstance()
]]></system-out>
</testcase>
<testcase name="test_addDelimiter_withNullArray_throwsNullPointerException()" classname="mathTree.StringScannerAddDelimiterGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddDelimiterGeneratedTest]/[method:test_addDelimiter_withNullArray_throwsNullPointerException()]
display-name: test_addDelimiter_withNullArray_throwsNullPointerException()
]]></system-out>
</testcase>
<testcase name="test_toString_edgeCasesWithParens(int)[5]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_toString_edgeCasesWithParens(int)]/[test-template-invocation:#5]
display-name: [5] 2147483647
]]></system-out>
</testcase>
<testcase name="test_toString_edgeCasesWithParens(int)[2]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_toString_edgeCasesWithParens(int)]/[test-template-invocation:#2]
display-name: [2] -1
]]></system-out>
</testcase>
<testcase name="test_toString_edgeCasesWithParens(int)[3]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_toString_edgeCasesWithParens(int)]/[test-template-invocation:#3]
display-name: [3] 1
]]></system-out>
</testcase>
<testcase name="test_toString_maxIntWithParens_returnsParenthesizedMaxIntString()" classname="mathNode.IntToStringGeneratedTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_maxIntWithParens_returnsParenthesizedMaxIntString()]
display-name: test_toString_maxIntWithParens_returnsParenthesizedMaxIntString()
]]></system-out>
</testcase>
<testcase name="test_toString_formatsValueWithoutParens(double)[1]" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[test-template:test_toString_formatsValueWithoutParens(double)]/[test-template-invocation:#1]
display-name: [1] 0.0
]]></system-out>
</testcase>
<testcase name="test_toString_formatsValueWithoutParens(double)[3]" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[test-template:test_toString_formatsValueWithoutParens(double)]/[test-template-invocation:#3]
display-name: [3] -1.0
]]></system-out>
</testcase>
<testcase name="test_toString_formatsValueWithoutParens(double)[2]" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[test-template:test_toString_formatsValueWithoutParens(double)]/[test-template-invocation:#2]
display-name: [2] 1.0
]]></system-out>
</testcase>
<testcase name="test_toString_formatsValueWithoutParens(double)[5]" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[test-template:test_toString_formatsValueWithoutParens(double)]/[test-template-invocation:#5]
display-name: [5] -2.71828
]]></system-out>
</testcase>
<testcase name="test_toString_formatsValueWithoutParens(double)[4]" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[test-template:test_toString_formatsValueWithoutParens(double)]/[test-template-invocation:#4]
display-name: [4] 3.14159
]]></system-out>
</testcase>
<testcase name="test_init_withWhitespaceOnlyStrings(String)[5]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_withWhitespaceOnlyStrings(java.lang.String)]/[test-template-invocation:#5]
display-name: [5]   	 
 
]]></system-out>
</testcase>
<testcase name="test_isParens_returnsTrue_whenParenthesisIsTrue()" classname="mathNode.ExpressionIsParensGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionIsParensGeneratedTest]/[method:test_isParens_returnsTrue_whenParenthesisIsTrue()]
display-name: test_isParens_returnsTrue_whenParenthesisIsTrue()
]]></system-out>
</testcase>
<testcase name="test_init_withWhitespaceOnlyStrings(String)[3]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_withWhitespaceOnlyStrings(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] 	
]]></system-out>
</testcase>
<testcase name="test_init_withWhitespaceOnlyStrings(String)[4]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_withWhitespaceOnlyStrings(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] 

]]></system-out>
</testcase>
<testcase name="test_cleanStrList_multipleNegatives_allSplitCorrectly()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;5&gt; but was: &lt;3&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <5> but was: <3>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_multipleNegatives_allSplitCorrectly(MathTreeCleanStrListGeneratedTest.java:58)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_multipleNegatives_allSplitCorrectly()]
display-name: test_cleanStrList_multipleNegatives_allSplitCorrectly()
]]></system-out>
</testcase>
<testcase name="test_toString_withParens()" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[method:test_toString_withParens()]
display-name: test_toString_withParens()
]]></system-out>
</testcase>
<testcase name="test_addSpecialChar_duplicateCharacters()" classname="mathTree.StringScannerAddSpecialCharGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerAddSpecialCharGeneratedTest]/[method:test_addSpecialChar_duplicateCharacters()]
display-name: test_addSpecialChar_duplicateCharacters()
]]></system-out>
</testcase>
<testcase name="test_init_withWhitespaceOnlyStrings(String)[1]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_withWhitespaceOnlyStrings(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] 
]]></system-out>
</testcase>
<testcase name="test_init_withWhitespaceOnlyStrings(String)[2]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_withWhitespaceOnlyStrings(java.lang.String)]/[test-template-invocation:#2]
display-name: [2]  
]]></system-out>
</testcase>
<testcase name="test_saveToken_withNullString_throwsException()" classname="mathTree.StringScannerSaveTokenGeneratedTest" time="0">
<failure message="Unexpected exception type thrown, expected: &lt;java.lang.NullPointerException&gt; but was: &lt;java.lang.reflect.InvocationTargetException&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Unexpected exception type thrown, expected: <java.lang.NullPointerException> but was: <java.lang.reflect.InvocationTargetException>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:67)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:35)
	at org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3115)
	at mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withNullString_throwsException(StringScannerSaveTokenGeneratedTest.java:102)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:115)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at mathTree.StringScannerSaveTokenGeneratedTest.lambda$test_saveToken_withNullString_throwsException$0(StringScannerSaveTokenGeneratedTest.java:103)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:53)
	... 6 more
Caused by: java.lang.NullPointerException: Cannot invoke "String.isEmpty()" because "<parameter1>" is null
	at mathTree.StringScanner.saveToken(StringScanner.java:85)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	... 9 more
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerSaveTokenGeneratedTest]/[method:test_saveToken_withNullString_throwsException()]
display-name: test_saveToken_withNullString_throwsException()
]]></system-out>
</testcase>
<testcase name="test_toString_handlesNegativeZero()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_handlesNegativeZero()]
display-name: test_toString_handlesNegativeZero()
]]></system-out>
</testcase>
<testcase name="test_toString_formatsValueWithoutParens(double)[6]" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[test-template:test_toString_formatsValueWithoutParens(double)]/[test-template-invocation:#6]
display-name: [6] 2.2250738585072014E-308
]]></system-out>
</testcase>
<testcase name="test_saveToken_withSpecialCharacters_addsTokenToList()" classname="mathTree.StringScannerSaveTokenGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerSaveTokenGeneratedTest]/[method:test_saveToken_withSpecialCharacters_addsTokenToList()]
display-name: test_saveToken_withSpecialCharacters_addsTokenToList()
]]></system-out>
</testcase>
<testcase name="test_toString_zeroWithoutParens_returnsZeroString()" classname="mathNode.IntToStringGeneratedTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[method:test_toString_zeroWithoutParens_returnsZeroString()]
display-name: test_toString_zeroWithoutParens_returnsZeroString()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_negativeAfterOperator_handledCorrectly()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;4&gt; but was: &lt;3&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_negativeAfterOperator_handledCorrectly(MathTreeCleanStrListGeneratedTest.java:73)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_negativeAfterOperator_handledCorrectly()]
display-name: test_cleanStrList_negativeAfterOperator_handledCorrectly()
]]></system-out>
</testcase>
<testcase name="test_init_invalidMathStatements(String)[1]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_invalidMathStatements(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] 
]]></system-out>
</testcase>
<testcase name="test_buildNode_withSpecialValues(double)[4]" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[test-template:test_buildNode_withSpecialValues(double)]/[test-template-invocation:#4]
display-name: [4] -1.0
]]></system-out>
</testcase>
<testcase name="test_scan_mixedDelimitersAndText_returnsCorrectTokens()" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;5&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_mixedDelimitersAndText_returnsCorrectTokens(StringScannerScanGeneratedTest.java:65)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[method:test_scan_mixedDelimitersAndText_returnsCorrectTokens()]
display-name: test_scan_mixedDelimitersAndText_returnsCorrectTokens()
]]></system-out>
</testcase>
<testcase name="test_init_invalidMathStatements(String)[2]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_invalidMathStatements(java.lang.String)]/[test-template-invocation:#2]
display-name: [2]    
]]></system-out>
</testcase>
<testcase name="test_buildNode_withSpecialValues(double)[3]" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[test-template:test_buildNode_withSpecialValues(double)]/[test-template-invocation:#3]
display-name: [3] 1.0
]]></system-out>
</testcase>
<testcase name="test_buildNode_withSpecialValues(double)[6]" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[test-template:test_buildNode_withSpecialValues(double)]/[test-template-invocation:#6]
display-name: [6] 1.7976931348623157E308
]]></system-out>
</testcase>
<testcase name="test_toString_wrapsInParens_whenParensEnabled()" classname="mathNode.DecCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecCalculateGeneratedTest]/[method:test_toString_wrapsInParens_whenParensEnabled()]
display-name: test_toString_wrapsInParens_whenParensEnabled()
]]></system-out>
</testcase>
<testcase name="test_buildNode_withSpecialValues(double)[5]" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[test-template:test_buildNode_withSpecialValues(double)]/[test-template-invocation:#5]
display-name: [5] 4.9E-324
]]></system-out>
</testcase>
<testcase name="test_calculate_edgeCases(int)[5]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_calculate_edgeCases(int)]/[test-template-invocation:#5]
display-name: [5] 2147483647
]]></system-out>
</testcase>
<testcase name="test_buildNode_withSpecialValues(double)[8]" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[test-template:test_buildNode_withSpecialValues(double)]/[test-template-invocation:#8]
display-name: [8] -Infinity
]]></system-out>
</testcase>
<testcase name="test_buildNode_withSpecialValues(double)[7]" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[test-template:test_buildNode_withSpecialValues(double)]/[test-template-invocation:#7]
display-name: [7] Infinity
]]></system-out>
</testcase>
<testcase name="test_isParens_returnsFalse_whenParenthesisIsFalse()" classname="mathNode.ExpressionIsParensGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.ExpressionIsParensGeneratedTest]/[method:test_isParens_returnsFalse_whenParenthesisIsFalse()]
display-name: test_isParens_returnsFalse_whenParenthesisIsFalse()
]]></system-out>
</testcase>
<testcase name="test_toString_negativeValueWithParens_returnsParenthesizedString(int)[2]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_negativeValueWithParens_returnsParenthesizedString(int)]/[test-template-invocation:#2]
display-name: [2] -42
]]></system-out>
</testcase>
<testcase name="test_toString_negativeValueWithParens_returnsParenthesizedString(int)[1]" classname="mathNode.IntToStringGeneratedTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_negativeValueWithParens_returnsParenthesizedString(int)]/[test-template-invocation:#1]
display-name: [1] -1
]]></system-out>
</testcase>
<testcase name="test_buildNode_withSpecialValues(double)[2]" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[test-template:test_buildNode_withSpecialValues(double)]/[test-template-invocation:#2]
display-name: [2] -0.0
]]></system-out>
</testcase>
<testcase name="test_toString_negativeValueWithParens_returnsParenthesizedString(int)[3]" classname="mathNode.IntToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntToStringGeneratedTest]/[test-template:test_toString_negativeValueWithParens_returnsParenthesizedString(int)]/[test-template-invocation:#3]
display-name: [3] -1000
]]></system-out>
</testcase>
<testcase name="test_buildNode_withSpecialValues(double)[1]" classname="mathNode.FactoryBuildNodeGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.FactoryBuildNodeGeneratedTest]/[test-template:test_buildNode_withSpecialValues(double)]/[test-template-invocation:#1]
display-name: [1] 0.0
]]></system-out>
</testcase>
<testcase name="test_solve_null_root_returns_null()" classname="mathTree.MathTreeSolveGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeSolveGeneratedTest]/[method:test_solve_null_root_returns_null()]
display-name: test_solve_null_root_returns_null
]]></system-out>
</testcase>
<testcase name="test_calculate_edgeCases(int)[1]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_calculate_edgeCases(int)]/[test-template-invocation:#1]
display-name: [1] 0
]]></system-out>
</testcase>
<testcase name="test_init_invalidMathStatements(String)[9]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<failure message="Initialization should fail for invalid math statement: 3 / 0 ==&gt; expected: &lt;false&gt; but was: &lt;true&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Initialization should fail for invalid math statement: 3 / 0 ==> expected: <false> but was: <true>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertFalse.failNotFalse(AssertFalse.java:63)
	at org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:36)
	at org.junit.jupiter.api.Assertions.assertFalse(Assertions.java:239)
	at mathTree.MathTreeInitGeneratedTest.test_init_invalidMathStatements(MathTreeInitGeneratedTest.java:44)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_invalidMathStatements(java.lang.String)]/[test-template-invocation:#9]
display-name: [9] 3 / 0
]]></system-out>
</testcase>
<testcase name="test_calculate_edgeCases(int)[2]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_calculate_edgeCases(int)]/[test-template-invocation:#2]
display-name: [2] -1
]]></system-out>
</testcase>
<testcase name="test_calculate_edgeCases(int)[3]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_calculate_edgeCases(int)]/[test-template-invocation:#3]
display-name: [3] 1
]]></system-out>
</testcase>
<testcase name="test_init_invalidMathStatements(String)[7]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_invalidMathStatements(java.lang.String)]/[test-template-invocation:#7]
display-name: [7] *
]]></system-out>
</testcase>
<testcase name="test_calculate_edgeCases(int)[4]" classname="mathNode.IntCalculateGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.IntCalculateGeneratedTest]/[test-template:test_calculate_edgeCases(int)]/[test-template-invocation:#4]
display-name: [4] -2147483648
]]></system-out>
</testcase>
<testcase name="test_init_invalidMathStatements(String)[8]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_invalidMathStatements(java.lang.String)]/[test-template-invocation:#8]
display-name: [8] 3 ++ 4
]]></system-out>
</testcase>
<testcase name="test_init_invalidMathStatements(String)[5]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_invalidMathStatements(java.lang.String)]/[test-template-invocation:#5]
display-name: [5] 3 + 4)
]]></system-out>
</testcase>
<testcase name="test_init_invalidMathStatements(String)[6]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_invalidMathStatements(java.lang.String)]/[test-template-invocation:#6]
display-name: [6] +
]]></system-out>
</testcase>
<testcase name="test_init_invalidMathStatements(String)[3]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_invalidMathStatements(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] ()
]]></system-out>
</testcase>
<testcase name="test_init_withDeeplyNestedExpression()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<failure message="Should handle deeply nested expressions correctly ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Should handle deeply nested expressions correctly ==> expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
	at mathTree.MathTreeInitGeneratedTest.test_init_withDeeplyNestedExpression(MathTreeInitGeneratedTest.java:112)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_init_withDeeplyNestedExpression()]
display-name: test_init_withDeeplyNestedExpression()
]]></system-out>
</testcase>
<testcase name="test_init_invalidMathStatements(String)[4]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_invalidMathStatements(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] (3 + 4
]]></system-out>
</testcase>
<testcase name="test_toString_nullRoot_returnsEmptyString()" classname="mathTree.MathTreeToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeToStringGeneratedTest]/[method:test_toString_nullRoot_returnsEmptyString()]
display-name: test_toString_nullRoot_returnsEmptyString
]]></system-out>
</testcase>
<testcase name="test_init_validMathStatements(String)[2]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<failure message="Initialization should succeed for valid math statement: ((2 * 3) + 5) ==&gt; expected: &lt;true&gt; but was: &lt;false&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Initialization should succeed for valid math statement: ((2 * 3) + 5) ==> expected: <true> but was: <false>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
	at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
	at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
	at mathTree.MathTreeInitGeneratedTest.test_init_validMathStatements(MathTreeInitGeneratedTest.java:24)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_validMathStatements(java.lang.String)]/[test-template-invocation:#2]
display-name: [2] ((2 * 3) + 5)
]]></system-out>
</testcase>
<testcase name="test_init_validMathStatements(String)[3]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_validMathStatements(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] 10 / 2 - 3
]]></system-out>
</testcase>
<testcase name="test_init_validMathStatements(String)[1]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_validMathStatements(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] 3 + 4
]]></system-out>
</testcase>
<testcase name="test_init_validMathStatements(String)[6]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_validMathStatements(java.lang.String)]/[test-template-invocation:#6]
display-name: [6] 0 * 100
]]></system-out>
</testcase>
<testcase name="test_init_validMathStatements(String)[4]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_validMathStatements(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] 1.5 + 2.5
]]></system-out>
</testcase>
<testcase name="test_init_validMathStatements(String)[5]" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[test-template:test_init_validMathStatements(java.lang.String)]/[test-template-invocation:#5]
display-name: [5] -5 + 3
]]></system-out>
</testcase>
<testcase name="test_saveToken_withMultipleTokens_addsAllTokens()" classname="mathTree.StringScannerSaveTokenGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerSaveTokenGeneratedTest]/[method:test_saveToken_withMultipleTokens_addsAllTokens()]
display-name: test_saveToken_withMultipleTokens_addsAllTokens()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_singleNegativeNumber_parsedCorrectly()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_singleNegativeNumber_parsedCorrectly(MathTreeCleanStrListGeneratedTest.java:31)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_singleNegativeNumber_parsedCorrectly()]
display-name: test_cleanStrList_singleNegativeNumber_parsedCorrectly()
]]></system-out>
</testcase>
<testcase name="test_toString_handlesVerySmallPositiveDouble()" classname="mathNode.DecToStringGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathNode.DecToStringGeneratedTest]/[method:test_toString_handlesVerySmallPositiveDouble()]
display-name: test_toString_handlesVerySmallPositiveDouble()
]]></system-out>
</testcase>
<testcase name="test_cleanStrList_negativeOne_splitCorrectly()" classname="mathTree.MathTreeCleanStrListGeneratedTest" time="0">
<failure message="expected: &lt;2&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_negativeOne_splitCorrectly(MathTreeCleanStrListGeneratedTest.java:145)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeCleanStrListGeneratedTest]/[method:test_cleanStrList_negativeOne_splitCorrectly()]
display-name: test_cleanStrList_negativeOne_splitCorrectly()
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[7]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#7]
display-name: [7] ?
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[6]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#6]
display-name: [6] !
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[5]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#5]
display-name: [5] &
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[4]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#4]
display-name: [4] |
]]></system-out>
</testcase>
<testcase name="test_init_emptyString()" classname="mathTree.MathTreeInitGeneratedTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.MathTreeInitGeneratedTest]/[method:test_init_emptyString()]
display-name: test_init_emptyString()
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[9]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#9]
display-name: [9] @
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[8]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#8]
display-name: [8] .
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[3]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#3]
display-name: [3] :
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[2]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#2]
display-name: [2] ;
]]></system-out>
</testcase>
<testcase name="test_scan_variousSingleDelimiters_returnsCorrectTokens(String)[1]" classname="mathTree.StringScannerScanGeneratedTest" time="0">
<failure message="expected: &lt;3&gt; but was: &lt;1&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
	at mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></failure>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:mathTree.StringScannerScanGeneratedTest]/[test-template:test_scan_variousSingleDelimiters_returnsCorrectTokens(java.lang.String)]/[test-template-invocation:#1]
display-name: [1] ,
]]></system-out>
</testcase>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]
display-name: JUnit Jupiter
]]></system-out>
</testsuite>
