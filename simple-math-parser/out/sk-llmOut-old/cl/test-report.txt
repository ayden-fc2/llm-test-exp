$ javac -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Mult.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Operator.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Add.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Int.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Pow.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Factory.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Div.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Expression.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Dec.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathNode/Sub.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathTree/StringScanner.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathTree/CalcApp.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/mathTree/MathTree.java
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionSetParensGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetParensGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionIsParensGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCheckTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddDelimiterGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSaveTokenGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeToStringGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCleanStrListGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/CalcAppMainGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerScanGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInitGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeSolveGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddSpecialCharGeneratedTest.java /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:14: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:34: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:39: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:14: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:16: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:17: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:25: error: cannot find symbol
        MathNodeStub(MathNode left, MathNode right) {
                     ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:25: error: cannot find symbol
        MathNodeStub(MathNode left, MathNode right) {
                                    ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:38: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:43: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:71: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:72: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:74: error: cannot find symbol
        AddNode(MathNode left, MathNode right) {
                ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:74: error: cannot find symbol
        AddNode(MathNode left, MathNode right) {
                               ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:80: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:85: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:20: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:34: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:35: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:37: error: cannot find symbol
        MultUnderTest(MathNode left, MathNode right) {
                      ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:37: error: cannot find symbol
        MultUnderTest(MathNode left, MathNode right) {
                                     ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:43: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:48: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:10: error: package org.mockito does not exist
import static org.mockito.Mockito.*;
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:15: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:17: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java:14: error: interface expected here
    static abstract class ExpressionStub implements Expression, Cloneable {
                                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:79: error: cannot find symbol
    void testToString_parameterized(MathNode left, MathNode right, boolean hasParens, String expected) {
                                    ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:79: error: cannot find symbol
    void testToString_parameterized(MathNode left, MathNode right, boolean hasParens, String expected) {
                                                   ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:17: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:37: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:42: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:17: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:37: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:42: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:48: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:49: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:52: error: cannot find symbol
        TestableDiv(MathNode left, MathNode right, boolean parens) {
                    ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:52: error: cannot find symbol
        TestableDiv(MathNode left, MathNode right, boolean parens) {
                                   ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:59: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:64: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:16: error: cannot find symbol
    MathNode getLeftNode() { return null; }
    ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:17: error: cannot find symbol
    MathNode getRightNode() { return null; }
    ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:22: error: cannot find symbol
    private MathNode left;
            ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:23: error: cannot find symbol
    private MathNode right;
            ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:25: error: cannot find symbol
    TestableSub(MathNode left, MathNode right) {
                ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:25: error: cannot find symbol
    TestableSub(MathNode left, MathNode right) {
                               ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:31: error: cannot find symbol
    MathNode getLeftNode() {
    ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:36: error: cannot find symbol
    MathNode getRightNode() {
    ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:42: error: cannot find symbol
class ValueNode extends MathNode {
                        ^
  symbol: class MathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:15: error: interface expected here
    static class ExpressionStub implements Expression {
                                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:17: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:19: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:20: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:28: error: cannot find symbol
        MathNodeStub(MathNode left, MathNode right) {
                     ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:28: error: cannot find symbol
        MathNodeStub(MathNode left, MathNode right) {
                                    ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:40: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:45: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:62: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:63: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:65: error: cannot find symbol
        TestPow(MathNode left, MathNode right) {
                ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:65: error: cannot find symbol
        TestPow(MathNode left, MathNode right) {
                               ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:71: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:76: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:9: error: cannot find symbol
import mathTree.mathNode;
               ^
  symbol:   class mathNode
  location: package mathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:19: error: cannot find symbol
    private mathNode invokeBuildTree(MathTree tree, LinkedList<String> tokens, boolean isParens) throws Exception {
            ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:4: error: cannot find symbol
import mathTree.mathNode;
               ^
  symbol:   class mathNode
  location: package mathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:17: error: <anonymous mathNode.OperatorSetLeftNodeGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockExpression = new Expression() {
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:18: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:26: error: Operator is abstract; cannot be instantiated
        operator = new Operator();
                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:59: error: <anonymous mathNode.OperatorSetLeftNodeGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        Expression secondNode = new Expression() {
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:60: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:18: error: <anonymous mathNode.AddCloneGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        leftNode = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:24: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:30: error: <anonymous mathNode.AddCloneGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        rightNode = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:36: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:71: error: cannot find symbol
        assertEquals(addNode.getLeftNode().evaluate(), cloned.getLeftNode().evaluate());
                                          ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:71: error: cannot find symbol
        assertEquals(addNode.getLeftNode().evaluate(), cloned.getLeftNode().evaluate());
                                                                           ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:72: error: cannot find symbol
        assertEquals(addNode.getRightNode().evaluate(), cloned.getRightNode().evaluate());
                                           ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:72: error: cannot find symbol
        assertEquals(addNode.getRightNode().evaluate(), cloned.getRightNode().evaluate());
                                                                             ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:23: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:28: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:33: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:38: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:46: error: cannot find symbol
        MathNode left = new MathNodeStub("2", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:47: error: cannot find symbol
        MathNode right = new MathNodeStub("3", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:57: error: cannot find symbol
        MathNode left = new MathNodeStub("2", true) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:58: error: cannot find symbol
        MathNode right = new MathNodeStub("3", true) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:69: error: cannot find symbol
        MathNode left = new MathNodeStub("0", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:70: error: cannot find symbol
        MathNode right = new MathNodeStub("0", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:80: error: cannot find symbol
        MathNode left = new MathNodeStub("-5", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
Note: /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddDelimiterGeneratedTest.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
100 errors
only showing the first 100 errors, of 523 total; use -Xmaxerrs if you would like to see more

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:17: error: <anonymous mathNode.OperatorSetLeftNodeGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockExpression = new Expression() {
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:18: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:26: error: Operator is abstract; cannot be instantiated
        operator = new Operator();
                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:59: error: <anonymous mathNode.OperatorSetLeftNodeGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        Expression secondNode = new Expression() {
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetLeftNodeGeneratedTest.java:60: error: method does not override or implement a method from a supertype
            @Override
            ^
5 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:18: error: <anonymous mathNode.AddCloneGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        leftNode = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:24: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:30: error: <anonymous mathNode.AddCloneGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        rightNode = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:36: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:71: error: cannot find symbol
        assertEquals(addNode.getLeftNode().evaluate(), cloned.getLeftNode().evaluate());
                                          ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:71: error: cannot find symbol
        assertEquals(addNode.getLeftNode().evaluate(), cloned.getLeftNode().evaluate());
                                                                           ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:72: error: cannot find symbol
        assertEquals(addNode.getRightNode().evaluate(), cloned.getRightNode().evaluate());
                                           ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCloneGeneratedTest.java:72: error: cannot find symbol
        assertEquals(addNode.getRightNode().evaluate(), cloned.getRightNode().evaluate());
                                                                             ^
  symbol:   method evaluate()
  location: class Expression
8 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:14: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:34: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:39: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:23: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:28: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:33: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:38: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:46: error: cannot find symbol
        MathNode left = new MathNodeStub("2", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:47: error: cannot find symbol
        MathNode right = new MathNodeStub("3", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:57: error: cannot find symbol
        MathNode left = new MathNodeStub("2", true) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:58: error: cannot find symbol
        MathNode right = new MathNodeStub("3", true) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:69: error: cannot find symbol
        MathNode left = new MathNodeStub("0", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:70: error: cannot find symbol
        MathNode right = new MathNodeStub("0", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:80: error: cannot find symbol
        MathNode left = new MathNodeStub("-5", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:81: error: cannot find symbol
        MathNode right = new MathNodeStub("-10", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:91: error: cannot find symbol
        MathNode left = new MathNodeStub(String.valueOf(Integer.MAX_VALUE), false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:92: error: cannot find symbol
        MathNode right = new MathNodeStub(String.valueOf(Integer.MAX_VALUE), false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:103: error: cannot find symbol
        MathNode left = new MathNodeStub(String.valueOf(Integer.MIN_VALUE), false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:104: error: cannot find symbol
        MathNode right = new MathNodeStub(String.valueOf(Integer.MIN_VALUE), false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:116: error: cannot find symbol
        MathNode left = new MathNodeStub(value, false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:117: error: cannot find symbol
        MathNode right = new MathNodeStub(value, false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:128: error: cannot find symbol
        MathNode left = new MathNodeStub("a", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddToStringGeneratedTest.java:129: error: cannot find symbol
        MathNode right = new MathNodeStub("b", false) {};
        ^
  symbol:   class MathNode
  location: class AddToStringGeneratedTest
24 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorCheckTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorCheckTreeGeneratedTest.java:10: error: TestOperator is not abstract and does not override abstract method toString() in Expression
    private static class TestOperator extends Operator {
                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorCheckTreeGeneratedTest.java:39: error: LeafOperator is not abstract and does not override abstract method toString() in Expression
    private static class LeafOperator extends Operator {
                   ^
2 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionSetParensGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionSetParensGeneratedTest.java:13: error: Expression is abstract; cannot be instantiated
        Expression expr = new Expression();
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionSetParensGeneratedTest.java:20: error: Expression is abstract; cannot be instantiated
        Expression expr = new Expression();
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionSetParensGeneratedTest.java:28: error: Expression is abstract; cannot be instantiated
        Expression expr = new Expression();
                          ^
3 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:22: error: cannot find symbol
        assertEquals(original.getValue(), cloned.getValue());
                             ^
  symbol:   method getValue()
  location: variable original of type Int
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:22: error: cannot find symbol
        assertEquals(original.getValue(), cloned.getValue());
                                                ^
  symbol:   method getValue()
  location: variable cloned of type Int
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:38: error: cannot find symbol
        assertEquals(0, cloned.getValue());
                              ^
  symbol:   method getValue()
  location: variable cloned of type Int
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:53: error: cannot find symbol
        assertEquals(-42, cloned.getValue());
                                ^
  symbol:   method getValue()
  location: variable cloned of type Int
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:68: error: cannot find symbol
        assertEquals(Integer.MAX_VALUE, cloned.getValue());
                                              ^
  symbol:   method getValue()
  location: variable cloned of type Int
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCloneGeneratedTest.java:83: error: cannot find symbol
        assertEquals(Integer.MIN_VALUE, cloned.getValue());
                                              ^
  symbol:   method getValue()
  location: variable cloned of type Int
6 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:14: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class AddCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:16: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:17: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:25: error: cannot find symbol
        MathNodeStub(MathNode left, MathNode right) {
                     ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:25: error: cannot find symbol
        MathNodeStub(MathNode left, MathNode right) {
                                    ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:38: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:43: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:71: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:72: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:74: error: cannot find symbol
        AddNode(MathNode left, MathNode right) {
                ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:74: error: cannot find symbol
        AddNode(MathNode left, MathNode right) {
                               ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:80: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:85: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class AddNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:31: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:37: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:42: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:55: error: cannot find symbol
            return getValue();
                   ^
  symbol:   method getValue()
  location: class IntegerNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/AddCalculateGeneratedTest.java:66: error: cannot find symbol
            return getValue();
                   ^
  symbol:   method getValue()
  location: class DoubleNode
19 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:20: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:34: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:35: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:37: error: cannot find symbol
        MultUnderTest(MathNode left, MathNode right) {
                      ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:37: error: cannot find symbol
        MultUnderTest(MathNode left, MathNode right) {
                                     ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:43: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:48: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MultUnderTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:27: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:72: error: cannot find symbol
        MathNode leftNode = new MathNodeStub(left) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:73: error: cannot find symbol
        MathNode rightNode = new MathNodeStub(right) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:99: error: cannot find symbol
        MathNode leftNode = new MathNodeStub(left) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:100: error: cannot find symbol
        MathNode rightNode = new MathNodeStub(right) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:112: error: cannot find symbol
        MathNode leftNode = new MathNodeStub(Integer.MAX_VALUE) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCalculateGeneratedTest.java:113: error: cannot find symbol
        MathNode rightNode = new MathNodeStub(2) {};
        ^
  symbol:   class MathNode
  location: class MultCalculateGeneratedTest
15 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:10: error: package org.mockito does not exist
import static org.mockito.Mockito.*;
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:15: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:24: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:29: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:37: error: cannot find symbol
        MathNode left = new MathNodeStub("2", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:38: error: cannot find symbol
        MathNode right = new MathNodeStub("3", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:48: error: cannot find symbol
        MathNode left = new MathNodeStub("2", true);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:49: error: cannot find symbol
        MathNode right = new MathNodeStub("3", true);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:60: error: cannot find symbol
        MathNode left = new MathNodeStub("0", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:61: error: cannot find symbol
        MathNode right = new MathNodeStub("0", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:71: error: cannot find symbol
        MathNode left = new MathNodeStub("-5", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:72: error: cannot find symbol
        MathNode right = new MathNodeStub("-10", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:82: error: cannot find symbol
        MathNode left = new MathNodeStub(String.valueOf(Integer.MAX_VALUE), false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:83: error: cannot find symbol
        MathNode right = new MathNodeStub(String.valueOf(Integer.MIN_VALUE), false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:93: error: cannot find symbol
        MathNode left = new MathNodeStub("3.14", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:94: error: cannot find symbol
        MathNode right = new MathNodeStub("2.71", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:104: error: cannot find symbol
        MathNode left = new MathNodeStub("1.0E-100", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:105: error: cannot find symbol
        MathNode right = new MathNodeStub("1.0E-200", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:115: error: cannot find symbol
        MathNode left = new MathNodeStub("1.0E100", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:116: error: cannot find symbol
        MathNode right = new MathNodeStub("1.0E200", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:126: error: cannot find symbol
        MathNode left = new MathNodeStub("15", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:127: error: cannot find symbol
        MathNode right = new MathNodeStub("-7", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:138: error: cannot find symbol
        MathNode left = new MathNodeStub(varName, false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultToStringGeneratedTest.java:139: error: cannot find symbol
        MathNode right = new MathNodeStub("2", false);
        ^
  symbol:   class MathNode
  location: class MultToStringGeneratedTest
25 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryBuildNodeGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCalculateGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetParensGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetParensGeneratedTest.java:14: error: Operator is abstract; cannot be instantiated
        Operator operator = new Operator();
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetParensGeneratedTest.java:29: error: Operator is abstract; cannot be instantiated
        Operator operator = new Operator();
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetParensGeneratedTest.java:43: error: Operator is abstract; cannot be instantiated
        Operator operator = new Operator();
                            ^
3 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:17: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:26: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:31: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:47: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setLeftNode(new ConstantNode(10.0, "10.0"));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:48: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setRightNode(new ConstantNode(2.0, "2.0"));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:55: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setLeftNode(new ConstantNode(-10.0, "-10.0"));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:56: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setRightNode(new ConstantNode(2.0, "2.0"));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:63: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setLeftNode(new ConstantNode(10.0, "10.0"));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:64: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setRightNode(new ConstantNode(-2.0, "-2.0"));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:71: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setLeftNode(new ConstantNode(-10.0, "-10.0"));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:72: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setRightNode(new ConstantNode(-2.0, "-2.0"));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:80: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setLeftNode(new ConstantNode(10.0, "10.0"));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:81: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setRightNode(new ConstantNode(0.0, "0.0"));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:89: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setLeftNode(new ConstantNode(-10.0, "-10.0"));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:90: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setRightNode(new ConstantNode(0.0, "0.0"));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:98: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setLeftNode(new ConstantNode(0.0, "0.0"));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:99: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setRightNode(new ConstantNode(0.0, "0.0"));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:108: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setLeftNode(new ConstantNode(left, left.toString()));
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:109: error: incompatible types: ConstantNode cannot be converted to Expression
        div.setRightNode(new ConstantNode(right, right.toString()));
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:112: error: double cannot be dereferenced
            assertTrue(div.calculate().doubleValue().isNaN());
                                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:114: error: double cannot be dereferenced
            assertTrue(div.calculate().doubleValue().isInfinite());
                                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:142: error: cannot find symbol
        MathNode left = new ConstantNode(5.0, "5.0");
        ^
  symbol:   class MathNode
  location: class DivCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCalculateGeneratedTest.java:143: error: cannot find symbol
        MathNode right = new ConstantNode(2.0, "2.0");
        ^
  symbol:   class MathNode
  location: class DivCalculateGeneratedTest
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
24 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCheckTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCheckTreeGeneratedTest.java:11: error: ConcreteExpression is not abstract and does not override abstract method toString() in Expression
    static class ConcreteExpression extends Expression {
           ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecToStringGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:20: error: <anonymous mathNode.MultCloneGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        leftNode = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:26: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:32: error: <anonymous mathNode.MultCloneGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        rightNode = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:38: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:59: error: cannot find symbol
        assertEquals(mult.getLeftNode().evaluate(), cloned.getLeftNode().evaluate());
                                       ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:59: error: cannot find symbol
        assertEquals(mult.getLeftNode().evaluate(), cloned.getLeftNode().evaluate());
                                                                        ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:65: error: cannot find symbol
        assertEquals(mult.getRightNode().evaluate(), cloned.getRightNode().evaluate());
                                        ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:65: error: cannot find symbol
        assertEquals(mult.getRightNode().evaluate(), cloned.getRightNode().evaluate());
                                                                          ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:83: error: <anonymous mathNode.MultCloneGeneratedTest$3> is not abstract and does not override abstract method checkTree() in Expression
        Expression testNode = new Expression() {
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:89: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:99: error: cannot find symbol
        assertEquals(value, cloned.getLeftNode().evaluate());
                                                ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:100: error: cannot find symbol
        assertEquals(value, cloned.getRightNode().evaluate());
                                                 ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:105: error: <anonymous mathNode.MultCloneGeneratedTest$4> is not abstract and does not override abstract method checkTree() in Expression
        Expression largeNode = new Expression() {
                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:111: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:121: error: cannot find symbol
        assertEquals(1e308, cloned.getLeftNode().evaluate());
                                                ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:122: error: cannot find symbol
        assertEquals(1e308, cloned.getRightNode().evaluate());
                                                 ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:127: error: <anonymous mathNode.MultCloneGeneratedTest$5> is not abstract and does not override abstract method checkTree() in Expression
        Expression smallNode = new Expression() {
                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:133: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:143: error: cannot find symbol
        assertEquals(1e-308, cloned.getLeftNode().evaluate());
                                                 ^
  symbol:   method evaluate()
  location: class Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/MultCloneGeneratedTest.java:144: error: cannot find symbol
        assertEquals(1e-308, cloned.getRightNode().evaluate());
                                                  ^
  symbol:   method evaluate()
  location: class Expression
20 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java:14: error: OperatorStub is not abstract and does not override abstract method toString() in Expression
    static class OperatorStub extends Operator {
           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java:27: error: getLeftNode() in OperatorStub cannot override getLeftNode() in Operator
        public Expression getLeftNode() { return null; }
                          ^
  return type mathNode.OperatorGetPrecedenceGeneratedTest.Expression is not compatible with mathNode.Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java:26: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java:30: error: getRightNode() in OperatorStub cannot override getRightNode() in Operator
        public Expression getRightNode() { return null; }
                          ^
  return type mathNode.OperatorGetPrecedenceGeneratedTest.Expression is not compatible with mathNode.Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java:29: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java:32: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetPrecedenceGeneratedTest.java:35: error: method does not override or implement a method from a supertype
        @Override
        ^
7 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivCloneGeneratedTest.java:14: error: interface expected here
    static abstract class ExpressionStub implements Expression, Cloneable {
                                                    ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCalculateGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntToStringGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:79: error: cannot find symbol
    void testToString_parameterized(MathNode left, MathNode right, boolean hasParens, String expected) {
                                    ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:79: error: cannot find symbol
    void testToString_parameterized(MathNode left, MathNode right, boolean hasParens, String expected) {
                                                   ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:17: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:37: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:42: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:26: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:31: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:36: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:41: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:49: error: cannot find symbol
        MathNode left = new MathNodeStub("5", false);
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:50: error: cannot find symbol
        MathNode right = new MathNodeStub("3", false);
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:64: error: cannot find symbol
        MathNode left = new MathNodeStub("x", false);
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:65: error: cannot find symbol
        MathNode right = new MathNodeStub("y", false);
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:128: error: cannot find symbol
        MathNode complexLeft = new MathNodeStub("(2 + 3)", false);
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubToStringGeneratedTest.java:129: error: cannot find symbol
        MathNode complexRight = new MathNodeStub("(4 * 5)", false);
        ^
  symbol:   class MathNode
  location: class SubToStringGeneratedTest
16 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:18: error: <anonymous mathNode.SubCloneGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockLeft = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:28: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:34: error: <anonymous mathNode.SubCloneGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        mockRight = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:44: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:63: error: cannot find symbol
        assertEquals(sub.evaluate(), cloned.evaluate(), 1e-9);
                        ^
  symbol:   method evaluate()
  location: variable sub of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:63: error: cannot find symbol
        assertEquals(sub.evaluate(), cloned.evaluate(), 1e-9);
                                           ^
  symbol:   method evaluate()
  location: variable cloned of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:102: error: <anonymous mathNode.SubCloneGeneratedTest$3> is not abstract and does not override abstract method checkTree() in Expression
        mockLeft = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:112: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:118: error: <anonymous mathNode.SubCloneGeneratedTest$4> is not abstract and does not override abstract method checkTree() in Expression
        mockRight = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:128: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:138: error: cannot find symbol
        assertEquals(sub.evaluate(), cloned.evaluate(), 1e-9);
                        ^
  symbol:   method evaluate()
  location: variable sub of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:138: error: cannot find symbol
        assertEquals(sub.evaluate(), cloned.evaluate(), 1e-9);
                                           ^
  symbol:   method evaluate()
  location: variable cloned of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:143: error: <anonymous mathNode.SubCloneGeneratedTest$5> is not abstract and does not override abstract method checkTree() in Expression
        mockLeft = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:153: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:159: error: <anonymous mathNode.SubCloneGeneratedTest$6> is not abstract and does not override abstract method checkTree() in Expression
        mockRight = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:169: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:179: error: cannot find symbol
        assertEquals(sub.evaluate(), cloned.evaluate(), 1e-9);
                        ^
  symbol:   method evaluate()
  location: variable sub of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:179: error: cannot find symbol
        assertEquals(sub.evaluate(), cloned.evaluate(), 1e-9);
                                           ^
  symbol:   method evaluate()
  location: variable cloned of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:184: error: <anonymous mathNode.SubCloneGeneratedTest$7> is not abstract and does not override abstract method checkTree() in Expression
        mockLeft = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:194: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:200: error: <anonymous mathNode.SubCloneGeneratedTest$8> is not abstract and does not override abstract method checkTree() in Expression
        mockRight = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:210: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:220: error: cannot find symbol
        assertEquals(0.0, cloned.evaluate(), 1e-9);
                                ^
  symbol:   method evaluate()
  location: variable cloned of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:221: error: cannot find symbol
        assertEquals(sub.evaluate(), cloned.evaluate(), 1e-9);
                        ^
  symbol:   method evaluate()
  location: variable sub of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:221: error: cannot find symbol
        assertEquals(sub.evaluate(), cloned.evaluate(), 1e-9);
                                           ^
  symbol:   method evaluate()
  location: variable cloned of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:226: error: <anonymous mathNode.SubCloneGeneratedTest$9> is not abstract and does not override abstract method checkTree() in Expression
        mockLeft = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:236: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:242: error: <anonymous mathNode.SubCloneGeneratedTest$10> is not abstract and does not override abstract method checkTree() in Expression
        mockRight = new Expression() {
                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:252: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:262: error: cannot find symbol
        assertEquals(sub.evaluate(), cloned.evaluate(), 1e-9);
                        ^
  symbol:   method evaluate()
  location: variable sub of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCloneGeneratedTest.java:262: error: cannot find symbol
        assertEquals(sub.evaluate(), cloned.evaluate(), 1e-9);
                                           ^
  symbol:   method evaluate()
  location: variable cloned of type Sub
31 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:17: error: cannot find symbol
    static class MathNodeStub extends MathNode {
                                      ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:37: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:42: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:48: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:49: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:52: error: cannot find symbol
        TestableDiv(MathNode left, MathNode right, boolean parens) {
                    ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:52: error: cannot find symbol
        TestableDiv(MathNode left, MathNode right, boolean parens) {
                                   ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:59: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:64: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class TestableDiv
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:26: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:31: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:36: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:41: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:76: error: cannot find symbol
        MathNode left = new MathNodeStub("5", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:77: error: cannot find symbol
        MathNode right = new MathNodeStub("3", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:85: error: cannot find symbol
        MathNode left = new MathNodeStub("5", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:86: error: cannot find symbol
        MathNode right = new MathNodeStub("3", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:94: error: cannot find symbol
        MathNode left = new MathNodeStub("(2 + 3)", true);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:95: error: cannot find symbol
        MathNode right = new MathNodeStub("x", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:103: error: cannot find symbol
        MathNode left = new MathNodeStub("(2 + 3)", true);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:104: error: cannot find symbol
        MathNode right = new MathNodeStub("x", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:112: error: cannot find symbol
        MathNode left = new MathNodeStub("", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:113: error: cannot find symbol
        MathNode right = new MathNodeStub("", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:121: error: cannot find symbol
        MathNode left = new MathNodeStub("", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:122: error: cannot find symbol
        MathNode right = new MathNodeStub("", false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:131: error: cannot find symbol
        MathNode left = new MathNodeStub(leftStr, false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DivToStringGeneratedTest.java:132: error: cannot find symbol
        MathNode right = new MathNodeStub(rightStr, false);
        ^
  symbol:   class MathNode
  location: class DivToStringGeneratedTest
28 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCloneGeneratedTest.java:14: error: Expression is abstract; cannot be instantiated
        expression = new Expression();
                     ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:17: error: <anonymous mathNode.OperatorGetRightNodeGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockExpression = new Expression() {
                                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:18: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:26: error: constructor Operator in class Operator cannot be applied to given types;
        operator = new Operator(mockExpression, mockExpression) {
                   ^
  required: no arguments
  found:    Expression,Expression
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:26: error: <anonymous mathNode.OperatorGetRightNodeGeneratedTest$2> is not abstract and does not override abstract method calculate() in Expression
        operator = new Operator(mockExpression, mockExpression) {
                                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:27: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:52: error: <anonymous mathNode.OperatorGetRightNodeGeneratedTest$3> is not abstract and does not override abstract method checkTree() in Expression
        Expression newNode = new Expression() {
                                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:53: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:74: error: constructor Operator in class Operator cannot be applied to given types;
        Operator nullOperator = new Operator(mockExpression, null) {
                                ^
  required: no arguments
  found:    Expression,<null>
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:74: error: <anonymous mathNode.OperatorGetRightNodeGeneratedTest$4> is not abstract and does not override abstract method calculate() in Expression
        Operator nullOperator = new Operator(mockExpression, null) {
                                                                   ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetRightNodeGeneratedTest.java:75: error: method does not override or implement a method from a supertype
            @Override
            ^
10 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionToStringGeneratedTest.java:15: error: ConcreteExpression is not abstract and does not override abstract method checkTree() in Expression
    static class ConcreteExpression extends Expression {
           ^
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionIsParensGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCheckTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/IntCheckTreeGeneratedTest.java:14: error: constructor Int in class Int cannot be applied to given types;
        Int intNode = new Int(); // Assuming default constructor exists
                      ^
  required: int
  found:    no arguments
  reason: actual and formal argument lists differ in length
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:16: error: cannot find symbol
    MathNode getLeftNode() { return null; }
    ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:17: error: cannot find symbol
    MathNode getRightNode() { return null; }
    ^
  symbol:   class MathNode
  location: class SubCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:22: error: cannot find symbol
    private MathNode left;
            ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:23: error: cannot find symbol
    private MathNode right;
            ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:25: error: cannot find symbol
    TestableSub(MathNode left, MathNode right) {
                ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:25: error: cannot find symbol
    TestableSub(MathNode left, MathNode right) {
                               ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:31: error: cannot find symbol
    MathNode getLeftNode() {
    ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:36: error: cannot find symbol
    MathNode getRightNode() {
    ^
  symbol:   class MathNode
  location: class TestableSub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:42: error: cannot find symbol
class ValueNode extends MathNode {
                        ^
  symbol: class MathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:31: error: getLeftNode() in TestableSub cannot override getLeftNode() in Operator
    MathNode getLeftNode() {
             ^
  attempting to assign weaker access privileges; was public
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:36: error: getRightNode() in TestableSub cannot override getRightNode() in Operator
    MathNode getRightNode() {
             ^
  attempting to assign weaker access privileges; was public
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:49: error: method does not override or implement a method from a supertype
    @Override
    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:63: error: cannot find symbol
        MathNode leftNode = new ValueNode(left);
        ^
  symbol:   class MathNode
  location: class TestMathNodeSubGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:64: error: cannot find symbol
        MathNode rightNode = new ValueNode(right);
        ^
  symbol:   class MathNode
  location: class TestMathNodeSubGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:92: error: cannot find symbol
        MathNode leftNode = new ValueNode(left);
        ^
  symbol:   class MathNode
  location: class TestMathNodeSubGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:93: error: cannot find symbol
        MathNode rightNode = new ValueNode(right);
        ^
  symbol:   class MathNode
  location: class TestMathNodeSubGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:107: error: cannot find symbol
            new Pair<>((Number) -1, -1.5),
                        ^
  symbol:   variable Number
  location: class TestMathNodeSubGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:119: error: cannot find symbol
        MathNode leftNode = new ValueNode(left);
        ^
  symbol:   class MathNode
  location: class TestMathNodeSubGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:120: error: cannot find symbol
        MathNode rightNode = new ValueNode(right);
        ^
  symbol:   class MathNode
  location: class TestMathNodeSubGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:144: error: cannot find symbol
        MathNode leftNode = new ValueNode(Integer.MAX_VALUE);
        ^
  symbol:   class MathNode
  location: class TestMathNodeSubGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:145: error: cannot find symbol
        MathNode rightNode = new ValueNode(-1);
        ^
  symbol:   class MathNode
  location: class TestMathNodeSubGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:157: error: cannot find symbol
        MathNode leftNode = new ValueNode(1.0000000000000002);
        ^
  symbol:   class MathNode
  location: class TestMathNodeSubGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/SubCalculateGeneratedTest.java:158: error: cannot find symbol
        MathNode rightNode = new ValueNode(1.0000000000000001);
        ^
  symbol:   class MathNode
  location: class TestMathNodeSubGeneratedTest
24 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCloneGeneratedTest.java:20: error: <anonymous mathNode.PowCloneGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockLeft = new Expression() {
                                    ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCloneGeneratedTest.java:26: error: <anonymous mathNode.PowCloneGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        mockRight = new Expression() {
                                     ^
2 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:15: error: interface expected here
    static class ExpressionStub implements Expression {
                                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:32: error: <anonymous mathNode.OperatorSetRightNodeGeneratedTest$1> is not abstract and does not override abstract method toString() in Expression
        operator = new Operator() {
                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:50: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:62: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:65: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:69: error: incompatible types: ExpressionStub cannot be converted to Expression
        mockExpression = new ExpressionStub("test");
                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:75: error: incompatible types: ExpressionStub cannot be converted to Expression
        Expression newNode = new ExpressionStub("newNode");
                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:96: error: incompatible types: ExpressionStub cannot be converted to Expression
        Expression firstNode = new ExpressionStub("first");
                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:97: error: incompatible types: ExpressionStub cannot be converted to Expression
        Expression secondNode = new ExpressionStub("second");
                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorSetRightNodeGeneratedTest.java:113: error: incompatible types: ExpressionStub cannot be converted to Expression
        Expression sameNode = new ExpressionStub("same");
                              ^
10 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCloneGeneratedTest.java:13: error: constructor Dec in class Dec cannot be applied to given types;
        Dec original = new Dec();
                       ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCloneGeneratedTest.java:21: error: constructor Dec in class Dec cannot be applied to given types;
        Dec original = new Dec();
                       ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCloneGeneratedTest.java:29: error: constructor Dec in class Dec cannot be applied to given types;
        Dec dec = new Dec();
                  ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
3 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:40: error: getLeftNode() in <anonymous mathNode.PowToStringGeneratedTest$1> cannot override getLeftNode() in Operator
            public Object getLeftNode() {
                          ^
  return type Object is not compatible with Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:39: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:45: error: getRightNode() in <anonymous mathNode.PowToStringGeneratedTest$1> cannot override getRightNode() in Operator
            public Object getRightNode() {
                          ^
  return type Object is not compatible with Expression
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowToStringGeneratedTest.java:44: error: method does not override or implement a method from a supertype
            @Override
            ^
4 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:4: error: cannot find symbol
import mathNode.MathNode;
               ^
  symbol:   class MathNode
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:17: error: cannot find symbol
    static abstract class MathNodeStub extends MathNode {
                                               ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:19: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:20: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:28: error: cannot find symbol
        MathNodeStub(MathNode left, MathNode right) {
                     ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:28: error: cannot find symbol
        MathNodeStub(MathNode left, MathNode right) {
                                    ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:40: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:45: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class MathNodeStub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:62: error: cannot find symbol
        private final MathNode left;
                      ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:63: error: cannot find symbol
        private final MathNode right;
                      ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:65: error: cannot find symbol
        TestPow(MathNode left, MathNode right) {
                ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:65: error: cannot find symbol
        TestPow(MathNode left, MathNode right) {
                               ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:71: error: cannot find symbol
        public MathNode getLeftNode() {
               ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:76: error: cannot find symbol
        public MathNode getRightNode() {
               ^
  symbol:   class MathNode
  location: class TestPow
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:34: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:39: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:44: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:49: error: method does not override or implement a method from a supertype
        @Override
        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:83: error: cannot find symbol
        MathNode base = new MathNodeStub(2.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:83: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(2.0);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:84: error: cannot find symbol
        MathNode exponent = new MathNodeStub(3.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:84: error: MathNodeStub is abstract; cannot be instantiated
        MathNode exponent = new MathNodeStub(3.0);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:95: error: cannot find symbol
        MathNode base = new MathNodeStub(-2.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:95: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(-2.0);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:96: error: cannot find symbol
        MathNode exponent = new MathNodeStub(2.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:96: error: MathNodeStub is abstract; cannot be instantiated
        MathNode exponent = new MathNodeStub(2.0);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:107: error: cannot find symbol
        MathNode base = new MathNodeStub(-2.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:107: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(-2.0);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:108: error: cannot find symbol
        MathNode exponent = new MathNodeStub(3.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:108: error: MathNodeStub is abstract; cannot be instantiated
        MathNode exponent = new MathNodeStub(3.0);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:119: error: cannot find symbol
        MathNode base = new MathNodeStub(0.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:119: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(0.0);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:120: error: cannot find symbol
        MathNode exponent = new MathNodeStub(5.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:120: error: MathNodeStub is abstract; cannot be instantiated
        MathNode exponent = new MathNodeStub(5.0);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:131: error: cannot find symbol
        MathNode base = new MathNodeStub(0.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:131: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(0.0);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:132: error: cannot find symbol
        MathNode exponent = new MathNodeStub(0.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:132: error: MathNodeStub is abstract; cannot be instantiated
        MathNode exponent = new MathNodeStub(0.0);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:143: error: cannot find symbol
        MathNode base = new MathNodeStub(1.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:143: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(1.0);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:144: error: cannot find symbol
        MathNode exponent = new MathNodeStub(100.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:144: error: MathNodeStub is abstract; cannot be instantiated
        MathNode exponent = new MathNodeStub(100.0);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:155: error: cannot find symbol
        MathNode base = new MathNodeStub(999.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:155: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(999.0);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:156: error: cannot find symbol
        MathNode exponent = new MathNodeStub(0.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:156: error: MathNodeStub is abstract; cannot be instantiated
        MathNode exponent = new MathNodeStub(0.0);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:167: error: cannot find symbol
        MathNode base = new MathNodeStub(2.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:167: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(2.0);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:168: error: cannot find symbol
        MathNode exponent = new MathNodeStub(-3.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:168: error: MathNodeStub is abstract; cannot be instantiated
        MathNode exponent = new MathNodeStub(-3.0);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:179: error: cannot find symbol
        MathNode base = new MathNodeStub(0.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:179: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(0.0);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:180: error: cannot find symbol
        MathNode exponent = new MathNodeStub(-2.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:180: error: MathNodeStub is abstract; cannot be instantiated
        MathNode exponent = new MathNodeStub(-2.0);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:189: error: cannot find symbol
        MathNode base = new MathNodeStub(baseVal);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:189: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(baseVal);
                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:190: error: cannot find symbol
        MathNode exponent = new MathNodeStub(expVal);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:190: error: MathNodeStub is abstract; cannot be instantiated
        MathNode exponent = new MathNodeStub(expVal);
                            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:215: error: cannot find symbol
        MathNode base = new MathNodeStub(new MathNodeStub(2.0), new MathNodeStub(3.0)) {
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:215: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(new MathNodeStub(2.0), new MathNodeStub(3.0)) {
                                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:215: error: MathNodeStub is abstract; cannot be instantiated
        MathNode base = new MathNodeStub(new MathNodeStub(2.0), new MathNodeStub(3.0)) {
                                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:221: error: cannot find symbol
        MathNode exponent = new MathNodeStub(4.0);
        ^
  symbol:   class MathNode
  location: class PowCalculateGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/PowCalculateGeneratedTest.java:221: error: MathNodeStub is abstract; cannot be instantiated
        MathNode exponent = new MathNodeStub(4.0);
                            ^
63 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:18: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        mockLeftNode = new Expression() {};
                                        ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:19: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        mockRightNode = new Expression() {};
                                         ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:22: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$3> is not abstract and does not override abstract method calculate() in Expression
        operator = new Operator() {
                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:23: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:48: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$4> is not abstract and does not override abstract method calculate() in Expression
        Operator emptyOperator = new Operator() {
                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:49: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:76: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$5> is not abstract and does not override abstract method calculate() in Expression
        Operator emptyOperator = new Operator() {
                                                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:77: error: method does not override or implement a method from a supertype
            @Override
            ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:94: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$6> is not abstract and does not override abstract method checkTree() in Expression
        Expression newLeftNode = new Expression() {};
                                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/OperatorGetLeftNodeGeneratedTest.java:106: error: <anonymous mathNode.OperatorGetLeftNodeGeneratedTest$7> is not abstract and does not override abstract method checkTree() in Expression
        Expression newRightNode = new Expression() {};
                                                   ^
10 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCheckTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/DecCheckTreeGeneratedTest.java:13: error: constructor Dec in class Dec cannot be applied to given types;
        Dec dec = new Dec();
                  ^
  required: double
  found:    no arguments
  reason: actual and formal argument lists differ in length
1 error

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryCloneGeneratedTest.java:14: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown
        Factory cloned = (Factory) original.clone();
                                                 ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/FactoryCloneGeneratedTest.java:25: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown
        Object cloned = original.clone();
                                      ^
2 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java:26: error: <anonymous mathNode.ExpressionCalculateGeneratedTest$1> is not abstract and does not override abstract method checkTree() in Expression
        Expression expr = new TestExpression() {
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java:41: error: <anonymous mathNode.ExpressionCalculateGeneratedTest$2> is not abstract and does not override abstract method checkTree() in Expression
        Expression expr = new TestExpression() {
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java:60: error: <anonymous mathNode.ExpressionCalculateGeneratedTest$3> is not abstract and does not override abstract method checkTree() in Expression
        Expression expr = new TestExpression() {
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java:74: error: <anonymous mathNode.ExpressionCalculateGeneratedTest$4> is not abstract and does not override abstract method checkTree() in Expression
        Expression expr = new TestExpression() {
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java:88: error: <anonymous mathNode.ExpressionCalculateGeneratedTest$5> is not abstract and does not override abstract method checkTree() in Expression
        Expression expr = new TestExpression() {
                                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java:102: error: <anonymous mathNode.ExpressionCalculateGeneratedTest$6> is not abstract and does not override abstract method checkTree() in Expression
        Expression intExpr = new TestExpression() {
                                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java:109: error: <anonymous mathNode.ExpressionCalculateGeneratedTest$7> is not abstract and does not override abstract method checkTree() in Expression
        Expression doubleExpr = new TestExpression() {
                                                     ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathNode/ExpressionCalculateGeneratedTest.java:129: error: <anonymous mathNode.ExpressionCalculateGeneratedTest$8> is not abstract and does not override abstract method checkTree() in Expression
        Expression expr = new TestExpression() {
                                               ^
8 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:9: error: cannot find symbol
import mathTree.mathNode;
               ^
  symbol:   class mathNode
  location: package mathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:19: error: cannot find symbol
    private mathNode invokeBuildTree(MathTree tree, LinkedList<String> tokens, boolean isParens) throws Exception {
            ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:22: error: cannot find symbol
        return (mathNode) method.invoke(tree, tokens, isParens);
                ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:29: error: cannot find symbol
        mathNode result = invokeBuildTree(tree, tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:38: error: cannot find symbol
        mathNode result = invokeBuildTree(tree, tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:40: error: cannot find symbol
        assertEquals(42, ((mathNode.Number)result).getValue());
                                   ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:49: error: cannot find symbol
        mathNode result = invokeBuildTree(tree, tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:51: error: cannot find symbol
        assertEquals(Integer.parseInt(value), ((mathNode.Number)result).getValue());
                                                        ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:61: error: cannot find symbol
        mathNode result = invokeBuildTree(tree, tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:65: error: cannot find symbol
        assertEquals(1, ((mathNode.Number)addNode.getLeft()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:65: error: cannot find symbol
        assertEquals(1, ((mathNode.Number)addNode.getLeft()).getValue());
                                                 ^
  symbol:   method getLeft()
  location: variable addNode of type Add
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:66: error: cannot find symbol
        assertEquals(2, ((mathNode.Number)addNode.getRight()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:66: error: cannot find symbol
        assertEquals(2, ((mathNode.Number)addNode.getRight()).getValue());
                                                 ^
  symbol:   method getRight()
  location: variable addNode of type Add
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:76: error: cannot find symbol
        mathNode result = invokeBuildTree(tree, tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:80: error: cannot find symbol
        assertEquals(5, ((mathNode.Number)subNode.getLeft()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:80: error: cannot find symbol
        assertEquals(5, ((mathNode.Number)subNode.getLeft()).getValue());
                                                 ^
  symbol:   method getLeft()
  location: variable subNode of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:81: error: cannot find symbol
        assertEquals(3, ((mathNode.Number)subNode.getRight()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:81: error: cannot find symbol
        assertEquals(3, ((mathNode.Number)subNode.getRight()).getValue());
                                                 ^
  symbol:   method getRight()
  location: variable subNode of type Sub
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:91: error: cannot find symbol
        mathNode result = invokeBuildTree(tree, tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:93: error: cannot find symbol
        assertTrue(result instanceof mathNode.Mul);
                                             ^
  symbol:   class Mul
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:94: error: cannot find symbol
        mathNode.Mul mulNode = (mathNode.Mul) result;
                ^
  symbol:   class Mul
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:94: error: cannot find symbol
        mathNode.Mul mulNode = (mathNode.Mul) result;
                                        ^
  symbol:   class Mul
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:95: error: cannot find symbol
        assertEquals(4, ((mathNode.Number)mulNode.getLeft()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:96: error: cannot find symbol
        assertEquals(6, ((mathNode.Number)mulNode.getRight()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:106: error: cannot find symbol
        mathNode result = invokeBuildTree(tree, tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:110: error: cannot find symbol
        assertEquals(8, ((mathNode.Number)divNode.getLeft()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:110: error: cannot find symbol
        assertEquals(8, ((mathNode.Number)divNode.getLeft()).getValue());
                                                 ^
  symbol:   method getLeft()
  location: variable divNode of type Div
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:111: error: cannot find symbol
        assertEquals(2, ((mathNode.Number)divNode.getRight()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:111: error: cannot find symbol
        assertEquals(2, ((mathNode.Number)divNode.getRight()).getValue());
                                                 ^
  symbol:   method getRight()
  location: variable divNode of type Div
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:125: error: cannot find symbol
        mathNode result = invokeBuildTree(tree, tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:127: error: cannot find symbol
        assertTrue(result instanceof mathNode.Mul);
                                             ^
  symbol:   class Mul
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:128: error: cannot find symbol
        mathNode.Mul mulNode = (mathNode.Mul) result;
                ^
  symbol:   class Mul
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:128: error: cannot find symbol
        mathNode.Mul mulNode = (mathNode.Mul) result;
                                        ^
  symbol:   class Mul
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:131: error: cannot find symbol
        assertEquals(1, ((mathNode.Number)addNode.getLeft()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:131: error: cannot find symbol
        assertEquals(1, ((mathNode.Number)addNode.getLeft()).getValue());
                                                 ^
  symbol:   method getLeft()
  location: variable addNode of type Add
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:132: error: cannot find symbol
        assertEquals(2, ((mathNode.Number)addNode.getRight()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:132: error: cannot find symbol
        assertEquals(2, ((mathNode.Number)addNode.getRight()).getValue());
                                                 ^
  symbol:   method getRight()
  location: variable addNode of type Add
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:133: error: cannot find symbol
        assertEquals(3, ((mathNode.Number)mulNode.getRight()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:145: error: cannot find symbol
        mathNode result = invokeBuildTree(tree, tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:149: error: cannot find symbol
        assertEquals(10, ((mathNode.Number)addNode.getLeft()).getValue());
                                   ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:149: error: cannot find symbol
        assertEquals(10, ((mathNode.Number)addNode.getLeft()).getValue());
                                                  ^
  symbol:   method getLeft()
  location: variable addNode of type Add
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:150: error: cannot find symbol
        assertTrue(addNode.getRight() instanceof mathNode.Mul);
                          ^
  symbol:   method getRight()
  location: variable addNode of type Add
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:150: error: cannot find symbol
        assertTrue(addNode.getRight() instanceof mathNode.Mul);
                                                         ^
  symbol:   class Mul
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:151: error: cannot find symbol
        mathNode.Mul mulNode = (mathNode.Mul) addNode.getRight();
                ^
  symbol:   class Mul
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:151: error: cannot find symbol
        mathNode.Mul mulNode = (mathNode.Mul) addNode.getRight();
                                        ^
  symbol:   class Mul
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:151: error: cannot find symbol
        mathNode.Mul mulNode = (mathNode.Mul) addNode.getRight();
                                                     ^
  symbol:   method getRight()
  location: variable addNode of type Add
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:152: error: cannot find symbol
        assertEquals(2, ((mathNode.Number)mulNode.getLeft()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:153: error: cannot find symbol
        assertEquals(3, ((mathNode.Number)mulNode.getRight()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:161: error: cannot find symbol
        mathNode result = invokeBuildTree(tree, tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:163: error: cannot find symbol
        assertEquals(-42, ((mathNode.Number)result).getValue());
                                    ^
  symbol:   class Number
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:172: error: cannot find symbol
        mathNode result = invokeBuildTree(tree, tokens, false);
        ^
  symbol:   class mathNode
  location: class MathTreeBuildTreeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:174: error: cannot find symbol
        assertTrue(result instanceof mathNode.Neg);
                                             ^
  symbol:   class Neg
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:175: error: cannot find symbol
        mathNode.Neg negNode = (mathNode.Neg) result;
                ^
  symbol:   class Neg
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:175: error: cannot find symbol
        mathNode.Neg negNode = (mathNode.Neg) result;
                                        ^
  symbol:   class Neg
  location: package mathNode
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeBuildTreeGeneratedTest.java:176: error: cannot find symbol
        assertEquals(5, ((mathNode.Number)negNode.getChild()).getValue());
                                  ^
  symbol:   class Number
  location: package mathNode
55 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddDelimiterGeneratedTest.java
Note: /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddDelimiterGeneratedTest.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSaveTokenGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeToStringGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCleanStrListGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/CalcAppMainGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:28: error: rootNode has private access in MathTree
        assertEquals(mathTree.rootNode, clonedTree.rootNode);
                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:28: error: rootNode has private access in MathTree
        assertEquals(mathTree.rootNode, clonedTree.rootNode);
                                                  ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:35: error: nodeFactory has private access in MathTree
        assertNotSame(mathTree.nodeFactory, clonedTree.nodeFactory);
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:35: error: nodeFactory has private access in MathTree
        assertNotSame(mathTree.nodeFactory, clonedTree.nodeFactory);
                                                      ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:40: error: rootNode has private access in MathTree
        mathTree.rootNode = null;
                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:42: error: rootNode has private access in MathTree
        assertNull(clonedTree.rootNode);
                             ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:47: error: nodeFactory has private access in MathTree
        mathTree.nodeFactory = null;
                ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeCloneGeneratedTest.java:49: error: nodeFactory has private access in MathTree
        assertNull(clonedTree.nodeFactory);
                             ^
8 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:4: error: cannot find symbol
import mathTree.mathNode;
               ^
  symbol:   class mathNode
  location: package mathTree
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:16: error: cannot find symbol
        mathNode newNode = new mathNode(5);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:16: error: cannot find symbol
        mathNode newNode = new mathNode(5);
                               ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:18: error: cannot find symbol
        mathNode result = tree.insertNode(null, newNode);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:27: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:27: error: cannot find symbol
        mathNode rootNode = new mathNode(10);
                                ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:29: error: cannot find symbol
        mathNode result = tree.insertNode(rootNode, null);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:39: error: cannot find symbol
        mathNode newNode = new mathNode(value);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:39: error: cannot find symbol
        mathNode newNode = new mathNode(value);
                               ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:41: error: cannot find symbol
        mathNode result = tree.insertNode(null, newNode);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:51: error: cannot find symbol
        mathNode newNode = new mathNode(Integer.MAX_VALUE - 1);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:51: error: cannot find symbol
        mathNode newNode = new mathNode(Integer.MAX_VALUE - 1);
                               ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:53: error: cannot find symbol
        mathNode result = tree.insertNode(null, newNode);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:63: error: cannot find symbol
        mathNode newNode = new mathNode(Integer.MIN_VALUE + 1);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:63: error: cannot find symbol
        mathNode newNode = new mathNode(Integer.MIN_VALUE + 1);
                               ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:65: error: cannot find symbol
        mathNode result = tree.insertNode(null, newNode);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:75: error: cannot find symbol
        mathNode rootNode = new mathNode(42);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:75: error: cannot find symbol
        mathNode rootNode = new mathNode(42);
                                ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:77: error: cannot find symbol
        mathNode result1 = tree.insertNode(rootNode, null);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:78: error: cannot find symbol
        mathNode result2 = tree.insertNode(rootNode, null);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:79: error: cannot find symbol
        mathNode result3 = tree.insertNode(rootNode, null);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:90: error: cannot find symbol
        mathNode node = new mathNode(7);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:90: error: cannot find symbol
        mathNode node = new mathNode(7);
                            ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:92: error: cannot find symbol
        mathNode result = tree.insertNode(null, node);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:101: error: cannot find symbol
        mathNode newNode = new mathNode(0);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:101: error: cannot find symbol
        mathNode newNode = new mathNode(0);
                               ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInsertNodeGeneratedTest.java:103: error: cannot find symbol
        mathNode result = tree.insertNode(null, newNode);
        ^
  symbol:   class mathNode
  location: class MathTreeInsertNodeGeneratedTest
27 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:22: error: constructor StringScanner in class StringScanner cannot be applied to given types;
        scanner = new StringScanner("");
                  ^
  required: no arguments
  found:    String
  reason: actual and formal argument lists differ in length
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:35: error: isDelim(char) has private access in StringScanner
        assertTrue(scanner.isDelim(' '));
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:41: error: isDelim(char) has private access in StringScanner
        assertTrue(scanner.isDelim('\t'));
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:47: error: isDelim(char) has private access in StringScanner
        assertFalse(scanner.isDelim(' '));
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:53: error: isDelim(char) has private access in StringScanner
        assertFalse(scanner.isDelim('\t'));
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:62: error: isDelim(char) has private access in StringScanner
            assertTrue(scanner.isDelim(delim));
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:72: error: isDelim(char) has private access in StringScanner
        assertFalse(scanner.isDelim('a'));
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:73: error: isDelim(char) has private access in StringScanner
        assertFalse(scanner.isDelim('Z'));
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:74: error: isDelim(char) has private access in StringScanner
        assertFalse(scanner.isDelim('9'));
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:83: error: isDelim(char) has private access in StringScanner
        assertTrue(scanner.isDelim(','));
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:84: error: isDelim(char) has private access in StringScanner
        assertTrue(scanner.isDelim(' '));
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:91: error: isDelim(char) has private access in StringScanner
        assertTrue(scanner.isDelim(ch));
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:101: error: isDelim(char) has private access in StringScanner
        assertFalse(scanner.isDelim(ch));
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerIsDelimGeneratedTest.java:110: error: isDelim(char) has private access in StringScanner
        assertTrue(scanner.isDelim('\0'));
                          ^
14 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerScanGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeInitGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:22: error: no suitable method found for addDelimiter(String)
        scanner.addDelimiter(" ");
               ^
    method StringScanner.addDelimiter(char) is not applicable
      (argument mismatch; String cannot be converted to char)
    method StringScanner.addDelimiter(char[]) is not applicable
      (argument mismatch; String cannot be converted to char[])
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:24: error: cannot find symbol
        scanner.tokenize("1 + 2");
               ^
  symbol:   method tokenize(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:33: error: cannot find symbol
        assertNotSame(scanner.getTokenList(), clone.getTokenList());
                             ^
  symbol:   method getTokenList()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:33: error: cannot find symbol
        assertNotSame(scanner.getTokenList(), clone.getTokenList());
                                                   ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:34: error: cannot find symbol
        assertNotSame(scanner.getDelimSet(), clone.getDelimSet());
                             ^
  symbol:   method getDelimSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:34: error: cannot find symbol
        assertNotSame(scanner.getDelimSet(), clone.getDelimSet());
                                                  ^
  symbol:   method getDelimSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:35: error: cannot find symbol
        assertNotSame(scanner.getSpecCharSet(), clone.getSpecCharSet());
                             ^
  symbol:   method getSpecCharSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:35: error: cannot find symbol
        assertNotSame(scanner.getSpecCharSet(), clone.getSpecCharSet());
                                                     ^
  symbol:   method getSpecCharSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:38: error: cannot find symbol
        assertEquals(scanner.getTokenList(), clone.getTokenList());
                            ^
  symbol:   method getTokenList()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:38: error: cannot find symbol
        assertEquals(scanner.getTokenList(), clone.getTokenList());
                                                  ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:39: error: cannot find symbol
        assertEquals(scanner.getDelimSet(), clone.getDelimSet());
                            ^
  symbol:   method getDelimSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:39: error: cannot find symbol
        assertEquals(scanner.getDelimSet(), clone.getDelimSet());
                                                 ^
  symbol:   method getDelimSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:40: error: cannot find symbol
        assertEquals(scanner.getSpecCharSet(), clone.getSpecCharSet());
                            ^
  symbol:   method getSpecCharSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:40: error: cannot find symbol
        assertEquals(scanner.getSpecCharSet(), clone.getSpecCharSet());
                                                    ^
  symbol:   method getSpecCharSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:52: error: cannot find symbol
        assertNotSame(scanner.getTokenList(), clone.getTokenList());
                             ^
  symbol:   method getTokenList()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:52: error: cannot find symbol
        assertNotSame(scanner.getTokenList(), clone.getTokenList());
                                                   ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:53: error: cannot find symbol
        assertNotSame(scanner.getDelimSet(), clone.getDelimSet());
                             ^
  symbol:   method getDelimSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:53: error: cannot find symbol
        assertNotSame(scanner.getDelimSet(), clone.getDelimSet());
                                                  ^
  symbol:   method getDelimSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:54: error: cannot find symbol
        assertNotSame(scanner.getSpecCharSet(), clone.getSpecCharSet());
                             ^
  symbol:   method getSpecCharSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:54: error: cannot find symbol
        assertNotSame(scanner.getSpecCharSet(), clone.getSpecCharSet());
                                                     ^
  symbol:   method getSpecCharSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:56: error: cannot find symbol
        assertTrue(clone.getTokenList().isEmpty());
                        ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:57: error: cannot find symbol
        assertTrue(clone.getDelimSet().isEmpty());
                        ^
  symbol:   method getDelimSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:58: error: cannot find symbol
        assertTrue(clone.getSpecCharSet().isEmpty());
                        ^
  symbol:   method getSpecCharSet()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:64: error: no suitable method found for addDelimiter(String)
        scanner.addDelimiter(",");
               ^
    method StringScanner.addDelimiter(char) is not applicable
      (argument mismatch; String cannot be converted to char)
    method StringScanner.addDelimiter(char[]) is not applicable
      (argument mismatch; String cannot be converted to char[])
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:66: error: cannot find symbol
        scanner.tokenize("3*4,5");
               ^
  symbol:   method tokenize(String)
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:70: error: no suitable method found for addDelimiter(String)
        clone.addDelimiter(";");
             ^
    method StringScanner.addDelimiter(char) is not applicable
      (argument mismatch; String cannot be converted to char)
    method StringScanner.addDelimiter(char[]) is not applicable
      (argument mismatch; String cannot be converted to char[])
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:72: error: cannot find symbol
        clone.tokenize("7-8;9");
             ^
  symbol:   method tokenize(String)
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:75: error: cannot find symbol
        assertFalse(scanner.getDelimSet().contains(";"));
                           ^
  symbol:   method getDelimSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:76: error: cannot find symbol
        assertFalse(scanner.getSpecCharSet().contains('-'));
                           ^
  symbol:   method getSpecCharSet()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:77: error: cannot find symbol
        assertNotEquals(scanner.getTokenList(), clone.getTokenList());
                               ^
  symbol:   method getTokenList()
  location: variable scanner of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:77: error: cannot find symbol
        assertNotEquals(scanner.getTokenList(), clone.getTokenList());
                                                     ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerCloneGeneratedTest.java:85: error: cannot find symbol
        assertNotNull(clone.getTokenList());
                           ^
  symbol:   method getTokenList()
  location: variable clone of type StringScanner
32 errors

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/MathTreeSolveGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerAddSpecialCharGeneratedTest.java

$ javac -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -d /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:20: error: skipWhitespace has private access in StringScanner
        assertFalse(scanner.skipWhitespace);
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:22: error: skipWhitespace has private access in StringScanner
        assertTrue(scanner.skipWhitespace);
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:27: error: delimSet has private access in StringScanner
        assertFalse(scanner.delimSet.contains('a'));
                           ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:29: error: delimSet has private access in StringScanner
        assertTrue(scanner.delimSet.contains('a'));
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:36: error: delimSet has private access in StringScanner
            assertFalse(scanner.delimSet.contains(c));
                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:40: error: delimSet has private access in StringScanner
            assertTrue(scanner.delimSet.contains(c));
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:48: error: delimSet has private access in StringScanner
        assertEquals(0, scanner.delimSet.size());
                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:56: error: delimSet has private access in StringScanner
            assertTrue(scanner.delimSet.contains(c));
                              ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:64: error: delimSet has private access in StringScanner
        assertEquals(1, scanner.delimSet.size());
                               ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:65: error: delimSet has private access in StringScanner
        assertTrue(scanner.delimSet.contains('x'));
                          ^
/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/src/test/sk-llmTest/cl/mathTree/StringScannerSkipWhitespaceGeneratedTest.java:73: error: delimSet has private access in StringScanner
            assertTrue(scanner.delimSet.contains(c));
                              ^
11 errors

$ java -jar /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/lib/junit-platform-console-standalone.jar -cp /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/main:/Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/test --scan-classpath --reports-dir /Users/shiqixuan/Documents/dev/llm-test-case-recovery/new/tasks/steps/1-MVP/simple-math-parser/out/sk-llmOut/cl/reports

Thanks for using JUnit! Support its development at https://junit.org/sponsoring

[36m╷[0m
[36m├─[0m [36mJUnit Jupiter[0m [32m✔[0m
[36m│  ├─[0m [36mIntToStringGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_zeroWithoutParens_returnsZeroString()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_minIntWithoutParens_returnsMinIntString()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_maxIntWithParens_returnsParenthesizedMaxIntString()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_negativeValueWithParens_returnsParenthesizedString(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -42[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[3] -1000[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_positiveValueWithParens_returnsParenthesizedString(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 42[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[3] 1000[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_positiveValueWithoutParens_returnsPlainString(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 42[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[3] 1000[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_zeroWithParens_returnsParenthesizedZeroString()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_minIntWithParens_returnsParenthesizedMinIntString()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_negativeValueWithoutParens_returnsPlainString(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -42[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[3] -1000[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_toString_maxIntWithoutParens_returnsMaxIntString()[0m [32m✔[0m
[36m│  ├─[0m [36mCalcAppMainGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_main_withIntegerEdgeCases(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 2147483647[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[5] -2147483648[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_main_withNoArgs_promptsForInput()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_main_withVeryLargeNumber()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_main_withVerySmallNumber()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_main_withComplexExpression()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_main_withZeroDivision()[0m [32m✔[0m
[36m│  │  └─[0m [36mtest_main_withDoubleEdgeCases(String)[0m [32m✔[0m
[36m│  │     ├─[0m [34m[1] 0.0[0m [32m✔[0m
[36m│  │     ├─[0m [34m[2] 1.0[0m [32m✔[0m
[36m│  │     ├─[0m [34m[3] -1.0[0m [32m✔[0m
[36m│  │     ├─[0m [34m[4] 4.9E-324[0m [32m✔[0m
[36m│  │     └─[0m [34m[5] 1.7976931348623157E308[0m [32m✔[0m
[36m│  ├─[0m [36mStringScannerAddSpecialCharGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addSpecialChar_emptyArrayDoesNotChangeSet()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addSpecialChar_addsSingleCharacter()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addSpecialChar_addsArrayWithMultipleCharacters()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addSpecialChar_duplicateCharacters()[0m [32m✔[0m
[36m│  │  └─[0m [36mtest_addSpecialChar_addsMultipleSpecialCharacters(char)[0m [32m✔[0m
[36m│  │     ├─[0m [34m[1] ([0m [32m✔[0m
[36m│  │     ├─[0m [34m[2] )[0m [32m✔[0m
[36m│  │     ├─[0m [34m[3] *[0m [32m✔[0m
[36m│  │     ├─[0m [34m[4] /[0m [32m✔[0m
[36m│  │     ├─[0m [34m[5] -[0m [32m✔[0m
[36m│  │     └─[0m [34m[6] +[0m [32m✔[0m
[36m│  ├─[0m [36mIntCalculateGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_returnsCorrectValue()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_withoutParens()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_edgeCasesWithParens(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] -2147483648[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[5] 2147483647[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_withParens()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_edgeCasesWithoutParens(int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 1[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] -2147483648[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[5] 2147483647[0m [32m✔[0m
[36m│  │  └─[0m [36mtest_calculate_edgeCases(int)[0m [32m✔[0m
[36m│  │     ├─[0m [34m[1] 0[0m [32m✔[0m
[36m│  │     ├─[0m [34m[2] -1[0m [32m✔[0m
[36m│  │     ├─[0m [34m[3] 1[0m [32m✔[0m
[36m│  │     ├─[0m [34m[4] -2147483648[0m [32m✔[0m
[36m│  │     └─[0m [34m[5] 2147483647[0m [32m✔[0m
[36m│  ├─[0m [36mMathTreeInitGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_withComplexExpression()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_withMinIntegerValues()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_withMaxIntegerValues()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_init_withVerySmallDoubleValues()[0m [31m✘[0m [31mShould handle Double.MIN_VALUE correctly ==> expected: <true> but was: <false>[0m
[36m│  │  ├─[0m [36mtest_init_withWhitespaceOnlyStrings(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2]  [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3]  [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4]  [0m [32m✔[0m
[36m│  │  │  └─[0m [34m[5]       [0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_init_withDeeplyNestedExpression()[0m [31m✘[0m [31mShould handle deeply nested expressions correctly ==> expected: <true> but was: <false>[0m
[36m│  │  ├─[0m [34mtest_init_withZeroValues()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_withVeryLargeDoubleValues()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_init_validMathStatements(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 3 + 4[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[2] ((2 * 3) + 5)[0m [31m✘[0m [31mInitialization should succeed for valid math statement: ((2 * 3) + 5) ==> expected: <true> but was: <false>[0m
[36m│  │  │  ├─[0m [34m[3] 10 / 2 - 3[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 1.5 + 2.5[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] -5 + 3[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[6] 0 * 100[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_withNegativeNumbers()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_init_emptyString()[0m [32m✔[0m
[36m│  │  └─[0m [36mtest_init_invalidMathStatements(String)[0m [32m✔[0m
[36m│  │     ├─[0m [34m[1] [0m [32m✔[0m
[36m│  │     ├─[0m [34m[2]    [0m [32m✔[0m
[36m│  │     ├─[0m [34m[3] ()[0m [32m✔[0m
[36m│  │     ├─[0m [34m[4] (3 + 4[0m [32m✔[0m
[36m│  │     ├─[0m [34m[5] 3 + 4)[0m [32m✔[0m
[36m│  │     ├─[0m [34m[6] +[0m [32m✔[0m
[36m│  │     ├─[0m [34m[7] *[0m [32m✔[0m
[36m│  │     ├─[0m [34m[8] 3 ++ 4[0m [32m✔[0m
[36m│  │     ├─[0m [31m[9] 3 / 0[0m [31m✘[0m [31mInitialization should fail for invalid math statement: 3 / 0 ==> expected: <false> but was: <true>[0m
[36m│  │     └─[0m [34m[10] abc + def[0m [32m✔[0m
[36m│  ├─[0m [36mFactoryBuildNodeGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_buildNode_withVeryLargeDouble()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_buildNode_withNaN()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_buildNode_withSpecialValues(double)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -0.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] -1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] 4.9E-324[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] 1.7976931348623157E308[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[7] Infinity[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[8] -Infinity[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_buildNode_returnsDecInstance()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_buildNode_withVerySmallPositiveDouble()[0m [32m✔[0m
[36m│  ├─[0m [36mDecCalculateGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_returnsStoredValue_zero()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_wrapsNegativeValueInParens_whenParensEnabled()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_returnsStoredValue_negativeInfinity()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_wrapsInParens_whenParensEnabled()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_handlesNegativeInfinityWithParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_returnsStoredValue_positiveInfinity()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_returnsStoredValue_maxDouble()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_formatsValueWithoutParens(double)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] 1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] -1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] 3.14159[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] -2.71828[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[6] 2.2250738585072014E-308[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_wrapsZeroInParens_whenParensEnabled()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_returnsStoredValue_nan()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_returnsStoredValue_positive()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_returnsStoredValue_minDouble()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_calculate_returnsStoredValue_negative()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_handlesNanWithParens()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_toString_handlesInfinityWithParens()[0m [32m✔[0m
[36m│  ├─[0m [36mStringScannerSaveTokenGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_saveToken_withMultipleTokens_addsAllTokens()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] [0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[2]  [0m [31m✘[0m [31mexpected: <true> but was: <false>[0m
[36m│  │  │  ├─[0m [31m[3]   [0m [31m✘[0m [31mexpected: <true> but was: <false>[0m
[36m│  │  │  ├─[0m [31m[4]  [0m [31m✘[0m [31mexpected: <true> but was: <false>[0m
[36m│  │  │  └─[0m [31m[5]  [0m [31m✘[0m [31mexpected: <true> but was: <false>[0m
[36m│  │  ├─[0m [34mtest_saveToken_withVeryLongString_addsTokenToList()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_saveToken_withNonEmptyString_addsTokenToList()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_saveToken_withSpecialCharacters_addsTokenToList()[0m [32m✔[0m
[36m│  │  └─[0m [31mtest_saveToken_withNullString_throwsException()[0m [31m✘[0m [31mUnexpected exception type thrown, expected: <java.lang.NullPointerException> but was: <java.lang.reflect.InvocationTargetException>[0m
[36m│  ├─[0m [36mStringScannerAddDelimiterGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_withDuplicateCharacters()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_withSpecialUnicodeCharacters()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_addDelimiter_withWhitespaceAndBracketCharacters(char)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1]  [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2]  [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3]  [0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] ([0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] )[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] [[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[7] ][0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[8] {[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[9] }[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_withNullArray_throwsNullPointerException()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_withSingleCharacter()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_addDelimiter_withEmptyArray()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_addDelimiter_withMultipleUniqueCharacters()[0m [32m✔[0m
[36m│  ├─[0m [36mDecToStringGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_returnsParenthesizedValueWhenParens()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_toString_handlesSpecialValues(double)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] 0.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[2] -0.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[3] 1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[4] -1.0[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[5] 4.9E-324[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[6] 1.7976931348623157E308[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[7] Infinity[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[8] -Infinity[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[9] NaN[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_handlesNegativeZero()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_returnsRawValueWhenNoParens()[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_toString_handlesVeryLargePositiveDouble()[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_toString_handlesVerySmallPositiveDouble()[0m [32m✔[0m
[36m│  ├─[0m [36mStringScannerScanGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_scan_singleCharacterDelimiter_returnsTwoEmptyTokens()[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_scan_longStringWithDelimiters_returnsCorrectTokens()[0m [31m✘[0m [31mexpected: <21> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_scan_multipleDelimiters_returnsCorrectTokens()[0m [31m✘[0m [31mexpected: <5> but was: <1>[0m
[36m│  │  ├─[0m [34mtest_scan_emptyString_returnsEmptyList()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_scan_onlyDelimiters_returnsCorrectEmptyTokens()[0m [31m✘[0m [31mexpected: <4> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_scan_specialCharacters_returnsCorrectTokens()[0m [31m✘[0m [31mexpected: <7> but was: <1>[0m
[36m│  │  ├─[0m [34mtest_scan_noDelimiters_returnsSingleToken()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_scan_parameterizedInputs_returnsExpectedTokenCount(String, int)[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[1] a b c, 5[0m [31m✘[0m [31mexpected: <5> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[2] 1+2, 5[0m [31m✘[0m [31mexpected: <5> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[3] x:y:z, 5[0m [31m✘[0m [31mexpected: <5> but was: <1>[0m
[36m│  │  │  └─[0m [31m[4] start|middle|end, 5[0m [31m✘[0m [31mexpected: <5> but was: <1>[0m
[36m│  │  ├─[0m [36mtest_scan_variousSingleDelimiters_returnsCorrectTokens(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[1] ,[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[2] ;[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[3] :[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[4] |[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[5] &[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[6] ![0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[7] ?[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[8] .[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[9] @[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[10] #[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[11] $[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[12] %[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[13] ^[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[14] *[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[15] ([0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[16] )[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[17] [[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[18] ][0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[19] {[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[20] }[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[21] <[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[22] >[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[23] =[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[24] +[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[25] -[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  ├─[0m [31m[26] /[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  │  └─[0m [31m[27] \[0m [31m✘[0m [31mexpected: <3> but was: <1>[0m
[36m│  │  └─[0m [31mtest_scan_mixedDelimitersAndText_returnsCorrectTokens()[0m [31m✘[0m [31mexpected: <5> but was: <1>[0m
[36m│  ├─[0m [36mMathTreeSolveGeneratedTest[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_solve_null_root_returns_null[0m [32m✔[0m
[36m│  ├─[0m [36mMathTreeCleanStrListGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_cleanStrList_noNegatives_noChanges()[0m [32m✔[0m
[36m│  │  ├─[0m [31mtest_cleanStrList_zeroAsNegative_handled()[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_cleanStrList_negativeAtStart_splitIntoMinusAndNumber()[0m [31m✘[0m [31mexpected: <5> but was: <3>[0m
[36m│  │  ├─[0m [31mtest_cleanStrList_multipleNegatives_allSplitCorrectly()[0m [31m✘[0m [31mexpected: <5> but was: <3>[0m
[36m│  │  ├─[0m [31mtest_cleanStrList_negativeOne_splitCorrectly()[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_cleanStrList_singleNegativeNumber_parsedCorrectly()[0m [31m✘[0m [31mexpected: <2> but was: <1>[0m
[36m│  │  ├─[0m [31mtest_cleanStrList_mixedExpression_processedCorrectly()[0m [31m✘[0m [31mexpected: <7> but was: <5>[0m
[36m│  │  ├─[0m [31mtest_cleanStrList_negativeAfterOperator_handledCorrectly()[0m [31m✘[0m [31mexpected: <4> but was: <3>[0m
[36m│  │  ├─[0m [36mtest_cleanStrList_operatorsNotModified(String)[0m [32m✔[0m
[36m│  │  │  ├─[0m [31m[1] -[0m [31m✘[0m [31mexpected: <4> but was: <3>[0m
[36m│  │  │  ├─[0m [31m[2] +[0m [31m✘[0m [31mexpected: <4> but was: <3>[0m
[36m│  │  │  ├─[0m [31m[3] *[0m [31m✘[0m [31mexpected: <4> but was: <3>[0m
[36m│  │  │  ├─[0m [31m[4] /[0m [31m✘[0m [31mexpected: <4> but was: <3>[0m
[36m│  │  │  └─[0m [31m[5] ^[0m [31m✘[0m [31mexpected: <4> but was: <3>[0m
[36m│  │  └─[0m [34mtest_cleanStrList_emptyList_noChange()[0m [32m✔[0m
[36m│  ├─[0m [36mExpressionIsParensGeneratedTest[0m [32m✔[0m
[36m│  │  ├─[0m [34mtest_isParens_returnsFalse_whenParenthesisIsFalse()[0m [32m✔[0m
[36m│  │  ├─[0m [36mtest_isParens_handlesBothBooleanValues(boolean)[0m [32m✔[0m
[36m│  │  │  ├─[0m [34m[1] true[0m [32m✔[0m
[36m│  │  │  └─[0m [34m[2] false[0m [32m✔[0m
[36m│  │  └─[0m [34mtest_isParens_returnsTrue_whenParenthesisIsTrue()[0m [32m✔[0m
[36m│  └─[0m [36mMathTreeToStringGeneratedTest[0m [32m✔[0m
[36m│     └─[0m [34mtest_toString_nullRoot_returnsEmptyString[0m [32m✔[0m
[36m├─[0m [36mJUnit Vintage[0m [32m✔[0m
[36m└─[0m [36mJUnit Platform Suite[0m [32m✔[0m

Failures (58):
  JUnit Jupiter:MathTreeInitGeneratedTest:test_init_withVerySmallDoubleValues()
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_init_withVerySmallDoubleValues', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: Should handle Double.MIN_VALUE correctly ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_init_withVerySmallDoubleValues(MathTreeInitGeneratedTest.java:88)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeInitGeneratedTest:test_init_withDeeplyNestedExpression()
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_init_withDeeplyNestedExpression', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: Should handle deeply nested expressions correctly ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_init_withDeeplyNestedExpression(MathTreeInitGeneratedTest.java:112)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeInitGeneratedTest:test_init_validMathStatements(String):[2] ((2 * 3) + 5)
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_init_validMathStatements', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: Initialization should succeed for valid math statement: ((2 * 3) + 5) ==> expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:214)
       mathTree.MathTreeInitGeneratedTest.test_init_validMathStatements(MathTreeInitGeneratedTest.java:24)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:MathTreeInitGeneratedTest:test_init_invalidMathStatements(String):[9] 3 / 0
    MethodSource [className = 'mathTree.MathTreeInitGeneratedTest', methodName = 'test_init_invalidMathStatements', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: Initialization should fail for invalid math statement: 3 / 0 ==> expected: <false> but was: <true>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertFalse.failNotFalse(AssertFalse.java:63)
       org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:36)
       org.junit.jupiter.api.Assertions.assertFalse(Assertions.java:239)
       mathTree.MathTreeInitGeneratedTest.test_init_invalidMathStatements(MathTreeInitGeneratedTest.java:44)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
       [...]
  JUnit Jupiter:StringScannerSaveTokenGeneratedTest:test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(String):[2]  
    MethodSource [className = 'mathTree.StringScannerSaveTokenGeneratedTest', methodName = 'test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
       mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(StringScannerSaveTokenGeneratedTest.java:50)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerSaveTokenGeneratedTest:test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(String):[3]   
    MethodSource [className = 'mathTree.StringScannerSaveTokenGeneratedTest', methodName = 'test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
       mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(StringScannerSaveTokenGeneratedTest.java:50)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerSaveTokenGeneratedTest:test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(String):[4] 	
    MethodSource [className = 'mathTree.StringScannerSaveTokenGeneratedTest', methodName = 'test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
       mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(StringScannerSaveTokenGeneratedTest.java:50)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerSaveTokenGeneratedTest:test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(String):[5] 

    MethodSource [className = 'mathTree.StringScannerSaveTokenGeneratedTest', methodName = 'test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
       org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
       org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
       mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withEmptyOrWhitespaceStrings_doesNotAddToTokenList(StringScannerSaveTokenGeneratedTest.java:50)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerSaveTokenGeneratedTest:test_saveToken_withNullString_throwsException()
    MethodSource [className = 'mathTree.StringScannerSaveTokenGeneratedTest', methodName = 'test_saveToken_withNullString_throwsException', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: Unexpected exception type thrown, expected: <java.lang.NullPointerException> but was: <java.lang.reflect.InvocationTargetException>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:67)
       org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:35)
       org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3115)
       mathTree.StringScannerSaveTokenGeneratedTest.test_saveToken_withNullString_throwsException(StringScannerSaveTokenGeneratedTest.java:102)
       [...]
     Caused by: java.lang.reflect.InvocationTargetException
       java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:115)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       mathTree.StringScannerSaveTokenGeneratedTest.lambda$test_saveToken_withNullString_throwsException$0(StringScannerSaveTokenGeneratedTest.java:103)
       org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:53)
       [...]
     Caused by: java.lang.NullPointerException: Cannot invoke "String.isEmpty()" because "<parameter1>" is null
       mathTree.StringScanner.saveToken(StringScanner.java:85)
       java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_singleCharacterDelimiter_returnsTwoEmptyTokens()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_singleCharacterDelimiter_returnsTwoEmptyTokens', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_singleCharacterDelimiter_returnsTwoEmptyTokens(StringScannerScanGeneratedTest.java:26)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_longStringWithDelimiters_returnsCorrectTokens()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_longStringWithDelimiters_returnsCorrectTokens', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <21> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_longStringWithDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:104)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_multipleDelimiters_returnsCorrectTokens()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_multipleDelimiters_returnsCorrectTokens', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_multipleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:35)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_onlyDelimiters_returnsCorrectEmptyTokens()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_onlyDelimiters_returnsCorrectEmptyTokens', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <4> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_onlyDelimiters_returnsCorrectEmptyTokens(StringScannerScanGeneratedTest.java:55)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_specialCharacters_returnsCorrectTokens()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_specialCharacters_returnsCorrectTokens', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <7> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_specialCharacters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:115)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_parameterizedInputs_returnsExpectedTokenCount(String, int):[1] a b c, 5
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_parameterizedInputs_returnsExpectedTokenCount', methodParameterTypes = 'java.lang.String, int']
    => org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_parameterizedInputs_returnsExpectedTokenCount(StringScannerScanGeneratedTest.java:95)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_parameterizedInputs_returnsExpectedTokenCount(String, int):[2] 1+2, 5
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_parameterizedInputs_returnsExpectedTokenCount', methodParameterTypes = 'java.lang.String, int']
    => org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_parameterizedInputs_returnsExpectedTokenCount(StringScannerScanGeneratedTest.java:95)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_parameterizedInputs_returnsExpectedTokenCount(String, int):[3] x:y:z, 5
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_parameterizedInputs_returnsExpectedTokenCount', methodParameterTypes = 'java.lang.String, int']
    => org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_parameterizedInputs_returnsExpectedTokenCount(StringScannerScanGeneratedTest.java:95)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_parameterizedInputs_returnsExpectedTokenCount(String, int):[4] start|middle|end, 5
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_parameterizedInputs_returnsExpectedTokenCount', methodParameterTypes = 'java.lang.String, int']
    => org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_parameterizedInputs_returnsExpectedTokenCount(StringScannerScanGeneratedTest.java:95)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[1] ,
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[2] ;
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[3] :
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[4] |
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[5] &
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[6] !
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[7] ?
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[8] .
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[9] @
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[10] #
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[11] $
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[12] %
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[13] ^
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[14] *
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[15] (
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[16] )
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[17] [
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[18] ]
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[19] {
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[20] }
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[21] <
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[22] >
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[23] =
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[24] +
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[25] -
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[26] /
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_variousSingleDelimiters_returnsCorrectTokens(String):[27] \
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_variousSingleDelimiters_returnsCorrectTokens', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <3> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_variousSingleDelimiters_returnsCorrectTokens(StringScannerScanGeneratedTest.java:79)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:StringScannerScanGeneratedTest:test_scan_mixedDelimitersAndText_returnsCorrectTokens()
    MethodSource [className = 'mathTree.StringScannerScanGeneratedTest', methodName = 'test_scan_mixedDelimitersAndText_returnsCorrectTokens', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <5> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.StringScannerScanGeneratedTest.test_scan_mixedDelimitersAndText_returnsCorrectTokens(StringScannerScanGeneratedTest.java:65)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_zeroAsNegative_handled()
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_zeroAsNegative_handled', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_zeroAsNegative_handled(MathTreeCleanStrListGeneratedTest.java:118)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_negativeAtStart_splitIntoMinusAndNumber()
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_negativeAtStart_splitIntoMinusAndNumber', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <5> but was: <3>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_negativeAtStart_splitIntoMinusAndNumber(MathTreeCleanStrListGeneratedTest.java:43)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_multipleNegatives_allSplitCorrectly()
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_multipleNegatives_allSplitCorrectly', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <5> but was: <3>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_multipleNegatives_allSplitCorrectly(MathTreeCleanStrListGeneratedTest.java:58)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_negativeOne_splitCorrectly()
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_negativeOne_splitCorrectly', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_negativeOne_splitCorrectly(MathTreeCleanStrListGeneratedTest.java:145)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_singleNegativeNumber_parsedCorrectly()
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_singleNegativeNumber_parsedCorrectly', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <2> but was: <1>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_singleNegativeNumber_parsedCorrectly(MathTreeCleanStrListGeneratedTest.java:31)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_mixedExpression_processedCorrectly()
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_mixedExpression_processedCorrectly', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <7> but was: <5>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_mixedExpression_processedCorrectly(MathTreeCleanStrListGeneratedTest.java:103)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_negativeAfterOperator_handledCorrectly()
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_negativeAfterOperator_handledCorrectly', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_negativeAfterOperator_handledCorrectly(MathTreeCleanStrListGeneratedTest.java:73)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
       java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_operatorsNotModified(String):[1] -
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_operatorsNotModified', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_operatorsNotModified(MathTreeCleanStrListGeneratedTest.java:89)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_operatorsNotModified(String):[2] +
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_operatorsNotModified', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_operatorsNotModified(MathTreeCleanStrListGeneratedTest.java:89)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_operatorsNotModified(String):[3] *
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_operatorsNotModified', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_operatorsNotModified(MathTreeCleanStrListGeneratedTest.java:89)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_operatorsNotModified(String):[4] /
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_operatorsNotModified', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_operatorsNotModified(MathTreeCleanStrListGeneratedTest.java:89)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]
  JUnit Jupiter:MathTreeCleanStrListGeneratedTest:test_cleanStrList_operatorsNotModified(String):[5] ^
    MethodSource [className = 'mathTree.MathTreeCleanStrListGeneratedTest', methodName = 'test_cleanStrList_operatorsNotModified', methodParameterTypes = 'java.lang.String']
    => org.opentest4j.AssertionFailedError: expected: <4> but was: <3>
       org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
       org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:531)
       mathTree.MathTreeCleanStrListGeneratedTest.test_cleanStrList_operatorsNotModified(MathTreeCleanStrListGeneratedTest.java:89)
       java.base/java.lang.reflect.Method.invoke(Method.java:580)
       java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
       java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
       [...]

Test run finished after 150 ms
[        40 containers found      ]
[         0 containers skipped    ]
[        40 containers started    ]
[         0 containers aborted    ]
[        40 containers successful ]
[         0 containers failed     ]
[       221 tests found           ]
[         0 tests skipped         ]
[       221 tests started         ]
[         0 tests aborted         ]
[       163 tests successful      ]
[        58 tests failed          ]


WARNING: Delegated to the 'execute' command.
         This behaviour has been deprecated and will be removed in a future release.
         Please use the 'execute' command directly.

