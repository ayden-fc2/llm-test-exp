请为如下目标批量生成高质量、可编译运行的单元测试用例（优先语句/分支/异常覆盖，并尽可能覆盖边界与特殊取值）：

一、项目构建与依赖
- 语言/版本：Java 21
- 测试框架与版本：JUnit 5.10+
- 构建与运行：可使用 junit-platform-console 或 IDE 运行（无需网络/I/O）
- 依赖（至少以下可解析层级）：
  - 测试依赖：org.junit.jupiter:junit-jupiter
  - 源码依赖：本项目源码（无需第三方）
- 运行环境限制：无网络、无外部 I/O，测试互相独立、可重复

二、代码上下文
- 文件：src/mathNode/Div.java
- 包：mathNode
- 类：Div
- 方法签名：public Number Div.calculate()
- 抛出异常：无
- 相关 import：（无或不需要）
- 关键实现片段（用于理解控制流/分支；只读）：
```java
   {
      return getLeftNode().calculate().doubleValue() / getRightNode().calculate().doubleValue();
   }
```

三、语义与需求（基于方法名/类型推断；若不适用可忽略）
- 输入/输出约束：基于签名类型的常规边界（空/零/负值/极值/小数）
- 浮点/数值断言：可能涉及浮点/数值；断言使用 delta（例如 1e-9）
- 不变量/性质（若适用）：交换性/幂等/单调性/边界闭合
- 代表性示例：请据实现片段推测正常/异常/边界输入各 1~2 例

四、故障/覆盖信号
- 目标覆盖：语句≥90%、分支≥90%、必触达异常/错误分支（若存在）
- 建议包含：参数化用例覆盖输入组合；异常/非法参数断言；属性/不变量验证（若适用）
- 边界/特殊值：0、1、-1、空/空集合、Integer.MIN/MAX、Double 极小/极大、very_small/very_large

五、约束与偏好
- Mock 策略：不使用外部 Mock，必要时提供最小桩（可编译级别）
- 断言风格：JUnit 原生断言；浮点比较使用 delta（如 1e-9）；必要时断言返回类型
- 测试命名：test_<行为>_<条件>，语义清晰；测试独立、无随机不设种子

六、输出要求
- 仅输出测试代码，包含必要的 package/import、测试类与 @Test 方法
- 每个测试独立构造被测对象，禁止共享可变状态
- 如需最小桩请一并生成并确保可编译

请据此为 mathNode.Div#calculate 生成测试代码。
